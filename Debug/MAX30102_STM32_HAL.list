
MAX30102_STM32_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003078  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08003184  08003184  00013184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080032f4  080032f4  000132f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080032f8  080032f8  000132f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  080032fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002b28  20000070  0800336c  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20002b98  0800336c  00022b98  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013aa0  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002b5c  00000000  00000000  00033b39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000064b2  00000000  00000000  00036695  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008a8  00000000  00000000  0003cb48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c68  00000000  00000000  0003d3f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005d51  00000000  00000000  0003e058  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000321d  00000000  00000000  00043da9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00046fc6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001c78  00000000  00000000  00047044  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800316c 	.word	0x0800316c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800316c 	.word	0x0800316c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000218:	f1a2 0201 	sub.w	r2, r2, #1
 800021c:	d1ed      	bne.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2iz>:
 8000618:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000620:	d30f      	bcc.n	8000642 <__aeabi_f2iz+0x2a>
 8000622:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d90d      	bls.n	8000648 <__aeabi_f2iz+0x30>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000634:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000638:	fa23 f002 	lsr.w	r0, r3, r2
 800063c:	bf18      	it	ne
 800063e:	4240      	negne	r0, r0
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr
 8000648:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800064c:	d101      	bne.n	8000652 <__aeabi_f2iz+0x3a>
 800064e:	0242      	lsls	r2, r0, #9
 8000650:	d105      	bne.n	800065e <__aeabi_f2iz+0x46>
 8000652:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000656:	bf08      	it	eq
 8000658:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065c:	4770      	bx	lr
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	4770      	bx	lr

08000664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000664:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <HAL_InitTick+0x3c>)
{
 8000668:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800066a:	7818      	ldrb	r0, [r3, #0]
 800066c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000670:	fbb3 f3f0 	udiv	r3, r3, r0
 8000674:	4a0b      	ldr	r2, [pc, #44]	; (80006a4 <HAL_InitTick+0x40>)
 8000676:	6810      	ldr	r0, [r2, #0]
 8000678:	fbb0 f0f3 	udiv	r0, r0, r3
 800067c:	f000 f88c 	bl	8000798 <HAL_SYSTICK_Config>
 8000680:	4604      	mov	r4, r0
 8000682:	b958      	cbnz	r0, 800069c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000684:	2d0f      	cmp	r5, #15
 8000686:	d809      	bhi.n	800069c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000688:	4602      	mov	r2, r0
 800068a:	4629      	mov	r1, r5
 800068c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000690:	f000 f842 	bl	8000718 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <HAL_InitTick+0x44>)
 8000696:	4620      	mov	r0, r4
 8000698:	601d      	str	r5, [r3, #0]
 800069a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800069c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800069e:	bd38      	pop	{r3, r4, r5, pc}
 80006a0:	20000000 	.word	0x20000000
 80006a4:	20000008 	.word	0x20000008
 80006a8:	20000004 	.word	0x20000004

080006ac <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006ac:	4a07      	ldr	r2, [pc, #28]	; (80006cc <HAL_Init+0x20>)
{
 80006ae:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b4:	f043 0310 	orr.w	r3, r3, #16
 80006b8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ba:	f000 f81b 	bl	80006f4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80006be:	2000      	movs	r0, #0
 80006c0:	f7ff ffd0 	bl	8000664 <HAL_InitTick>
  HAL_MspInit();
 80006c4:	f002 f806 	bl	80026d4 <HAL_MspInit>
}
 80006c8:	2000      	movs	r0, #0
 80006ca:	bd08      	pop	{r3, pc}
 80006cc:	40022000 	.word	0x40022000

080006d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006d0:	4a03      	ldr	r2, [pc, #12]	; (80006e0 <HAL_IncTick+0x10>)
 80006d2:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <HAL_IncTick+0x14>)
 80006d4:	6811      	ldr	r1, [r2, #0]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	440b      	add	r3, r1
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	200017f8 	.word	0x200017f8
 80006e4:	20000000 	.word	0x20000000

080006e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006e8:	4b01      	ldr	r3, [pc, #4]	; (80006f0 <HAL_GetTick+0x8>)
 80006ea:	6818      	ldr	r0, [r3, #0]
}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	200017f8 	.word	0x200017f8

080006f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f4:	4a07      	ldr	r2, [pc, #28]	; (8000714 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006f6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006fa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000702:	041b      	lsls	r3, r3, #16
 8000704:	0c1b      	lsrs	r3, r3, #16
 8000706:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800070a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800070e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000710:	60d3      	str	r3, [r2, #12]
 8000712:	4770      	bx	lr
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000718:	4b17      	ldr	r3, [pc, #92]	; (8000778 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	68dc      	ldr	r4, [r3, #12]
 800071e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000722:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000726:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000728:	2b04      	cmp	r3, #4
 800072a:	bf28      	it	cs
 800072c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000730:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000734:	bf98      	it	ls
 8000736:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000738:	fa05 f303 	lsl.w	r3, r5, r3
 800073c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000740:	bf88      	it	hi
 8000742:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000744:	4019      	ands	r1, r3
 8000746:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000748:	fa05 f404 	lsl.w	r4, r5, r4
 800074c:	3c01      	subs	r4, #1
 800074e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000750:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000752:	ea42 0201 	orr.w	r2, r2, r1
 8000756:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075a:	bfaf      	iteee	ge
 800075c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000760:	4b06      	ldrlt	r3, [pc, #24]	; (800077c <HAL_NVIC_SetPriority+0x64>)
 8000762:	f000 000f 	andlt.w	r0, r0, #15
 8000766:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000768:	bfa5      	ittet	ge
 800076a:	b2d2      	uxtbge	r2, r2
 800076c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000770:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000772:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000776:	bd30      	pop	{r4, r5, pc}
 8000778:	e000ed00 	.word	0xe000ed00
 800077c:	e000ed14 	.word	0xe000ed14

08000780 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000780:	2301      	movs	r3, #1
 8000782:	0942      	lsrs	r2, r0, #5
 8000784:	f000 001f 	and.w	r0, r0, #31
 8000788:	fa03 f000 	lsl.w	r0, r3, r0
 800078c:	4b01      	ldr	r3, [pc, #4]	; (8000794 <HAL_NVIC_EnableIRQ+0x14>)
 800078e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000792:	4770      	bx	lr
 8000794:	e000e100 	.word	0xe000e100

08000798 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000798:	3801      	subs	r0, #1
 800079a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800079e:	d20a      	bcs.n	80007b6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a4:	4a06      	ldr	r2, [pc, #24]	; (80007c0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ac:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ae:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007b6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	e000e010 	.word	0xe000e010
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80007c8:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80007ca:	4616      	mov	r6, r2
 80007cc:	4b65      	ldr	r3, [pc, #404]	; (8000964 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007ce:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000974 <HAL_GPIO_Init+0x1b0>
 80007d2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000978 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80007d6:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007da:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80007dc:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007e0:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80007e4:	45a0      	cmp	r8, r4
 80007e6:	d17f      	bne.n	80008e8 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80007e8:	684d      	ldr	r5, [r1, #4]
 80007ea:	2d12      	cmp	r5, #18
 80007ec:	f000 80af 	beq.w	800094e <HAL_GPIO_Init+0x18a>
 80007f0:	f200 8088 	bhi.w	8000904 <HAL_GPIO_Init+0x140>
 80007f4:	2d02      	cmp	r5, #2
 80007f6:	f000 80a7 	beq.w	8000948 <HAL_GPIO_Init+0x184>
 80007fa:	d87c      	bhi.n	80008f6 <HAL_GPIO_Init+0x132>
 80007fc:	2d00      	cmp	r5, #0
 80007fe:	f000 808e 	beq.w	800091e <HAL_GPIO_Init+0x15a>
 8000802:	2d01      	cmp	r5, #1
 8000804:	f000 809e 	beq.w	8000944 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000808:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800080c:	2cff      	cmp	r4, #255	; 0xff
 800080e:	bf93      	iteet	ls
 8000810:	4682      	movls	sl, r0
 8000812:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000816:	3d08      	subhi	r5, #8
 8000818:	f8d0 b000 	ldrls.w	fp, [r0]
 800081c:	bf92      	itee	ls
 800081e:	00b5      	lslls	r5, r6, #2
 8000820:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000824:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000826:	fa09 f805 	lsl.w	r8, r9, r5
 800082a:	ea2b 0808 	bic.w	r8, fp, r8
 800082e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000832:	bf88      	it	hi
 8000834:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000838:	ea48 0505 	orr.w	r5, r8, r5
 800083c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000840:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000844:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000848:	d04e      	beq.n	80008e8 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800084a:	4d47      	ldr	r5, [pc, #284]	; (8000968 <HAL_GPIO_Init+0x1a4>)
 800084c:	4f46      	ldr	r7, [pc, #280]	; (8000968 <HAL_GPIO_Init+0x1a4>)
 800084e:	69ad      	ldr	r5, [r5, #24]
 8000850:	f026 0803 	bic.w	r8, r6, #3
 8000854:	f045 0501 	orr.w	r5, r5, #1
 8000858:	61bd      	str	r5, [r7, #24]
 800085a:	69bd      	ldr	r5, [r7, #24]
 800085c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000860:	f005 0501 	and.w	r5, r5, #1
 8000864:	9501      	str	r5, [sp, #4]
 8000866:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800086a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800086e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000870:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000874:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000878:	fa09 f90b 	lsl.w	r9, r9, fp
 800087c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000880:	4d3a      	ldr	r5, [pc, #232]	; (800096c <HAL_GPIO_Init+0x1a8>)
 8000882:	42a8      	cmp	r0, r5
 8000884:	d068      	beq.n	8000958 <HAL_GPIO_Init+0x194>
 8000886:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800088a:	42a8      	cmp	r0, r5
 800088c:	d066      	beq.n	800095c <HAL_GPIO_Init+0x198>
 800088e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000892:	42a8      	cmp	r0, r5
 8000894:	d064      	beq.n	8000960 <HAL_GPIO_Init+0x19c>
 8000896:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800089a:	42a8      	cmp	r0, r5
 800089c:	bf0c      	ite	eq
 800089e:	2503      	moveq	r5, #3
 80008a0:	2504      	movne	r5, #4
 80008a2:	fa05 f50b 	lsl.w	r5, r5, fp
 80008a6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80008aa:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80008ae:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008b0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80008b4:	bf14      	ite	ne
 80008b6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80008b8:	43a5      	biceq	r5, r4
 80008ba:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80008bc:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008be:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80008c2:	bf14      	ite	ne
 80008c4:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80008c6:	43a5      	biceq	r5, r4
 80008c8:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80008ca:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008cc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80008d0:	bf14      	ite	ne
 80008d2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80008d4:	43a5      	biceq	r5, r4
 80008d6:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80008d8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008da:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80008de:	bf14      	ite	ne
 80008e0:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80008e2:	ea25 0404 	biceq.w	r4, r5, r4
 80008e6:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80008e8:	3601      	adds	r6, #1
 80008ea:	2e10      	cmp	r6, #16
 80008ec:	f47f af73 	bne.w	80007d6 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80008f0:	b003      	add	sp, #12
 80008f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80008f6:	2d03      	cmp	r5, #3
 80008f8:	d022      	beq.n	8000940 <HAL_GPIO_Init+0x17c>
 80008fa:	2d11      	cmp	r5, #17
 80008fc:	d184      	bne.n	8000808 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008fe:	68ca      	ldr	r2, [r1, #12]
 8000900:	3204      	adds	r2, #4
          break;
 8000902:	e781      	b.n	8000808 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000904:	4f1a      	ldr	r7, [pc, #104]	; (8000970 <HAL_GPIO_Init+0x1ac>)
 8000906:	42bd      	cmp	r5, r7
 8000908:	d009      	beq.n	800091e <HAL_GPIO_Init+0x15a>
 800090a:	d812      	bhi.n	8000932 <HAL_GPIO_Init+0x16e>
 800090c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800097c <HAL_GPIO_Init+0x1b8>
 8000910:	454d      	cmp	r5, r9
 8000912:	d004      	beq.n	800091e <HAL_GPIO_Init+0x15a>
 8000914:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000918:	454d      	cmp	r5, r9
 800091a:	f47f af75 	bne.w	8000808 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800091e:	688a      	ldr	r2, [r1, #8]
 8000920:	b1c2      	cbz	r2, 8000954 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000922:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000924:	bf0c      	ite	eq
 8000926:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800092a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800092e:	2208      	movs	r2, #8
 8000930:	e76a      	b.n	8000808 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000932:	4575      	cmp	r5, lr
 8000934:	d0f3      	beq.n	800091e <HAL_GPIO_Init+0x15a>
 8000936:	4565      	cmp	r5, ip
 8000938:	d0f1      	beq.n	800091e <HAL_GPIO_Init+0x15a>
 800093a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000980 <HAL_GPIO_Init+0x1bc>
 800093e:	e7eb      	b.n	8000918 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000940:	2200      	movs	r2, #0
 8000942:	e761      	b.n	8000808 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000944:	68ca      	ldr	r2, [r1, #12]
          break;
 8000946:	e75f      	b.n	8000808 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000948:	68ca      	ldr	r2, [r1, #12]
 800094a:	3208      	adds	r2, #8
          break;
 800094c:	e75c      	b.n	8000808 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800094e:	68ca      	ldr	r2, [r1, #12]
 8000950:	320c      	adds	r2, #12
          break;
 8000952:	e759      	b.n	8000808 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000954:	2204      	movs	r2, #4
 8000956:	e757      	b.n	8000808 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000958:	2500      	movs	r5, #0
 800095a:	e7a2      	b.n	80008a2 <HAL_GPIO_Init+0xde>
 800095c:	2501      	movs	r5, #1
 800095e:	e7a0      	b.n	80008a2 <HAL_GPIO_Init+0xde>
 8000960:	2502      	movs	r5, #2
 8000962:	e79e      	b.n	80008a2 <HAL_GPIO_Init+0xde>
 8000964:	40010400 	.word	0x40010400
 8000968:	40021000 	.word	0x40021000
 800096c:	40010800 	.word	0x40010800
 8000970:	10210000 	.word	0x10210000
 8000974:	10310000 	.word	0x10310000
 8000978:	10320000 	.word	0x10320000
 800097c:	10110000 	.word	0x10110000
 8000980:	10220000 	.word	0x10220000

08000984 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000984:	b10a      	cbz	r2, 800098a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000986:	6101      	str	r1, [r0, #16]
 8000988:	4770      	bx	lr
 800098a:	0409      	lsls	r1, r1, #16
 800098c:	e7fb      	b.n	8000986 <HAL_GPIO_WritePin+0x2>
	...

08000990 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000990:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000994:	6959      	ldr	r1, [r3, #20]
 8000996:	4201      	tst	r1, r0
 8000998:	d002      	beq.n	80009a0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800099a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800099c:	f001 fe94 	bl	80026c8 <HAL_GPIO_EXTI_Callback>
 80009a0:	bd08      	pop	{r3, pc}
 80009a2:	bf00      	nop
 80009a4:	40010400 	.word	0x40010400

080009a8 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80009a8:	6802      	ldr	r2, [r0, #0]
 80009aa:	6953      	ldr	r3, [r2, #20]
 80009ac:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80009b0:	d00d      	beq.n	80009ce <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80009b2:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80009b6:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80009b8:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 80009ba:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80009bc:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80009be:	2300      	movs	r3, #0
 80009c0:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80009c2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 80009c6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 80009ca:	2001      	movs	r0, #1
 80009cc:	4770      	bx	lr
  }
  return HAL_OK;
 80009ce:	4618      	mov	r0, r3
}
 80009d0:	4770      	bx	lr

080009d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80009d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009d6:	4604      	mov	r4, r0
 80009d8:	4617      	mov	r7, r2
 80009da:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80009dc:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80009e0:	b28e      	uxth	r6, r1
 80009e2:	6825      	ldr	r5, [r4, #0]
 80009e4:	f1b8 0f01 	cmp.w	r8, #1
 80009e8:	bf0c      	ite	eq
 80009ea:	696b      	ldreq	r3, [r5, #20]
 80009ec:	69ab      	ldrne	r3, [r5, #24]
 80009ee:	ea36 0303 	bics.w	r3, r6, r3
 80009f2:	bf14      	ite	ne
 80009f4:	2001      	movne	r0, #1
 80009f6:	2000      	moveq	r0, #0
 80009f8:	b908      	cbnz	r0, 80009fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80009fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80009fe:	696b      	ldr	r3, [r5, #20]
 8000a00:	055a      	lsls	r2, r3, #21
 8000a02:	d512      	bpl.n	8000a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000a04:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8000a06:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000a08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a0c:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000a0e:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000a12:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000a14:	2304      	movs	r3, #4
 8000a16:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8000a18:	2300      	movs	r3, #0
      return HAL_ERROR;
 8000a1a:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 8000a1c:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8000a1e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8000a22:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8000a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000a2a:	1c7b      	adds	r3, r7, #1
 8000a2c:	d0d9      	beq.n	80009e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000a2e:	b94f      	cbnz	r7, 8000a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000a30:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000a32:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000a34:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000a36:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000a3a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8000a3e:	2003      	movs	r0, #3
 8000a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000a44:	f7ff fe50 	bl	80006e8 <HAL_GetTick>
 8000a48:	eba0 0009 	sub.w	r0, r0, r9
 8000a4c:	4287      	cmp	r7, r0
 8000a4e:	d2c8      	bcs.n	80009e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8000a50:	e7ee      	b.n	8000a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08000a52 <I2C_WaitOnFlagUntilTimeout>:
{
 8000a52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a56:	4604      	mov	r4, r0
 8000a58:	4690      	mov	r8, r2
 8000a5a:	461f      	mov	r7, r3
 8000a5c:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000a5e:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8000a62:	b28d      	uxth	r5, r1
 8000a64:	6823      	ldr	r3, [r4, #0]
 8000a66:	f1b9 0f01 	cmp.w	r9, #1
 8000a6a:	bf0c      	ite	eq
 8000a6c:	695b      	ldreq	r3, [r3, #20]
 8000a6e:	699b      	ldrne	r3, [r3, #24]
 8000a70:	ea35 0303 	bics.w	r3, r5, r3
 8000a74:	bf0c      	ite	eq
 8000a76:	2301      	moveq	r3, #1
 8000a78:	2300      	movne	r3, #0
 8000a7a:	4543      	cmp	r3, r8
 8000a7c:	d002      	beq.n	8000a84 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8000a7e:	2000      	movs	r0, #0
}
 8000a80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000a84:	1c7b      	adds	r3, r7, #1
 8000a86:	d0ed      	beq.n	8000a64 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000a88:	b95f      	cbnz	r7, 8000aa2 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000a8a:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000a8c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000a8e:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000a90:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000a94:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000a98:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a9a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8000a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000aa2:	f7ff fe21 	bl	80006e8 <HAL_GetTick>
 8000aa6:	1b80      	subs	r0, r0, r6
 8000aa8:	4287      	cmp	r7, r0
 8000aaa:	d2db      	bcs.n	8000a64 <I2C_WaitOnFlagUntilTimeout+0x12>
 8000aac:	e7ed      	b.n	8000a8a <I2C_WaitOnFlagUntilTimeout+0x38>

08000aae <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8000aae:	b570      	push	{r4, r5, r6, lr}
 8000ab0:	4604      	mov	r4, r0
 8000ab2:	460d      	mov	r5, r1
 8000ab4:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000ab6:	6823      	ldr	r3, [r4, #0]
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	061b      	lsls	r3, r3, #24
 8000abc:	d501      	bpl.n	8000ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8000abe:	2000      	movs	r0, #0
 8000ac0:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000ac2:	4620      	mov	r0, r4
 8000ac4:	f7ff ff70 	bl	80009a8 <I2C_IsAcknowledgeFailed>
 8000ac8:	b9a8      	cbnz	r0, 8000af6 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000aca:	1c6a      	adds	r2, r5, #1
 8000acc:	d0f3      	beq.n	8000ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000ace:	b965      	cbnz	r5, 8000aea <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ad0:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8000ad2:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ad4:	f043 0320 	orr.w	r3, r3, #32
 8000ad8:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000ada:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8000adc:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8000ade:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000ae0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000ae4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8000ae8:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000aea:	f7ff fdfd 	bl	80006e8 <HAL_GetTick>
 8000aee:	1b80      	subs	r0, r0, r6
 8000af0:	4285      	cmp	r5, r0
 8000af2:	d2e0      	bcs.n	8000ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8000af4:	e7ec      	b.n	8000ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000af6:	2001      	movs	r0, #1
}
 8000af8:	bd70      	pop	{r4, r5, r6, pc}
	...

08000afc <I2C_RequestMemoryWrite>:
{
 8000afc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000b00:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000b02:	6802      	ldr	r2, [r0, #0]
{
 8000b04:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000b06:	6813      	ldr	r3, [r2, #0]
{
 8000b08:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0e:	6013      	str	r3, [r2, #0]
{
 8000b10:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000b12:	9600      	str	r6, [sp, #0]
 8000b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000b16:	2200      	movs	r2, #0
 8000b18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8000b1c:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000b1e:	f7ff ff98 	bl	8000a52 <I2C_WaitOnFlagUntilTimeout>
 8000b22:	b968      	cbnz	r0, 8000b40 <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000b24:	6823      	ldr	r3, [r4, #0]
 8000b26:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8000b2a:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000b2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000b2e:	4633      	mov	r3, r6
 8000b30:	491a      	ldr	r1, [pc, #104]	; (8000b9c <I2C_RequestMemoryWrite+0xa0>)
 8000b32:	4620      	mov	r0, r4
 8000b34:	f7ff ff4d 	bl	80009d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000b38:	b130      	cbz	r0, 8000b48 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b3c:	2b04      	cmp	r3, #4
 8000b3e:	d018      	beq.n	8000b72 <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 8000b40:	2003      	movs	r0, #3
}
 8000b42:	b004      	add	sp, #16
 8000b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b48:	6823      	ldr	r3, [r4, #0]
 8000b4a:	9003      	str	r0, [sp, #12]
 8000b4c:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b4e:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b50:	9203      	str	r2, [sp, #12]
 8000b52:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b54:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b56:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b58:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b5a:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b5c:	f7ff ffa7 	bl	8000aae <I2C_WaitOnTXEFlagUntilTimeout>
 8000b60:	b148      	cbz	r0, 8000b76 <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b64:	2b04      	cmp	r3, #4
 8000b66:	d1eb      	bne.n	8000b40 <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000b68:	6822      	ldr	r2, [r4, #0]
 8000b6a:	6813      	ldr	r3, [r2, #0]
 8000b6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b70:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8000b72:	2001      	movs	r0, #1
 8000b74:	e7e5      	b.n	8000b42 <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000b76:	f1b8 0f01 	cmp.w	r8, #1
 8000b7a:	6823      	ldr	r3, [r4, #0]
 8000b7c:	d102      	bne.n	8000b84 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000b7e:	b2ed      	uxtb	r5, r5
 8000b80:	611d      	str	r5, [r3, #16]
 8000b82:	e7de      	b.n	8000b42 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000b84:	0a2a      	lsrs	r2, r5, #8
 8000b86:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b88:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000b8a:	4632      	mov	r2, r6
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	f7ff ff8e 	bl	8000aae <I2C_WaitOnTXEFlagUntilTimeout>
 8000b92:	2800      	cmp	r0, #0
 8000b94:	d1e5      	bne.n	8000b62 <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000b96:	6823      	ldr	r3, [r4, #0]
 8000b98:	e7f1      	b.n	8000b7e <I2C_RequestMemoryWrite+0x82>
 8000b9a:	bf00      	nop
 8000b9c:	00010002 	.word	0x00010002

08000ba0 <I2C_RequestMemoryRead>:
{
 8000ba0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000ba4:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000ba6:	6803      	ldr	r3, [r0, #0]
{
 8000ba8:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000baa:	681a      	ldr	r2, [r3, #0]
{
 8000bac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000bae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000bb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000bb4:	681a      	ldr	r2, [r3, #0]
{
 8000bb6:	460f      	mov	r7, r1
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000bb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bbc:	601a      	str	r2, [r3, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000bbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000bc2:	9500      	str	r5, [sp, #0]
 8000bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000bc6:	2200      	movs	r2, #0
{
 8000bc8:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000bca:	f7ff ff42 	bl	8000a52 <I2C_WaitOnFlagUntilTimeout>
 8000bce:	b980      	cbnz	r0, 8000bf2 <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000bd0:	6823      	ldr	r3, [r4, #0]
 8000bd2:	b2ff      	uxtb	r7, r7
 8000bd4:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8000bd8:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000bda:	492d      	ldr	r1, [pc, #180]	; (8000c90 <I2C_RequestMemoryRead+0xf0>)
 8000bdc:	462b      	mov	r3, r5
 8000bde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000be0:	4620      	mov	r0, r4
 8000be2:	f7ff fef6 	bl	80009d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000be6:	b140      	cbz	r0, 8000bfa <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000be8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	d101      	bne.n	8000bf2 <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 8000bee:	2001      	movs	r0, #1
 8000bf0:	e000      	b.n	8000bf4 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 8000bf2:	2003      	movs	r0, #3
}
 8000bf4:	b004      	add	sp, #16
 8000bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000bfa:	6823      	ldr	r3, [r4, #0]
 8000bfc:	9003      	str	r0, [sp, #12]
 8000bfe:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c00:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000c02:	9203      	str	r2, [sp, #12]
 8000c04:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c06:	462a      	mov	r2, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000c08:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c0a:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000c0c:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c0e:	f7ff ff4e 	bl	8000aae <I2C_WaitOnTXEFlagUntilTimeout>
 8000c12:	b140      	cbz	r0, 8000c26 <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000c14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	d1eb      	bne.n	8000bf2 <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000c1a:	6822      	ldr	r2, [r4, #0]
 8000c1c:	6813      	ldr	r3, [r2, #0]
 8000c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	e7e3      	b.n	8000bee <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000c26:	f1b8 0f01 	cmp.w	r8, #1
 8000c2a:	6823      	ldr	r3, [r4, #0]
 8000c2c:	d124      	bne.n	8000c78 <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000c2e:	b2f6      	uxtb	r6, r6
 8000c30:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c32:	462a      	mov	r2, r5
 8000c34:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000c36:	4620      	mov	r0, r4
 8000c38:	f7ff ff39 	bl	8000aae <I2C_WaitOnTXEFlagUntilTimeout>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	2800      	cmp	r0, #0
 8000c40:	d1e8      	bne.n	8000c14 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000c42:	6821      	ldr	r1, [r4, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000c44:	4620      	mov	r0, r4
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000c46:	680b      	ldr	r3, [r1, #0]
 8000c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c4c:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000c4e:	9500      	str	r5, [sp, #0]
 8000c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000c52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000c56:	f7ff fefc 	bl	8000a52 <I2C_WaitOnFlagUntilTimeout>
 8000c5a:	2800      	cmp	r0, #0
 8000c5c:	d1c9      	bne.n	8000bf2 <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000c5e:	6823      	ldr	r3, [r4, #0]
 8000c60:	f047 0701 	orr.w	r7, r7, #1
 8000c64:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000c66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000c68:	462b      	mov	r3, r5
 8000c6a:	4909      	ldr	r1, [pc, #36]	; (8000c90 <I2C_RequestMemoryRead+0xf0>)
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	f7ff feb0 	bl	80009d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000c72:	2800      	cmp	r0, #0
 8000c74:	d1b8      	bne.n	8000be8 <I2C_RequestMemoryRead+0x48>
 8000c76:	e7bd      	b.n	8000bf4 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000c78:	0a32      	lsrs	r2, r6, #8
 8000c7a:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c7c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000c7e:	462a      	mov	r2, r5
 8000c80:	4620      	mov	r0, r4
 8000c82:	f7ff ff14 	bl	8000aae <I2C_WaitOnTXEFlagUntilTimeout>
 8000c86:	2800      	cmp	r0, #0
 8000c88:	d1c4      	bne.n	8000c14 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000c8a:	6823      	ldr	r3, [r4, #0]
 8000c8c:	e7cf      	b.n	8000c2e <I2C_RequestMemoryRead+0x8e>
 8000c8e:	bf00      	nop
 8000c90:	00010002 	.word	0x00010002

08000c94 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8000c94:	b570      	push	{r4, r5, r6, lr}
 8000c96:	4604      	mov	r4, r0
 8000c98:	460d      	mov	r5, r1
 8000c9a:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000c9c:	6820      	ldr	r0, [r4, #0]
 8000c9e:	6943      	ldr	r3, [r0, #20]
 8000ca0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8000ca4:	d001      	beq.n	8000caa <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8000ca6:	2000      	movs	r0, #0
}
 8000ca8:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000caa:	6942      	ldr	r2, [r0, #20]
 8000cac:	06d2      	lsls	r2, r2, #27
 8000cae:	d50b      	bpl.n	8000cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000cb0:	f06f 0210 	mvn.w	r2, #16
 8000cb4:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8000cb6:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cb8:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000cba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8000cbe:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8000cc0:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8000cc2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8000cc6:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000cc8:	b95d      	cbnz	r5, 8000ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000cca:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000ccc:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000cce:	f043 0320 	orr.w	r3, r3, #32
 8000cd2:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8000cd4:	2320      	movs	r3, #32
 8000cd6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8000ce0:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000ce2:	f7ff fd01 	bl	80006e8 <HAL_GetTick>
 8000ce6:	1b80      	subs	r0, r0, r6
 8000ce8:	4285      	cmp	r5, r0
 8000cea:	d2d7      	bcs.n	8000c9c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8000cec:	e7ed      	b.n	8000cca <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08000cee <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8000cee:	b570      	push	{r4, r5, r6, lr}
 8000cf0:	4604      	mov	r4, r0
 8000cf2:	460d      	mov	r5, r1
 8000cf4:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000cf6:	6823      	ldr	r3, [r4, #0]
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	075b      	lsls	r3, r3, #29
 8000cfc:	d501      	bpl.n	8000d02 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000cfe:	2000      	movs	r0, #0
 8000d00:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000d02:	4620      	mov	r0, r4
 8000d04:	f7ff fe50 	bl	80009a8 <I2C_IsAcknowledgeFailed>
 8000d08:	b9a8      	cbnz	r0, 8000d36 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000d0a:	1c6a      	adds	r2, r5, #1
 8000d0c:	d0f3      	beq.n	8000cf6 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000d0e:	b965      	cbnz	r5, 8000d2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000d10:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8000d12:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000d14:	f043 0320 	orr.w	r3, r3, #32
 8000d18:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000d1a:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8000d1c:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8000d1e:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000d20:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000d24:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8000d28:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000d2a:	f7ff fcdd 	bl	80006e8 <HAL_GetTick>
 8000d2e:	1b80      	subs	r0, r0, r6
 8000d30:	4285      	cmp	r5, r0
 8000d32:	d2e0      	bcs.n	8000cf6 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8000d34:	e7ec      	b.n	8000d10 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000d36:	2001      	movs	r0, #1
}
 8000d38:	bd70      	pop	{r4, r5, r6, pc}
	...

08000d3c <HAL_I2C_Init>:
{
 8000d3c:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 8000d3e:	4604      	mov	r4, r0
 8000d40:	b908      	cbnz	r0, 8000d46 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8000d42:	2001      	movs	r0, #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000d46:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000d4a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d4e:	b91b      	cbnz	r3, 8000d58 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8000d50:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000d54:	f001 fc20 	bl	8002598 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d58:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8000d5a:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d5c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000d60:	6813      	ldr	r3, [r2, #0]
 8000d62:	f023 0301 	bic.w	r3, r3, #1
 8000d66:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000d68:	f000 fc98 	bl	800169c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d6c:	6863      	ldr	r3, [r4, #4]
 8000d6e:	4a2f      	ldr	r2, [pc, #188]	; (8000e2c <HAL_I2C_Init+0xf0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d830      	bhi.n	8000dd6 <HAL_I2C_Init+0x9a>
 8000d74:	4a2e      	ldr	r2, [pc, #184]	; (8000e30 <HAL_I2C_Init+0xf4>)
 8000d76:	4290      	cmp	r0, r2
 8000d78:	d9e3      	bls.n	8000d42 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000d7a:	4a2e      	ldr	r2, [pc, #184]	; (8000e34 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 8000d7c:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000d7e:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 8000d82:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000d84:	3201      	adds	r2, #1
 8000d86:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000d88:	4a28      	ldr	r2, [pc, #160]	; (8000e2c <HAL_I2C_Init+0xf0>)
 8000d8a:	3801      	subs	r0, #1
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d832      	bhi.n	8000df6 <HAL_I2C_Init+0xba>
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d96:	1c43      	adds	r3, r0, #1
 8000d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d9c:	2b04      	cmp	r3, #4
 8000d9e:	bf38      	it	cc
 8000da0:	2304      	movcc	r3, #4
 8000da2:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000da4:	6a22      	ldr	r2, [r4, #32]
 8000da6:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000da8:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000daa:	4313      	orrs	r3, r2
 8000dac:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000dae:	68e2      	ldr	r2, [r4, #12]
 8000db0:	6923      	ldr	r3, [r4, #16]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000db6:	69a2      	ldr	r2, [r4, #24]
 8000db8:	6963      	ldr	r3, [r4, #20]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000dbe:	680b      	ldr	r3, [r1, #0]
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000dc6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dc8:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000dca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000dce:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dd0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8000dd4:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000dd6:	4a18      	ldr	r2, [pc, #96]	; (8000e38 <HAL_I2C_Init+0xfc>)
 8000dd8:	4290      	cmp	r0, r2
 8000dda:	d9b2      	bls.n	8000d42 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000ddc:	4d15      	ldr	r5, [pc, #84]	; (8000e34 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000dde:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8000de2:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 8000de6:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000de8:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 8000dea:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000dec:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000df0:	fbb2 f2f5 	udiv	r2, r2, r5
 8000df4:	e7c6      	b.n	8000d84 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000df6:	68a2      	ldr	r2, [r4, #8]
 8000df8:	b952      	cbnz	r2, 8000e10 <HAL_I2C_Init+0xd4>
 8000dfa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000dfe:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e02:	1c43      	adds	r3, r0, #1
 8000e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e08:	b16b      	cbz	r3, 8000e26 <HAL_I2C_Init+0xea>
 8000e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e0e:	e7c8      	b.n	8000da2 <HAL_I2C_Init+0x66>
 8000e10:	2219      	movs	r2, #25
 8000e12:	4353      	muls	r3, r2
 8000e14:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e18:	1c43      	adds	r3, r0, #1
 8000e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e1e:	b113      	cbz	r3, 8000e26 <HAL_I2C_Init+0xea>
 8000e20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e24:	e7bd      	b.n	8000da2 <HAL_I2C_Init+0x66>
 8000e26:	2301      	movs	r3, #1
 8000e28:	e7bb      	b.n	8000da2 <HAL_I2C_Init+0x66>
 8000e2a:	bf00      	nop
 8000e2c:	000186a0 	.word	0x000186a0
 8000e30:	001e847f 	.word	0x001e847f
 8000e34:	000f4240 	.word	0x000f4240
 8000e38:	003d08ff 	.word	0x003d08ff

08000e3c <HAL_I2C_Mem_Write>:
{
 8000e3c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e40:	4604      	mov	r4, r0
 8000e42:	469a      	mov	sl, r3
 8000e44:	4688      	mov	r8, r1
 8000e46:	4691      	mov	r9, r2
 8000e48:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 8000e4a:	f7ff fc4d 	bl	80006e8 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000e4e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8000e52:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000e54:	2b20      	cmp	r3, #32
 8000e56:	d003      	beq.n	8000e60 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8000e58:	2002      	movs	r0, #2
}
 8000e5a:	b002      	add	sp, #8
 8000e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000e60:	9000      	str	r0, [sp, #0]
 8000e62:	2319      	movs	r3, #25
 8000e64:	2201      	movs	r2, #1
 8000e66:	493e      	ldr	r1, [pc, #248]	; (8000f60 <HAL_I2C_Mem_Write+0x124>)
 8000e68:	4620      	mov	r0, r4
 8000e6a:	f7ff fdf2 	bl	8000a52 <I2C_WaitOnFlagUntilTimeout>
 8000e6e:	2800      	cmp	r0, #0
 8000e70:	d1f2      	bne.n	8000e58 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8000e72:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d0ee      	beq.n	8000e58 <HAL_I2C_Mem_Write+0x1c>
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e80:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e82:	2700      	movs	r7, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e84:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000e86:	4641      	mov	r1, r8
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e88:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000e8a:	bf58      	it	pl
 8000e8c:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000e8e:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 8000e90:	bf5c      	itt	pl
 8000e92:	f042 0201 	orrpl.w	r2, r2, #1
 8000e96:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e9e:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000ea0:	2321      	movs	r3, #33	; 0x21
 8000ea2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000ea6:	2340      	movs	r3, #64	; 0x40
 8000ea8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8000eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000eae:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8000eb0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000eb2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000eb6:	9501      	str	r5, [sp, #4]
    hi2c->XferCount   = Size;
 8000eb8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000eba:	4b2a      	ldr	r3, [pc, #168]	; (8000f64 <HAL_I2C_Mem_Write+0x128>)
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000ebc:	9600      	str	r6, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000ebe:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000ec0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000ec2:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 8000ec4:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000ec6:	4653      	mov	r3, sl
 8000ec8:	f7ff fe18 	bl	8000afc <I2C_RequestMemoryWrite>
 8000ecc:	2800      	cmp	r0, #0
 8000ece:	d02a      	beq.n	8000f26 <HAL_I2C_Mem_Write+0xea>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ed0:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000ed2:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	d107      	bne.n	8000eea <HAL_I2C_Mem_Write+0xae>
        return HAL_ERROR;
 8000eda:	2001      	movs	r0, #1
 8000edc:	e7bd      	b.n	8000e5a <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ede:	f7ff fde6 	bl	8000aae <I2C_WaitOnTXEFlagUntilTimeout>
 8000ee2:	b120      	cbz	r0, 8000eee <HAL_I2C_Mem_Write+0xb2>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ee4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	d034      	beq.n	8000f54 <HAL_I2C_Mem_Write+0x118>
          return HAL_TIMEOUT;
 8000eea:	2003      	movs	r0, #3
 8000eec:	e7b5      	b.n	8000e5a <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000eee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000ef0:	6827      	ldr	r7, [r4, #0]
 8000ef2:	1c4b      	adds	r3, r1, #1
 8000ef4:	6263      	str	r3, [r4, #36]	; 0x24
 8000ef6:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8000ef8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000efa:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 8000efc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000efe:	1e50      	subs	r0, r2, #1
      hi2c->XferCount--;
 8000f00:	3b01      	subs	r3, #1
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000f06:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 8000f08:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000f0a:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8000f0c:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000f0e:	d50a      	bpl.n	8000f26 <HAL_I2C_Mem_Write+0xea>
 8000f10:	b148      	cbz	r0, 8000f26 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000f12:	1c8b      	adds	r3, r1, #2
 8000f14:	6263      	str	r3, [r4, #36]	; 0x24
 8000f16:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8000f18:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000f1a:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 8000f1c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8000f1e:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8000f20:	3b01      	subs	r3, #1
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8000f26:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f28:	462a      	mov	r2, r5
 8000f2a:	4631      	mov	r1, r6
 8000f2c:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d1d5      	bne.n	8000ede <HAL_I2C_Mem_Write+0xa2>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f32:	f7ff fedc 	bl	8000cee <I2C_WaitOnBTFFlagUntilTimeout>
 8000f36:	2800      	cmp	r0, #0
 8000f38:	d1d4      	bne.n	8000ee4 <HAL_I2C_Mem_Write+0xa8>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000f3a:	6822      	ldr	r2, [r4, #0]
 8000f3c:	6813      	ldr	r3, [r2, #0]
 8000f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f42:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000f44:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8000f46:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8000f4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f4e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8000f52:	e782      	b.n	8000e5a <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000f54:	6822      	ldr	r2, [r4, #0]
 8000f56:	6813      	ldr	r3, [r2, #0]
 8000f58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	e7bc      	b.n	8000eda <HAL_I2C_Mem_Write+0x9e>
 8000f60:	00100002 	.word	0x00100002
 8000f64:	ffff0000 	.word	0xffff0000

08000f68 <HAL_I2C_Mem_Read>:
{
 8000f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f6c:	4604      	mov	r4, r0
 8000f6e:	b086      	sub	sp, #24
 8000f70:	469a      	mov	sl, r3
 8000f72:	460d      	mov	r5, r1
 8000f74:	4691      	mov	r9, r2
 8000f76:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8000f78:	f7ff fbb6 	bl	80006e8 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000f7c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8000f80:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000f82:	2b20      	cmp	r3, #32
 8000f84:	d004      	beq.n	8000f90 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8000f86:	2502      	movs	r5, #2
}
 8000f88:	4628      	mov	r0, r5
 8000f8a:	b006      	add	sp, #24
 8000f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f90:	9000      	str	r0, [sp, #0]
 8000f92:	2319      	movs	r3, #25
 8000f94:	2201      	movs	r2, #1
 8000f96:	4981      	ldr	r1, [pc, #516]	; (800119c <HAL_I2C_Mem_Read+0x234>)
 8000f98:	4620      	mov	r0, r4
 8000f9a:	f7ff fd5a 	bl	8000a52 <I2C_WaitOnFlagUntilTimeout>
 8000f9e:	2800      	cmp	r0, #0
 8000fa0:	d1f1      	bne.n	8000f86 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8000fa2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d0ed      	beq.n	8000f86 <HAL_I2C_Mem_Read+0x1e>
 8000faa:	2301      	movs	r3, #1
 8000fac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000fb0:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fb2:	f04f 0800 	mov.w	r8, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000fb6:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000fb8:	4629      	mov	r1, r5
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000fba:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000fbc:	bf58      	it	pl
 8000fbe:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000fc0:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 8000fc2:	bf5c      	itt	pl
 8000fc4:	f042 0201 	orrpl.w	r2, r2, #1
 8000fc8:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fd0:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000fd2:	2322      	movs	r3, #34	; 0x22
 8000fd4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000fd8:	2340      	movs	r3, #64	; 0x40
 8000fda:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8000fde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fe0:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8000fe4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000fe6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000fea:	9601      	str	r6, [sp, #4]
    hi2c->XferCount   = Size;
 8000fec:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000fee:	4b6c      	ldr	r3, [pc, #432]	; (80011a0 <HAL_I2C_Mem_Read+0x238>)
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000ff0:	9700      	str	r7, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000ff2:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000ff4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000ff6:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 8000ff8:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000ffa:	4653      	mov	r3, sl
 8000ffc:	f7ff fdd0 	bl	8000ba0 <I2C_RequestMemoryRead>
 8001000:	4605      	mov	r5, r0
 8001002:	b130      	cbz	r0, 8001012 <HAL_I2C_Mem_Read+0xaa>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001004:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001006:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800100a:	2b04      	cmp	r3, #4
 800100c:	d13d      	bne.n	800108a <HAL_I2C_Mem_Read+0x122>
              return HAL_ERROR;
 800100e:	2501      	movs	r5, #1
 8001010:	e7ba      	b.n	8000f88 <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 8001012:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001014:	6823      	ldr	r3, [r4, #0]
 8001016:	b992      	cbnz	r2, 800103e <HAL_I2C_Mem_Read+0xd6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001018:	9002      	str	r0, [sp, #8]
 800101a:	695a      	ldr	r2, [r3, #20]
 800101c:	9202      	str	r2, [sp, #8]
 800101e:	699a      	ldr	r2, [r3, #24]
 8001020:	9202      	str	r2, [sp, #8]
 8001022:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800102a:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800102c:	2320      	movs	r3, #32
 800102e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001032:	2300      	movs	r3, #0
 8001034:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001038:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800103c:	e7a4      	b.n	8000f88 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 800103e:	2a01      	cmp	r2, #1
 8001040:	d125      	bne.n	800108e <HAL_I2C_Mem_Read+0x126>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001048:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800104a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800104c:	6823      	ldr	r3, [r4, #0]
 800104e:	9003      	str	r0, [sp, #12]
 8001050:	695a      	ldr	r2, [r3, #20]
 8001052:	9203      	str	r2, [sp, #12]
 8001054:	699a      	ldr	r2, [r3, #24]
 8001056:	9203      	str	r2, [sp, #12]
 8001058:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001060:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001062:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001064:	f8df 813c 	ldr.w	r8, [pc, #316]	; 80011a4 <HAL_I2C_Mem_Read+0x23c>
    while(hi2c->XferSize > 0U)
 8001068:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0de      	beq.n	800102c <HAL_I2C_Mem_Read+0xc4>
      if(hi2c->XferSize <= 3U)
 800106e:	2b03      	cmp	r3, #3
 8001070:	d877      	bhi.n	8001162 <HAL_I2C_Mem_Read+0x1fa>
        if(hi2c->XferSize== 1U)
 8001072:	2b01      	cmp	r3, #1
 8001074:	d127      	bne.n	80010c6 <HAL_I2C_Mem_Read+0x15e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001076:	4632      	mov	r2, r6
 8001078:	4639      	mov	r1, r7
 800107a:	4620      	mov	r0, r4
 800107c:	f7ff fe0a 	bl	8000c94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001080:	2800      	cmp	r0, #0
 8001082:	d03f      	beq.n	8001104 <HAL_I2C_Mem_Read+0x19c>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001084:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001086:	2b20      	cmp	r3, #32
 8001088:	d1c1      	bne.n	800100e <HAL_I2C_Mem_Read+0xa6>
              return HAL_TIMEOUT;
 800108a:	2503      	movs	r5, #3
 800108c:	e77c      	b.n	8000f88 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 800108e:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001090:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 8001092:	d10e      	bne.n	80010b2 <HAL_I2C_Mem_Read+0x14a>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001098:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800109a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800109c:	6823      	ldr	r3, [r4, #0]
 800109e:	9004      	str	r0, [sp, #16]
 80010a0:	695a      	ldr	r2, [r3, #20]
 80010a2:	9204      	str	r2, [sp, #16]
 80010a4:	699a      	ldr	r2, [r3, #24]
 80010a6:	9204      	str	r2, [sp, #16]
 80010a8:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010b0:	e7d6      	b.n	8001060 <HAL_I2C_Mem_Read+0xf8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80010b6:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010b8:	9005      	str	r0, [sp, #20]
 80010ba:	695a      	ldr	r2, [r3, #20]
 80010bc:	9205      	str	r2, [sp, #20]
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	9305      	str	r3, [sp, #20]
 80010c2:	9b05      	ldr	r3, [sp, #20]
 80010c4:	e7ce      	b.n	8001064 <HAL_I2C_Mem_Read+0xfc>
        else if(hi2c->XferSize == 2U)
 80010c6:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80010c8:	9600      	str	r6, [sp, #0]
 80010ca:	463b      	mov	r3, r7
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	4641      	mov	r1, r8
 80010d2:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 80010d4:	d124      	bne.n	8001120 <HAL_I2C_Mem_Read+0x1b8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80010d6:	f7ff fcbc 	bl	8000a52 <I2C_WaitOnFlagUntilTimeout>
 80010da:	2800      	cmp	r0, #0
 80010dc:	d1d5      	bne.n	800108a <HAL_I2C_Mem_Read+0x122>
 80010de:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80010e0:	6823      	ldr	r3, [r4, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010e8:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80010ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	1c51      	adds	r1, r2, #1
 80010f0:	6261      	str	r1, [r4, #36]	; 0x24
 80010f2:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 80010f4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80010f6:	3b01      	subs	r3, #1
 80010f8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80010fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80010fc:	3b01      	subs	r3, #1
 80010fe:	b29b      	uxth	r3, r3
 8001100:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001102:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001104:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	6262      	str	r2, [r4, #36]	; 0x24
 800110a:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800110c:	6912      	ldr	r2, [r2, #16]
 800110e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001110:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001112:	3b01      	subs	r3, #1
 8001114:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001116:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001118:	3b01      	subs	r3, #1
 800111a:	b29b      	uxth	r3, r3
 800111c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800111e:	e7a3      	b.n	8001068 <HAL_I2C_Mem_Read+0x100>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001120:	f7ff fc97 	bl	8000a52 <I2C_WaitOnFlagUntilTimeout>
 8001124:	4602      	mov	r2, r0
 8001126:	2800      	cmp	r0, #0
 8001128:	d1af      	bne.n	800108a <HAL_I2C_Mem_Read+0x122>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800112a:	6821      	ldr	r1, [r4, #0]
 800112c:	680b      	ldr	r3, [r1, #0]
 800112e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001132:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001134:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001136:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001138:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800113a:	1c59      	adds	r1, r3, #1
 800113c:	6261      	str	r1, [r4, #36]	; 0x24
 800113e:	6821      	ldr	r1, [r4, #0]
 8001140:	6909      	ldr	r1, [r1, #16]
 8001142:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 8001144:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001146:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8001148:	3b01      	subs	r3, #1
 800114a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800114c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800114e:	4641      	mov	r1, r8
          hi2c->XferCount--;
 8001150:	3b01      	subs	r3, #1
 8001152:	b29b      	uxth	r3, r3
 8001154:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001156:	463b      	mov	r3, r7
 8001158:	f7ff fc7b 	bl	8000a52 <I2C_WaitOnFlagUntilTimeout>
 800115c:	2800      	cmp	r0, #0
 800115e:	d0bf      	beq.n	80010e0 <HAL_I2C_Mem_Read+0x178>
 8001160:	e793      	b.n	800108a <HAL_I2C_Mem_Read+0x122>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001162:	4632      	mov	r2, r6
 8001164:	4639      	mov	r1, r7
 8001166:	4620      	mov	r0, r4
 8001168:	f7ff fd94 	bl	8000c94 <I2C_WaitOnRXNEFlagUntilTimeout>
 800116c:	2800      	cmp	r0, #0
 800116e:	d189      	bne.n	8001084 <HAL_I2C_Mem_Read+0x11c>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001172:	1c5a      	adds	r2, r3, #1
 8001174:	6262      	str	r2, [r4, #36]	; 0x24
 8001176:	6822      	ldr	r2, [r4, #0]
 8001178:	6912      	ldr	r2, [r2, #16]
 800117a:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 800117c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800117e:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8001180:	3b01      	subs	r3, #1
 8001182:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001184:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001186:	3b01      	subs	r3, #1
 8001188:	b29b      	uxth	r3, r3
 800118a:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800118c:	6953      	ldr	r3, [r2, #20]
 800118e:	075b      	lsls	r3, r3, #29
 8001190:	f57f af6a 	bpl.w	8001068 <HAL_I2C_Mem_Read+0x100>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001196:	1c59      	adds	r1, r3, #1
 8001198:	6261      	str	r1, [r4, #36]	; 0x24
 800119a:	e7b7      	b.n	800110c <HAL_I2C_Mem_Read+0x1a4>
 800119c:	00100002 	.word	0x00100002
 80011a0:	ffff0000 	.word	0xffff0000
 80011a4:	00010004 	.word	0x00010004

080011a8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a8:	6803      	ldr	r3, [r0, #0]
{
 80011aa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ae:	07db      	lsls	r3, r3, #31
{
 80011b0:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b2:	d410      	bmi.n	80011d6 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011b4:	682b      	ldr	r3, [r5, #0]
 80011b6:	079f      	lsls	r7, r3, #30
 80011b8:	d45e      	bmi.n	8001278 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ba:	682b      	ldr	r3, [r5, #0]
 80011bc:	0719      	lsls	r1, r3, #28
 80011be:	f100 8095 	bmi.w	80012ec <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011c2:	682b      	ldr	r3, [r5, #0]
 80011c4:	075a      	lsls	r2, r3, #29
 80011c6:	f100 80bf 	bmi.w	8001348 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011ca:	69ea      	ldr	r2, [r5, #28]
 80011cc:	2a00      	cmp	r2, #0
 80011ce:	f040 812d 	bne.w	800142c <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80011d2:	2000      	movs	r0, #0
 80011d4:	e014      	b.n	8001200 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011d6:	4c90      	ldr	r4, [pc, #576]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 80011d8:	6863      	ldr	r3, [r4, #4]
 80011da:	f003 030c 	and.w	r3, r3, #12
 80011de:	2b04      	cmp	r3, #4
 80011e0:	d007      	beq.n	80011f2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011e2:	6863      	ldr	r3, [r4, #4]
 80011e4:	f003 030c 	and.w	r3, r3, #12
 80011e8:	2b08      	cmp	r3, #8
 80011ea:	d10c      	bne.n	8001206 <HAL_RCC_OscConfig+0x5e>
 80011ec:	6863      	ldr	r3, [r4, #4]
 80011ee:	03de      	lsls	r6, r3, #15
 80011f0:	d509      	bpl.n	8001206 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f2:	6823      	ldr	r3, [r4, #0]
 80011f4:	039c      	lsls	r4, r3, #14
 80011f6:	d5dd      	bpl.n	80011b4 <HAL_RCC_OscConfig+0xc>
 80011f8:	686b      	ldr	r3, [r5, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1da      	bne.n	80011b4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80011fe:	2001      	movs	r0, #1
}
 8001200:	b002      	add	sp, #8
 8001202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001206:	686b      	ldr	r3, [r5, #4]
 8001208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800120c:	d110      	bne.n	8001230 <HAL_RCC_OscConfig+0x88>
 800120e:	6823      	ldr	r3, [r4, #0]
 8001210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001214:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001216:	f7ff fa67 	bl	80006e8 <HAL_GetTick>
 800121a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121c:	6823      	ldr	r3, [r4, #0]
 800121e:	0398      	lsls	r0, r3, #14
 8001220:	d4c8      	bmi.n	80011b4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001222:	f7ff fa61 	bl	80006e8 <HAL_GetTick>
 8001226:	1b80      	subs	r0, r0, r6
 8001228:	2864      	cmp	r0, #100	; 0x64
 800122a:	d9f7      	bls.n	800121c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 800122c:	2003      	movs	r0, #3
 800122e:	e7e7      	b.n	8001200 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001230:	b99b      	cbnz	r3, 800125a <HAL_RCC_OscConfig+0xb2>
 8001232:	6823      	ldr	r3, [r4, #0]
 8001234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001238:	6023      	str	r3, [r4, #0]
 800123a:	6823      	ldr	r3, [r4, #0]
 800123c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001240:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001242:	f7ff fa51 	bl	80006e8 <HAL_GetTick>
 8001246:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001248:	6823      	ldr	r3, [r4, #0]
 800124a:	0399      	lsls	r1, r3, #14
 800124c:	d5b2      	bpl.n	80011b4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800124e:	f7ff fa4b 	bl	80006e8 <HAL_GetTick>
 8001252:	1b80      	subs	r0, r0, r6
 8001254:	2864      	cmp	r0, #100	; 0x64
 8001256:	d9f7      	bls.n	8001248 <HAL_RCC_OscConfig+0xa0>
 8001258:	e7e8      	b.n	800122c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800125e:	6823      	ldr	r3, [r4, #0]
 8001260:	d103      	bne.n	800126a <HAL_RCC_OscConfig+0xc2>
 8001262:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001266:	6023      	str	r3, [r4, #0]
 8001268:	e7d1      	b.n	800120e <HAL_RCC_OscConfig+0x66>
 800126a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126e:	6023      	str	r3, [r4, #0]
 8001270:	6823      	ldr	r3, [r4, #0]
 8001272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001276:	e7cd      	b.n	8001214 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001278:	4c67      	ldr	r4, [pc, #412]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 800127a:	6863      	ldr	r3, [r4, #4]
 800127c:	f013 0f0c 	tst.w	r3, #12
 8001280:	d007      	beq.n	8001292 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001282:	6863      	ldr	r3, [r4, #4]
 8001284:	f003 030c 	and.w	r3, r3, #12
 8001288:	2b08      	cmp	r3, #8
 800128a:	d110      	bne.n	80012ae <HAL_RCC_OscConfig+0x106>
 800128c:	6863      	ldr	r3, [r4, #4]
 800128e:	03da      	lsls	r2, r3, #15
 8001290:	d40d      	bmi.n	80012ae <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001292:	6823      	ldr	r3, [r4, #0]
 8001294:	079b      	lsls	r3, r3, #30
 8001296:	d502      	bpl.n	800129e <HAL_RCC_OscConfig+0xf6>
 8001298:	692b      	ldr	r3, [r5, #16]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d1af      	bne.n	80011fe <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129e:	6823      	ldr	r3, [r4, #0]
 80012a0:	696a      	ldr	r2, [r5, #20]
 80012a2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80012a6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80012aa:	6023      	str	r3, [r4, #0]
 80012ac:	e785      	b.n	80011ba <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012ae:	692a      	ldr	r2, [r5, #16]
 80012b0:	4b5a      	ldr	r3, [pc, #360]	; (800141c <HAL_RCC_OscConfig+0x274>)
 80012b2:	b16a      	cbz	r2, 80012d0 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80012b4:	2201      	movs	r2, #1
 80012b6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012b8:	f7ff fa16 	bl	80006e8 <HAL_GetTick>
 80012bc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012be:	6823      	ldr	r3, [r4, #0]
 80012c0:	079f      	lsls	r7, r3, #30
 80012c2:	d4ec      	bmi.n	800129e <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012c4:	f7ff fa10 	bl	80006e8 <HAL_GetTick>
 80012c8:	1b80      	subs	r0, r0, r6
 80012ca:	2802      	cmp	r0, #2
 80012cc:	d9f7      	bls.n	80012be <HAL_RCC_OscConfig+0x116>
 80012ce:	e7ad      	b.n	800122c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80012d0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012d2:	f7ff fa09 	bl	80006e8 <HAL_GetTick>
 80012d6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d8:	6823      	ldr	r3, [r4, #0]
 80012da:	0798      	lsls	r0, r3, #30
 80012dc:	f57f af6d 	bpl.w	80011ba <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e0:	f7ff fa02 	bl	80006e8 <HAL_GetTick>
 80012e4:	1b80      	subs	r0, r0, r6
 80012e6:	2802      	cmp	r0, #2
 80012e8:	d9f6      	bls.n	80012d8 <HAL_RCC_OscConfig+0x130>
 80012ea:	e79f      	b.n	800122c <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ec:	69aa      	ldr	r2, [r5, #24]
 80012ee:	4c4a      	ldr	r4, [pc, #296]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 80012f0:	4b4b      	ldr	r3, [pc, #300]	; (8001420 <HAL_RCC_OscConfig+0x278>)
 80012f2:	b1da      	cbz	r2, 800132c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80012f4:	2201      	movs	r2, #1
 80012f6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80012f8:	f7ff f9f6 	bl	80006e8 <HAL_GetTick>
 80012fc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001300:	079b      	lsls	r3, r3, #30
 8001302:	d50d      	bpl.n	8001320 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001304:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001308:	4b46      	ldr	r3, [pc, #280]	; (8001424 <HAL_RCC_OscConfig+0x27c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001310:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001312:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001314:	9b01      	ldr	r3, [sp, #4]
 8001316:	1e5a      	subs	r2, r3, #1
 8001318:	9201      	str	r2, [sp, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f9      	bne.n	8001312 <HAL_RCC_OscConfig+0x16a>
 800131e:	e750      	b.n	80011c2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001320:	f7ff f9e2 	bl	80006e8 <HAL_GetTick>
 8001324:	1b80      	subs	r0, r0, r6
 8001326:	2802      	cmp	r0, #2
 8001328:	d9e9      	bls.n	80012fe <HAL_RCC_OscConfig+0x156>
 800132a:	e77f      	b.n	800122c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 800132c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800132e:	f7ff f9db 	bl	80006e8 <HAL_GetTick>
 8001332:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001334:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001336:	079f      	lsls	r7, r3, #30
 8001338:	f57f af43 	bpl.w	80011c2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800133c:	f7ff f9d4 	bl	80006e8 <HAL_GetTick>
 8001340:	1b80      	subs	r0, r0, r6
 8001342:	2802      	cmp	r0, #2
 8001344:	d9f6      	bls.n	8001334 <HAL_RCC_OscConfig+0x18c>
 8001346:	e771      	b.n	800122c <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001348:	4c33      	ldr	r4, [pc, #204]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 800134a:	69e3      	ldr	r3, [r4, #28]
 800134c:	00d8      	lsls	r0, r3, #3
 800134e:	d424      	bmi.n	800139a <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001350:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	69e3      	ldr	r3, [r4, #28]
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001358:	61e3      	str	r3, [r4, #28]
 800135a:	69e3      	ldr	r3, [r4, #28]
 800135c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001364:	4e30      	ldr	r6, [pc, #192]	; (8001428 <HAL_RCC_OscConfig+0x280>)
 8001366:	6833      	ldr	r3, [r6, #0]
 8001368:	05d9      	lsls	r1, r3, #23
 800136a:	d518      	bpl.n	800139e <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800136c:	68eb      	ldr	r3, [r5, #12]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d126      	bne.n	80013c0 <HAL_RCC_OscConfig+0x218>
 8001372:	6a23      	ldr	r3, [r4, #32]
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800137a:	f7ff f9b5 	bl	80006e8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800137e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001382:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001384:	6a23      	ldr	r3, [r4, #32]
 8001386:	079b      	lsls	r3, r3, #30
 8001388:	d53f      	bpl.n	800140a <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800138a:	2f00      	cmp	r7, #0
 800138c:	f43f af1d 	beq.w	80011ca <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001390:	69e3      	ldr	r3, [r4, #28]
 8001392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001396:	61e3      	str	r3, [r4, #28]
 8001398:	e717      	b.n	80011ca <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800139a:	2700      	movs	r7, #0
 800139c:	e7e2      	b.n	8001364 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800139e:	6833      	ldr	r3, [r6, #0]
 80013a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80013a6:	f7ff f99f 	bl	80006e8 <HAL_GetTick>
 80013aa:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ac:	6833      	ldr	r3, [r6, #0]
 80013ae:	05da      	lsls	r2, r3, #23
 80013b0:	d4dc      	bmi.n	800136c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b2:	f7ff f999 	bl	80006e8 <HAL_GetTick>
 80013b6:	eba0 0008 	sub.w	r0, r0, r8
 80013ba:	2864      	cmp	r0, #100	; 0x64
 80013bc:	d9f6      	bls.n	80013ac <HAL_RCC_OscConfig+0x204>
 80013be:	e735      	b.n	800122c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c0:	b9ab      	cbnz	r3, 80013ee <HAL_RCC_OscConfig+0x246>
 80013c2:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c8:	f023 0301 	bic.w	r3, r3, #1
 80013cc:	6223      	str	r3, [r4, #32]
 80013ce:	6a23      	ldr	r3, [r4, #32]
 80013d0:	f023 0304 	bic.w	r3, r3, #4
 80013d4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80013d6:	f7ff f987 	bl	80006e8 <HAL_GetTick>
 80013da:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013dc:	6a23      	ldr	r3, [r4, #32]
 80013de:	0798      	lsls	r0, r3, #30
 80013e0:	d5d3      	bpl.n	800138a <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e2:	f7ff f981 	bl	80006e8 <HAL_GetTick>
 80013e6:	1b80      	subs	r0, r0, r6
 80013e8:	4540      	cmp	r0, r8
 80013ea:	d9f7      	bls.n	80013dc <HAL_RCC_OscConfig+0x234>
 80013ec:	e71e      	b.n	800122c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ee:	2b05      	cmp	r3, #5
 80013f0:	6a23      	ldr	r3, [r4, #32]
 80013f2:	d103      	bne.n	80013fc <HAL_RCC_OscConfig+0x254>
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	6223      	str	r3, [r4, #32]
 80013fa:	e7ba      	b.n	8001372 <HAL_RCC_OscConfig+0x1ca>
 80013fc:	f023 0301 	bic.w	r3, r3, #1
 8001400:	6223      	str	r3, [r4, #32]
 8001402:	6a23      	ldr	r3, [r4, #32]
 8001404:	f023 0304 	bic.w	r3, r3, #4
 8001408:	e7b6      	b.n	8001378 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800140a:	f7ff f96d 	bl	80006e8 <HAL_GetTick>
 800140e:	eba0 0008 	sub.w	r0, r0, r8
 8001412:	42b0      	cmp	r0, r6
 8001414:	d9b6      	bls.n	8001384 <HAL_RCC_OscConfig+0x1dc>
 8001416:	e709      	b.n	800122c <HAL_RCC_OscConfig+0x84>
 8001418:	40021000 	.word	0x40021000
 800141c:	42420000 	.word	0x42420000
 8001420:	42420480 	.word	0x42420480
 8001424:	20000008 	.word	0x20000008
 8001428:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800142c:	4c22      	ldr	r4, [pc, #136]	; (80014b8 <HAL_RCC_OscConfig+0x310>)
 800142e:	6863      	ldr	r3, [r4, #4]
 8001430:	f003 030c 	and.w	r3, r3, #12
 8001434:	2b08      	cmp	r3, #8
 8001436:	f43f aee2 	beq.w	80011fe <HAL_RCC_OscConfig+0x56>
 800143a:	2300      	movs	r3, #0
 800143c:	4e1f      	ldr	r6, [pc, #124]	; (80014bc <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800143e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001440:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001442:	d12b      	bne.n	800149c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001444:	f7ff f950 	bl	80006e8 <HAL_GetTick>
 8001448:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800144a:	6823      	ldr	r3, [r4, #0]
 800144c:	0199      	lsls	r1, r3, #6
 800144e:	d41f      	bmi.n	8001490 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001450:	6a2b      	ldr	r3, [r5, #32]
 8001452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001456:	d105      	bne.n	8001464 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001458:	6862      	ldr	r2, [r4, #4]
 800145a:	68a9      	ldr	r1, [r5, #8]
 800145c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001460:	430a      	orrs	r2, r1
 8001462:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001464:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001466:	6862      	ldr	r2, [r4, #4]
 8001468:	430b      	orrs	r3, r1
 800146a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800146e:	4313      	orrs	r3, r2
 8001470:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001472:	2301      	movs	r3, #1
 8001474:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001476:	f7ff f937 	bl	80006e8 <HAL_GetTick>
 800147a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800147c:	6823      	ldr	r3, [r4, #0]
 800147e:	019a      	lsls	r2, r3, #6
 8001480:	f53f aea7 	bmi.w	80011d2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001484:	f7ff f930 	bl	80006e8 <HAL_GetTick>
 8001488:	1b40      	subs	r0, r0, r5
 800148a:	2802      	cmp	r0, #2
 800148c:	d9f6      	bls.n	800147c <HAL_RCC_OscConfig+0x2d4>
 800148e:	e6cd      	b.n	800122c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001490:	f7ff f92a 	bl	80006e8 <HAL_GetTick>
 8001494:	1bc0      	subs	r0, r0, r7
 8001496:	2802      	cmp	r0, #2
 8001498:	d9d7      	bls.n	800144a <HAL_RCC_OscConfig+0x2a2>
 800149a:	e6c7      	b.n	800122c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 800149c:	f7ff f924 	bl	80006e8 <HAL_GetTick>
 80014a0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a2:	6823      	ldr	r3, [r4, #0]
 80014a4:	019b      	lsls	r3, r3, #6
 80014a6:	f57f ae94 	bpl.w	80011d2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014aa:	f7ff f91d 	bl	80006e8 <HAL_GetTick>
 80014ae:	1b40      	subs	r0, r0, r5
 80014b0:	2802      	cmp	r0, #2
 80014b2:	d9f6      	bls.n	80014a2 <HAL_RCC_OscConfig+0x2fa>
 80014b4:	e6ba      	b.n	800122c <HAL_RCC_OscConfig+0x84>
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000
 80014bc:	42420060 	.word	0x42420060

080014c0 <HAL_RCC_GetSysClockFreq>:
{
 80014c0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80014c4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014c6:	ac02      	add	r4, sp, #8
 80014c8:	f103 0510 	add.w	r5, r3, #16
 80014cc:	4622      	mov	r2, r4
 80014ce:	6818      	ldr	r0, [r3, #0]
 80014d0:	6859      	ldr	r1, [r3, #4]
 80014d2:	3308      	adds	r3, #8
 80014d4:	c203      	stmia	r2!, {r0, r1}
 80014d6:	42ab      	cmp	r3, r5
 80014d8:	4614      	mov	r4, r2
 80014da:	d1f7      	bne.n	80014cc <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014dc:	2301      	movs	r3, #1
 80014de:	f88d 3004 	strb.w	r3, [sp, #4]
 80014e2:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80014e4:	4911      	ldr	r1, [pc, #68]	; (800152c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014e6:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80014ea:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80014ec:	f003 020c 	and.w	r2, r3, #12
 80014f0:	2a08      	cmp	r2, #8
 80014f2:	d117      	bne.n	8001524 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014f4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80014f8:	a806      	add	r0, sp, #24
 80014fa:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014fc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014fe:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001502:	d50c      	bpl.n	800151e <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001504:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001506:	480a      	ldr	r0, [pc, #40]	; (8001530 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001508:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800150c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800150e:	aa06      	add	r2, sp, #24
 8001510:	4413      	add	r3, r2
 8001512:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001516:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800151a:	b007      	add	sp, #28
 800151c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <HAL_RCC_GetSysClockFreq+0x74>)
 8001520:	4350      	muls	r0, r2
 8001522:	e7fa      	b.n	800151a <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001526:	e7f8      	b.n	800151a <HAL_RCC_GetSysClockFreq+0x5a>
 8001528:	08003184 	.word	0x08003184
 800152c:	40021000 	.word	0x40021000
 8001530:	007a1200 	.word	0x007a1200
 8001534:	003d0900 	.word	0x003d0900

08001538 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001538:	4a54      	ldr	r2, [pc, #336]	; (800168c <HAL_RCC_ClockConfig+0x154>)
{
 800153a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800153e:	6813      	ldr	r3, [r2, #0]
{
 8001540:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	428b      	cmp	r3, r1
{
 8001548:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800154a:	d32a      	bcc.n	80015a2 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800154c:	6829      	ldr	r1, [r5, #0]
 800154e:	078c      	lsls	r4, r1, #30
 8001550:	d434      	bmi.n	80015bc <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001552:	07ca      	lsls	r2, r1, #31
 8001554:	d447      	bmi.n	80015e6 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001556:	4a4d      	ldr	r2, [pc, #308]	; (800168c <HAL_RCC_ClockConfig+0x154>)
 8001558:	6813      	ldr	r3, [r2, #0]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	429e      	cmp	r6, r3
 8001560:	f0c0 8082 	bcc.w	8001668 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001564:	682a      	ldr	r2, [r5, #0]
 8001566:	4c4a      	ldr	r4, [pc, #296]	; (8001690 <HAL_RCC_ClockConfig+0x158>)
 8001568:	f012 0f04 	tst.w	r2, #4
 800156c:	f040 8087 	bne.w	800167e <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001570:	0713      	lsls	r3, r2, #28
 8001572:	d506      	bpl.n	8001582 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001574:	6863      	ldr	r3, [r4, #4]
 8001576:	692a      	ldr	r2, [r5, #16]
 8001578:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800157c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001580:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001582:	f7ff ff9d 	bl	80014c0 <HAL_RCC_GetSysClockFreq>
 8001586:	6863      	ldr	r3, [r4, #4]
 8001588:	4a42      	ldr	r2, [pc, #264]	; (8001694 <HAL_RCC_ClockConfig+0x15c>)
 800158a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800158e:	5cd3      	ldrb	r3, [r2, r3]
 8001590:	40d8      	lsrs	r0, r3
 8001592:	4b41      	ldr	r3, [pc, #260]	; (8001698 <HAL_RCC_ClockConfig+0x160>)
 8001594:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001596:	2000      	movs	r0, #0
 8001598:	f7ff f864 	bl	8000664 <HAL_InitTick>
  return HAL_OK;
 800159c:	2000      	movs	r0, #0
}
 800159e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a2:	6813      	ldr	r3, [r2, #0]
 80015a4:	f023 0307 	bic.w	r3, r3, #7
 80015a8:	430b      	orrs	r3, r1
 80015aa:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015ac:	6813      	ldr	r3, [r2, #0]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	4299      	cmp	r1, r3
 80015b4:	d0ca      	beq.n	800154c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80015b6:	2001      	movs	r0, #1
 80015b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015bc:	4b34      	ldr	r3, [pc, #208]	; (8001690 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015be:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015c2:	bf1e      	ittt	ne
 80015c4:	685a      	ldrne	r2, [r3, #4]
 80015c6:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80015ca:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015cc:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015ce:	bf42      	ittt	mi
 80015d0:	685a      	ldrmi	r2, [r3, #4]
 80015d2:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80015d6:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	68a8      	ldr	r0, [r5, #8]
 80015dc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80015e0:	4302      	orrs	r2, r0
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	e7b5      	b.n	8001552 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e6:	686a      	ldr	r2, [r5, #4]
 80015e8:	4c29      	ldr	r4, [pc, #164]	; (8001690 <HAL_RCC_ClockConfig+0x158>)
 80015ea:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ec:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ee:	d11c      	bne.n	800162a <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f4:	d0df      	beq.n	80015b6 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015f6:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015fc:	f023 0303 	bic.w	r3, r3, #3
 8001600:	4313      	orrs	r3, r2
 8001602:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001604:	f7ff f870 	bl	80006e8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001608:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800160a:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800160c:	2b01      	cmp	r3, #1
 800160e:	d114      	bne.n	800163a <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001610:	6863      	ldr	r3, [r4, #4]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	2b04      	cmp	r3, #4
 8001618:	d09d      	beq.n	8001556 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800161a:	f7ff f865 	bl	80006e8 <HAL_GetTick>
 800161e:	1bc0      	subs	r0, r0, r7
 8001620:	4540      	cmp	r0, r8
 8001622:	d9f5      	bls.n	8001610 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8001624:	2003      	movs	r0, #3
 8001626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800162a:	2a02      	cmp	r2, #2
 800162c:	d102      	bne.n	8001634 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001632:	e7df      	b.n	80015f4 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001634:	f013 0f02 	tst.w	r3, #2
 8001638:	e7dc      	b.n	80015f4 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800163a:	2b02      	cmp	r3, #2
 800163c:	d10f      	bne.n	800165e <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800163e:	6863      	ldr	r3, [r4, #4]
 8001640:	f003 030c 	and.w	r3, r3, #12
 8001644:	2b08      	cmp	r3, #8
 8001646:	d086      	beq.n	8001556 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001648:	f7ff f84e 	bl	80006e8 <HAL_GetTick>
 800164c:	1bc0      	subs	r0, r0, r7
 800164e:	4540      	cmp	r0, r8
 8001650:	d9f5      	bls.n	800163e <HAL_RCC_ClockConfig+0x106>
 8001652:	e7e7      	b.n	8001624 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001654:	f7ff f848 	bl	80006e8 <HAL_GetTick>
 8001658:	1bc0      	subs	r0, r0, r7
 800165a:	4540      	cmp	r0, r8
 800165c:	d8e2      	bhi.n	8001624 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800165e:	6863      	ldr	r3, [r4, #4]
 8001660:	f013 0f0c 	tst.w	r3, #12
 8001664:	d1f6      	bne.n	8001654 <HAL_RCC_ClockConfig+0x11c>
 8001666:	e776      	b.n	8001556 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001668:	6813      	ldr	r3, [r2, #0]
 800166a:	f023 0307 	bic.w	r3, r3, #7
 800166e:	4333      	orrs	r3, r6
 8001670:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001672:	6813      	ldr	r3, [r2, #0]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	429e      	cmp	r6, r3
 800167a:	d19c      	bne.n	80015b6 <HAL_RCC_ClockConfig+0x7e>
 800167c:	e772      	b.n	8001564 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800167e:	6863      	ldr	r3, [r4, #4]
 8001680:	68e9      	ldr	r1, [r5, #12]
 8001682:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001686:	430b      	orrs	r3, r1
 8001688:	6063      	str	r3, [r4, #4]
 800168a:	e771      	b.n	8001570 <HAL_RCC_ClockConfig+0x38>
 800168c:	40022000 	.word	0x40022000
 8001690:	40021000 	.word	0x40021000
 8001694:	080032a7 	.word	0x080032a7
 8001698:	20000008 	.word	0x20000008

0800169c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <HAL_RCC_GetPCLK1Freq+0x14>)
 800169e:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80016a6:	5cd3      	ldrb	r3, [r2, r3]
 80016a8:	4a03      	ldr	r2, [pc, #12]	; (80016b8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80016aa:	6810      	ldr	r0, [r2, #0]
}    
 80016ac:	40d8      	lsrs	r0, r3
 80016ae:	4770      	bx	lr
 80016b0:	40021000 	.word	0x40021000
 80016b4:	080032b7 	.word	0x080032b7
 80016b8:	20000008 	.word	0x20000008

080016bc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80016be:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80016c6:	5cd3      	ldrb	r3, [r2, r3]
 80016c8:	4a03      	ldr	r2, [pc, #12]	; (80016d8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80016ca:	6810      	ldr	r0, [r2, #0]
} 
 80016cc:	40d8      	lsrs	r0, r3
 80016ce:	4770      	bx	lr
 80016d0:	40021000 	.word	0x40021000
 80016d4:	080032b7 	.word	0x080032b7
 80016d8:	20000008 	.word	0x20000008

080016dc <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80016dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016e0:	6805      	ldr	r5, [r0, #0]
 80016e2:	68c2      	ldr	r2, [r0, #12]
 80016e4:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016e6:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016ec:	4313      	orrs	r3, r2
 80016ee:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016f0:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 80016f2:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016f4:	430b      	orrs	r3, r1
 80016f6:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80016f8:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80016fc:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001700:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8001702:	4313      	orrs	r3, r2
 8001704:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001706:	696b      	ldr	r3, [r5, #20]
 8001708:	6982      	ldr	r2, [r0, #24]
 800170a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800170e:	4313      	orrs	r3, r2
 8001710:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001712:	4b40      	ldr	r3, [pc, #256]	; (8001814 <UART_SetConfig+0x138>)
{
 8001714:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8001716:	429d      	cmp	r5, r3
 8001718:	f04f 0419 	mov.w	r4, #25
 800171c:	d146      	bne.n	80017ac <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800171e:	f7ff ffcd 	bl	80016bc <HAL_RCC_GetPCLK2Freq>
 8001722:	fb04 f300 	mul.w	r3, r4, r0
 8001726:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800172a:	f04f 0864 	mov.w	r8, #100	; 0x64
 800172e:	00b6      	lsls	r6, r6, #2
 8001730:	fbb3 f3f6 	udiv	r3, r3, r6
 8001734:	fbb3 f3f8 	udiv	r3, r3, r8
 8001738:	011e      	lsls	r6, r3, #4
 800173a:	f7ff ffbf 	bl	80016bc <HAL_RCC_GetPCLK2Freq>
 800173e:	4360      	muls	r0, r4
 8001740:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	fbb0 f7f3 	udiv	r7, r0, r3
 800174a:	f7ff ffb7 	bl	80016bc <HAL_RCC_GetPCLK2Freq>
 800174e:	4360      	muls	r0, r4
 8001750:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	fbb0 f3f3 	udiv	r3, r0, r3
 800175a:	fbb3 f3f8 	udiv	r3, r3, r8
 800175e:	fb08 7313 	mls	r3, r8, r3, r7
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	3332      	adds	r3, #50	; 0x32
 8001766:	fbb3 f3f8 	udiv	r3, r3, r8
 800176a:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800176e:	f7ff ffa5 	bl	80016bc <HAL_RCC_GetPCLK2Freq>
 8001772:	4360      	muls	r0, r4
 8001774:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001778:	0092      	lsls	r2, r2, #2
 800177a:	fbb0 faf2 	udiv	sl, r0, r2
 800177e:	f7ff ff9d 	bl	80016bc <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001782:	4360      	muls	r0, r4
 8001784:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	fbb0 f3f3 	udiv	r3, r0, r3
 800178e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001792:	fb08 a313 	mls	r3, r8, r3, sl
 8001796:	011b      	lsls	r3, r3, #4
 8001798:	3332      	adds	r3, #50	; 0x32
 800179a:	fbb3 f3f8 	udiv	r3, r3, r8
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	433b      	orrs	r3, r7
 80017a4:	4433      	add	r3, r6
 80017a6:	60ab      	str	r3, [r5, #8]
 80017a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017ac:	f7ff ff76 	bl	800169c <HAL_RCC_GetPCLK1Freq>
 80017b0:	fb04 f300 	mul.w	r3, r4, r0
 80017b4:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80017b8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80017bc:	00b6      	lsls	r6, r6, #2
 80017be:	fbb3 f3f6 	udiv	r3, r3, r6
 80017c2:	fbb3 f3f8 	udiv	r3, r3, r8
 80017c6:	011e      	lsls	r6, r3, #4
 80017c8:	f7ff ff68 	bl	800169c <HAL_RCC_GetPCLK1Freq>
 80017cc:	4360      	muls	r0, r4
 80017ce:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	fbb0 f7f3 	udiv	r7, r0, r3
 80017d8:	f7ff ff60 	bl	800169c <HAL_RCC_GetPCLK1Freq>
 80017dc:	4360      	muls	r0, r4
 80017de:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e8:	fbb3 f3f8 	udiv	r3, r3, r8
 80017ec:	fb08 7313 	mls	r3, r8, r3, r7
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	3332      	adds	r3, #50	; 0x32
 80017f4:	fbb3 f3f8 	udiv	r3, r3, r8
 80017f8:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80017fc:	f7ff ff4e 	bl	800169c <HAL_RCC_GetPCLK1Freq>
 8001800:	4360      	muls	r0, r4
 8001802:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001806:	0092      	lsls	r2, r2, #2
 8001808:	fbb0 faf2 	udiv	sl, r0, r2
 800180c:	f7ff ff46 	bl	800169c <HAL_RCC_GetPCLK1Freq>
 8001810:	e7b7      	b.n	8001782 <UART_SetConfig+0xa6>
 8001812:	bf00      	nop
 8001814:	40013800 	.word	0x40013800

08001818 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800181a:	4604      	mov	r4, r0
 800181c:	460e      	mov	r6, r1
 800181e:	4617      	mov	r7, r2
 8001820:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001822:	6821      	ldr	r1, [r4, #0]
 8001824:	680b      	ldr	r3, [r1, #0]
 8001826:	ea36 0303 	bics.w	r3, r6, r3
 800182a:	d101      	bne.n	8001830 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800182c:	2000      	movs	r0, #0
}
 800182e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001830:	1c6b      	adds	r3, r5, #1
 8001832:	d0f7      	beq.n	8001824 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001834:	b995      	cbnz	r5, 800185c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001836:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001838:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001840:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001842:	695a      	ldr	r2, [r3, #20]
 8001844:	f022 0201 	bic.w	r2, r2, #1
 8001848:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800184a:	2320      	movs	r3, #32
 800184c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001850:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001854:	2300      	movs	r3, #0
 8001856:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800185a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800185c:	f7fe ff44 	bl	80006e8 <HAL_GetTick>
 8001860:	1bc0      	subs	r0, r0, r7
 8001862:	4285      	cmp	r5, r0
 8001864:	d2dd      	bcs.n	8001822 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001866:	e7e6      	b.n	8001836 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001868 <HAL_UART_Init>:
{
 8001868:	b510      	push	{r4, lr}
  if(huart == NULL)
 800186a:	4604      	mov	r4, r0
 800186c:	b340      	cbz	r0, 80018c0 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800186e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001872:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001876:	b91b      	cbnz	r3, 8001880 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001878:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800187c:	f000 ffb6 	bl	80027ec <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001880:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001882:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001884:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001888:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800188a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800188c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001890:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001892:	f7ff ff23 	bl	80016dc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001896:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001898:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018a2:	695a      	ldr	r2, [r3, #20]
 80018a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018a8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018b0:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 80018b2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018b4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80018b6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80018ba:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80018be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80018c0:	2001      	movs	r0, #1
}
 80018c2:	bd10      	pop	{r4, pc}

080018c4 <HAL_UART_Transmit>:
{
 80018c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018c8:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80018ca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80018ce:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 80018d0:	2b20      	cmp	r3, #32
{
 80018d2:	460d      	mov	r5, r1
 80018d4:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80018d6:	d14e      	bne.n	8001976 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 80018d8:	2900      	cmp	r1, #0
 80018da:	d049      	beq.n	8001970 <HAL_UART_Transmit+0xac>
 80018dc:	2a00      	cmp	r2, #0
 80018de:	d047      	beq.n	8001970 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80018e0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d046      	beq.n	8001976 <HAL_UART_Transmit+0xb2>
 80018e8:	2301      	movs	r3, #1
 80018ea:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018f2:	2321      	movs	r3, #33	; 0x21
 80018f4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80018f8:	f7fe fef6 	bl	80006e8 <HAL_GetTick>
 80018fc:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80018fe:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001902:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001906:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001908:	b29b      	uxth	r3, r3
 800190a:	b96b      	cbnz	r3, 8001928 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800190c:	463b      	mov	r3, r7
 800190e:	4632      	mov	r2, r6
 8001910:	2140      	movs	r1, #64	; 0x40
 8001912:	4620      	mov	r0, r4
 8001914:	f7ff ff80 	bl	8001818 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001918:	b9a8      	cbnz	r0, 8001946 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 800191a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800191c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8001920:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001928:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800192a:	4632      	mov	r2, r6
      huart->TxXferCount--;
 800192c:	3b01      	subs	r3, #1
 800192e:	b29b      	uxth	r3, r3
 8001930:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001932:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001934:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800193a:	4620      	mov	r0, r4
 800193c:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800193e:	d10e      	bne.n	800195e <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001940:	f7ff ff6a 	bl	8001818 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001944:	b110      	cbz	r0, 800194c <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8001946:	2003      	movs	r0, #3
 8001948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800194c:	882b      	ldrh	r3, [r5, #0]
 800194e:	6822      	ldr	r2, [r4, #0]
 8001950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001954:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001956:	6923      	ldr	r3, [r4, #16]
 8001958:	b943      	cbnz	r3, 800196c <HAL_UART_Transmit+0xa8>
          pData +=2U;
 800195a:	3502      	adds	r5, #2
 800195c:	e7d3      	b.n	8001906 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800195e:	f7ff ff5b 	bl	8001818 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001962:	2800      	cmp	r0, #0
 8001964:	d1ef      	bne.n	8001946 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001966:	6823      	ldr	r3, [r4, #0]
 8001968:	782a      	ldrb	r2, [r5, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	3501      	adds	r5, #1
 800196e:	e7ca      	b.n	8001906 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001970:	2001      	movs	r0, #1
 8001972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001976:	2002      	movs	r0, #2
}
 8001978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800197c <Max30102_WriteReg>:
}MAX30102_STATE;

MAX30102_STATE StateMachine;

MAX30102_STATUS Max30102_WriteReg(uint8_t uch_addr, uint8_t uch_data)
{
 800197c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if(HAL_I2C_Mem_Write(i2c_max30102, MAX30102_ADDRESS, uch_addr, 1, &uch_data, 1, I2C_TIMEOUT) == HAL_OK)
 800197e:	2301      	movs	r3, #1
{
 8001980:	aa06      	add	r2, sp, #24
 8001982:	f802 1d01 	strb.w	r1, [r2, #-1]!
	if(HAL_I2C_Mem_Write(i2c_max30102, MAX30102_ADDRESS, uch_addr, 1, &uch_data, 1, I2C_TIMEOUT) == HAL_OK)
 8001986:	e88d 000c 	stmia.w	sp, {r2, r3}
 800198a:	4602      	mov	r2, r0
 800198c:	4805      	ldr	r0, [pc, #20]	; (80019a4 <Max30102_WriteReg+0x28>)
 800198e:	9302      	str	r3, [sp, #8]
 8001990:	21ae      	movs	r1, #174	; 0xae
 8001992:	6800      	ldr	r0, [r0, #0]
 8001994:	f7ff fa52 	bl	8000e3c <HAL_I2C_Mem_Write>
		return MAX30102_OK;
	return MAX30102_ERROR;
}
 8001998:	fab0 f080 	clz	r0, r0
 800199c:	0940      	lsrs	r0, r0, #5
 800199e:	b007      	add	sp, #28
 80019a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80019a4:	20001800 	.word	0x20001800

080019a8 <Max30102_ReadReg>:

MAX30102_STATUS Max30102_ReadReg(uint8_t uch_addr, uint8_t *puch_data)
{
 80019a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if(HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, uch_addr, 1, puch_data, 1, I2C_TIMEOUT) == HAL_OK)
 80019aa:	2301      	movs	r3, #1
 80019ac:	e88d 000a 	stmia.w	sp, {r1, r3}
 80019b0:	4602      	mov	r2, r0
 80019b2:	4806      	ldr	r0, [pc, #24]	; (80019cc <Max30102_ReadReg+0x24>)
 80019b4:	9302      	str	r3, [sp, #8]
 80019b6:	21ae      	movs	r1, #174	; 0xae
 80019b8:	6800      	ldr	r0, [r0, #0]
 80019ba:	f7ff fad5 	bl	8000f68 <HAL_I2C_Mem_Read>
		return MAX30102_OK;
	return MAX30102_ERROR;
}
 80019be:	fab0 f080 	clz	r0, r0
 80019c2:	0940      	lsrs	r0, r0, #5
 80019c4:	b005      	add	sp, #20
 80019c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80019ca:	bf00      	nop
 80019cc:	20001800 	.word	0x20001800

080019d0 <Max30102_WriteRegisterBit>:

MAX30102_STATUS Max30102_WriteRegisterBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 80019d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80019d2:	460e      	mov	r6, r1
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(Register, &tmp))
 80019d4:	f10d 0107 	add.w	r1, sp, #7
{
 80019d8:	4605      	mov	r5, r0
 80019da:	4614      	mov	r4, r2
	if(MAX30102_OK != Max30102_ReadReg(Register, &tmp))
 80019dc:	f7ff ffe4 	bl	80019a8 <Max30102_ReadReg>
 80019e0:	2801      	cmp	r0, #1
 80019e2:	d113      	bne.n	8001a0c <Max30102_WriteRegisterBit+0x3c>
		return MAX30102_ERROR;
	tmp &= ~(1<<Bit);
 80019e4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80019e8:	40b0      	lsls	r0, r6
	tmp |= (Value&0x01)<<Bit;
 80019ea:	f004 0401 	and.w	r4, r4, #1
	tmp &= ~(1<<Bit);
 80019ee:	ea21 0100 	bic.w	r1, r1, r0
	tmp |= (Value&0x01)<<Bit;
 80019f2:	40b4      	lsls	r4, r6
 80019f4:	4321      	orrs	r1, r4
 80019f6:	b2c9      	uxtb	r1, r1
	if(MAX30102_OK != Max30102_WriteReg(Register, tmp))
 80019f8:	4628      	mov	r0, r5
	tmp |= (Value&0x01)<<Bit;
 80019fa:	f88d 1007 	strb.w	r1, [sp, #7]
	if(MAX30102_OK != Max30102_WriteReg(Register, tmp))
 80019fe:	f7ff ffbd 	bl	800197c <Max30102_WriteReg>
		return MAX30102_ERROR;
 8001a02:	1e43      	subs	r3, r0, #1
 8001a04:	4258      	negs	r0, r3
 8001a06:	4158      	adcs	r0, r3
		return MAX30102_ERROR;

	return MAX30102_OK;
}
 8001a08:	b002      	add	sp, #8
 8001a0a:	bd70      	pop	{r4, r5, r6, pc}
		return MAX30102_ERROR;
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	e7fb      	b.n	8001a08 <Max30102_WriteRegisterBit+0x38>

08001a10 <Max30102_ReadFifo>:

MAX30102_STATUS Max30102_ReadFifo(volatile uint32_t *pun_red_led, volatile uint32_t *pun_ir_led)
{
 8001a10:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t un_temp;
	*pun_red_led=0;
	*pun_ir_led=0;
	uint8_t ach_i2c_data[6];

	if(HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, REG_FIFO_DATA, 1, ach_i2c_data, 6, I2C_TIMEOUT) != HAL_OK)
 8001a12:	2306      	movs	r3, #6
	*pun_red_led=0;
 8001a14:	2600      	movs	r6, #0
	if(HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, REG_FIFO_DATA, 1, ach_i2c_data, 6, I2C_TIMEOUT) != HAL_OK)
 8001a16:	2701      	movs	r7, #1
{
 8001a18:	b087      	sub	sp, #28
	*pun_red_led=0;
 8001a1a:	6006      	str	r6, [r0, #0]
{
 8001a1c:	4605      	mov	r5, r0
	*pun_ir_led=0;
 8001a1e:	600e      	str	r6, [r1, #0]
	if(HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, REG_FIFO_DATA, 1, ach_i2c_data, 6, I2C_TIMEOUT) != HAL_OK)
 8001a20:	481d      	ldr	r0, [pc, #116]	; (8001a98 <Max30102_ReadFifo+0x88>)
 8001a22:	9301      	str	r3, [sp, #4]
 8001a24:	ab04      	add	r3, sp, #16
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	9702      	str	r7, [sp, #8]
{
 8001a2a:	460c      	mov	r4, r1
	if(HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, REG_FIFO_DATA, 1, ach_i2c_data, 6, I2C_TIMEOUT) != HAL_OK)
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	2207      	movs	r2, #7
 8001a30:	21ae      	movs	r1, #174	; 0xae
 8001a32:	6800      	ldr	r0, [r0, #0]
 8001a34:	f7ff fa98 	bl	8000f68 <HAL_I2C_Mem_Read>
 8001a38:	bb60      	cbnz	r0, 8001a94 <Max30102_ReadFifo+0x84>
	{
		return MAX30102_ERROR;
	}
	un_temp=(unsigned char) ach_i2c_data[0];
	un_temp<<=16;
	*pun_red_led+=un_temp;
 8001a3a:	682b      	ldr	r3, [r5, #0]
	un_temp=(unsigned char) ach_i2c_data[0];
 8001a3c:	f89d 2010 	ldrb.w	r2, [sp, #16]
	un_temp=(unsigned char) ach_i2c_data[5];
	*pun_ir_led+=un_temp;
	*pun_red_led&=0x03FFFF;  //Mask MSB [23:18]
	*pun_ir_led&=0x03FFFF;  //Mask MSB [23:18]

	return MAX30102_OK;
 8001a40:	4638      	mov	r0, r7
	*pun_red_led+=un_temp;
 8001a42:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8001a46:	602b      	str	r3, [r5, #0]
	*pun_red_led+=un_temp;
 8001a48:	682b      	ldr	r3, [r5, #0]
	un_temp=(unsigned char) ach_i2c_data[1];
 8001a4a:	f89d 2011 	ldrb.w	r2, [sp, #17]
	*pun_red_led+=un_temp;
 8001a4e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001a52:	602b      	str	r3, [r5, #0]
	*pun_red_led+=un_temp;
 8001a54:	682a      	ldr	r2, [r5, #0]
	un_temp=(unsigned char) ach_i2c_data[2];
 8001a56:	f89d 3012 	ldrb.w	r3, [sp, #18]
	*pun_red_led+=un_temp;
 8001a5a:	4413      	add	r3, r2
 8001a5c:	602b      	str	r3, [r5, #0]
	*pun_ir_led+=un_temp;
 8001a5e:	6823      	ldr	r3, [r4, #0]
	un_temp=(unsigned char) ach_i2c_data[3];
 8001a60:	f89d 2013 	ldrb.w	r2, [sp, #19]
	*pun_ir_led+=un_temp;
 8001a64:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8001a68:	6023      	str	r3, [r4, #0]
	*pun_ir_led+=un_temp;
 8001a6a:	6823      	ldr	r3, [r4, #0]
	un_temp=(unsigned char) ach_i2c_data[4];
 8001a6c:	f89d 2014 	ldrb.w	r2, [sp, #20]
	*pun_ir_led+=un_temp;
 8001a70:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001a74:	6023      	str	r3, [r4, #0]
	*pun_ir_led+=un_temp;
 8001a76:	6822      	ldr	r2, [r4, #0]
	un_temp=(unsigned char) ach_i2c_data[5];
 8001a78:	f89d 3015 	ldrb.w	r3, [sp, #21]
	*pun_ir_led+=un_temp;
 8001a7c:	4413      	add	r3, r2
 8001a7e:	6023      	str	r3, [r4, #0]
	*pun_red_led&=0x03FFFF;  //Mask MSB [23:18]
 8001a80:	682b      	ldr	r3, [r5, #0]
 8001a82:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001a86:	602b      	str	r3, [r5, #0]
	*pun_ir_led&=0x03FFFF;  //Mask MSB [23:18]
 8001a88:	6823      	ldr	r3, [r4, #0]
 8001a8a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001a8e:	6023      	str	r3, [r4, #0]
}
 8001a90:	b007      	add	sp, #28
 8001a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return MAX30102_ERROR;
 8001a94:	4630      	mov	r0, r6
 8001a96:	e7fb      	b.n	8001a90 <Max30102_ReadFifo+0x80>
 8001a98:	20001800 	.word	0x20001800

08001a9c <Max30102_SetIntAlmostFullEnabled>:
//
//	Interrupts
//
MAX30102_STATUS Max30102_SetIntAlmostFullEnabled(uint8_t Enable)
{
	return Max30102_WriteRegisterBit(REG_INTR_ENABLE_1, INT_A_FULL_BIT, Enable);
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	2107      	movs	r1, #7
 8001aa0:	2002      	movs	r0, #2
 8001aa2:	f7ff bf95 	b.w	80019d0 <Max30102_WriteRegisterBit>

08001aa6 <Max30102_SetIntFifoDataReadyEnabled>:
}

MAX30102_STATUS Max30102_SetIntFifoDataReadyEnabled(uint8_t Enable)
{

	return Max30102_WriteRegisterBit(REG_INTR_ENABLE_1, INT_PPG_RDY_BIT, Enable);
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	2106      	movs	r1, #6
 8001aaa:	2002      	movs	r0, #2
 8001aac:	f7ff bf90 	b.w	80019d0 <Max30102_WriteRegisterBit>

08001ab0 <Max30102_ReadInterruptStatus>:

	return Max30102_WriteRegisterBit(REG_INTR_ENABLE_2, INT_DIE_TEMP_RDY_BIT, Enable);
}
#endif
MAX30102_STATUS Max30102_ReadInterruptStatus(uint8_t *Status)
{
 8001ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t tmp;
	*Status = 0;
 8001ab2:	2400      	movs	r4, #0
{
 8001ab4:	4605      	mov	r5, r0
	*Status = 0;
 8001ab6:	7004      	strb	r4, [r0, #0]

	if(MAX30102_OK != Max30102_ReadReg(REG_INTR_STATUS_1, &tmp))
 8001ab8:	f10d 0107 	add.w	r1, sp, #7
 8001abc:	4620      	mov	r0, r4
 8001abe:	f7ff ff73 	bl	80019a8 <Max30102_ReadReg>
 8001ac2:	2801      	cmp	r0, #1
		return MAX30102_ERROR;
 8001ac4:	bf11      	iteee	ne
 8001ac6:	4620      	movne	r0, r4
	*Status |= tmp & 0xE1; // 3 highest bits
 8001ac8:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
 8001acc:	782a      	ldrbeq	r2, [r5, #0]
 8001ace:	f023 031e 	biceq.w	r3, r3, #30
 8001ad2:	bf04      	itt	eq
 8001ad4:	4313      	orreq	r3, r2
 8001ad6:	702b      	strbeq	r3, [r5, #0]
	if(MAX30102_OK != Max30102_ReadReg(REG_INTR_STATUS_2, &tmp))
		return MAX30102_ERROR;
	*Status |= tmp & 0x02;
#endif
	return MAX30102_OK;
}
 8001ad8:	b003      	add	sp, #12
 8001ada:	bd30      	pop	{r4, r5, pc}

08001adc <Max30102_InterruptCallback>:

void Max30102_InterruptCallback(void)
{
 8001adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t Status;
	while(MAX30102_OK != Max30102_ReadInterruptStatus(&Status));
 8001ade:	f10d 0007 	add.w	r0, sp, #7
 8001ae2:	f7ff ffe5 	bl	8001ab0 <Max30102_ReadInterruptStatus>
 8001ae6:	2801      	cmp	r0, #1
 8001ae8:	d1f9      	bne.n	8001ade <Max30102_InterruptCallback+0x2>

	// Almost Full FIFO Interrupt handle
	if(Status & (1<<INT_A_FULL_BIT))
 8001aea:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	db05      	blt.n	8001afe <Max30102_InterruptCallback+0x22>
			CollectedSamples++;
		}
	}

	// New FIFO Data Ready Interrupt handle
	if(Status & (1<<INT_PPG_RDY_BIT))
 8001af2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001af6:	065b      	lsls	r3, r3, #25
 8001af8:	d437      	bmi.n	8001b6a <Max30102_InterruptCallback+0x8e>
	if(Status & (1<<INT_DIE_TEMP_RDY_BIT))
	{

	}
#endif
}
 8001afa:	b003      	add	sp, #12
 8001afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			while(MAX30102_OK != Max30102_ReadFifo((RedBuffer+BufferHead), (IrBuffer+BufferHead)));
 8001afe:	4d33      	ldr	r5, [pc, #204]	; (8001bcc <Max30102_InterruptCallback+0xf0>)
 8001b00:	2411      	movs	r4, #17
 8001b02:	462f      	mov	r7, r5
 8001b04:	4e32      	ldr	r6, [pc, #200]	; (8001bd0 <Max30102_InterruptCallback+0xf4>)
 8001b06:	6828      	ldr	r0, [r5, #0]
 8001b08:	4b32      	ldr	r3, [pc, #200]	; (8001bd4 <Max30102_InterruptCallback+0xf8>)
 8001b0a:	6829      	ldr	r1, [r5, #0]
 8001b0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001b10:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8001b14:	f7ff ff7c 	bl	8001a10 <Max30102_ReadFifo>
 8001b18:	2801      	cmp	r0, #1
 8001b1a:	d1f4      	bne.n	8001b06 <Max30102_InterruptCallback+0x2a>
			if(IsFingerOnScreen)
 8001b1c:	4b2e      	ldr	r3, [pc, #184]	; (8001bd8 <Max30102_InterruptCallback+0xfc>)
 8001b1e:	781a      	ldrb	r2, [r3, #0]
 8001b20:	b1da      	cbz	r2, 8001b5a <Max30102_InterruptCallback+0x7e>
				if(IrBuffer[BufferHead] < MAX30102_IR_VALUE_FINGER_OUT_SENSOR) IsFingerOnScreen = 0;
 8001b22:	682a      	ldr	r2, [r5, #0]
 8001b24:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
 8001b28:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b2c:	4291      	cmp	r1, r2
 8001b2e:	d801      	bhi.n	8001b34 <Max30102_InterruptCallback+0x58>
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
			BufferHead = (BufferHead + 1) % MAX30102_BUFFER_LENGTH;
 8001b34:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	3c01      	subs	r4, #1
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	fbb3 f2f1 	udiv	r2, r3, r1
 8001b42:	fb01 3312 	mls	r3, r1, r2, r3
			CollectedSamples++;
 8001b46:	4a25      	ldr	r2, [pc, #148]	; (8001bdc <Max30102_InterruptCallback+0x100>)
			BufferHead = (BufferHead + 1) % MAX30102_BUFFER_LENGTH;
 8001b48:	603b      	str	r3, [r7, #0]
			CollectedSamples++;
 8001b4a:	6813      	ldr	r3, [r2, #0]
		for(uint8_t i = 0; i < MAX30102_FIFO_ALMOST_FULL_SAMPLES; i++)
 8001b4c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
			CollectedSamples++;
 8001b50:	f103 0301 	add.w	r3, r3, #1
 8001b54:	6013      	str	r3, [r2, #0]
		for(uint8_t i = 0; i < MAX30102_FIFO_ALMOST_FULL_SAMPLES; i++)
 8001b56:	d1d6      	bne.n	8001b06 <Max30102_InterruptCallback+0x2a>
 8001b58:	e7cb      	b.n	8001af2 <Max30102_InterruptCallback+0x16>
				if(IrBuffer[BufferHead] > MAX30102_IR_VALUE_FINGER_ON_SENSOR) IsFingerOnScreen = 1;
 8001b5a:	682a      	ldr	r2, [r5, #0]
 8001b5c:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8001b60:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
 8001b64:	bf88      	it	hi
 8001b66:	7018      	strbhi	r0, [r3, #0]
 8001b68:	e7e4      	b.n	8001b34 <Max30102_InterruptCallback+0x58>
		while(MAX30102_OK != Max30102_ReadFifo((RedBuffer+BufferHead), (IrBuffer+BufferHead)));
 8001b6a:	4c18      	ldr	r4, [pc, #96]	; (8001bcc <Max30102_InterruptCallback+0xf0>)
 8001b6c:	4d18      	ldr	r5, [pc, #96]	; (8001bd0 <Max30102_InterruptCallback+0xf4>)
 8001b6e:	4626      	mov	r6, r4
 8001b70:	6820      	ldr	r0, [r4, #0]
 8001b72:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <Max30102_InterruptCallback+0xf8>)
 8001b74:	6821      	ldr	r1, [r4, #0]
 8001b76:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001b7a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8001b7e:	f7ff ff47 	bl	8001a10 <Max30102_ReadFifo>
 8001b82:	2801      	cmp	r0, #1
 8001b84:	d1f4      	bne.n	8001b70 <Max30102_InterruptCallback+0x94>
		if(IsFingerOnScreen)
 8001b86:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <Max30102_InterruptCallback+0xfc>)
 8001b88:	781a      	ldrb	r2, [r3, #0]
 8001b8a:	b1b2      	cbz	r2, 8001bba <Max30102_InterruptCallback+0xde>
			if(IrBuffer[BufferHead] < MAX30102_IR_VALUE_FINGER_OUT_SENSOR) IsFingerOnScreen = 0;
 8001b8c:	6822      	ldr	r2, [r4, #0]
 8001b8e:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
 8001b92:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b96:	4291      	cmp	r1, r2
 8001b98:	d801      	bhi.n	8001b9e <Max30102_InterruptCallback+0xc2>
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
		BufferHead = (BufferHead + 1) % MAX30102_BUFFER_LENGTH;
 8001b9e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001ba2:	6833      	ldr	r3, [r6, #0]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	fbb3 f2f1 	udiv	r2, r3, r1
 8001baa:	fb01 3312 	mls	r3, r1, r2, r3
		CollectedSamples++;
 8001bae:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <Max30102_InterruptCallback+0x100>)
		BufferHead = (BufferHead + 1) % MAX30102_BUFFER_LENGTH;
 8001bb0:	6033      	str	r3, [r6, #0]
		CollectedSamples++;
 8001bb2:	6813      	ldr	r3, [r2, #0]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	6013      	str	r3, [r2, #0]
}
 8001bb8:	e79f      	b.n	8001afa <Max30102_InterruptCallback+0x1e>
			if(IrBuffer[BufferHead] > MAX30102_IR_VALUE_FINGER_ON_SENSOR) IsFingerOnScreen = 1;
 8001bba:	6822      	ldr	r2, [r4, #0]
 8001bbc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8001bc0:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
 8001bc4:	bf88      	it	hi
 8001bc6:	7018      	strbhi	r0, [r3, #0]
 8001bc8:	e7e9      	b.n	8001b9e <Max30102_InterruptCallback+0xc2>
 8001bca:	bf00      	nop
 8001bcc:	20001808 	.word	0x20001808
 8001bd0:	20001810 	.word	0x20001810
 8001bd4:	20002178 	.word	0x20002178
 8001bd8:	20001805 	.word	0x20001805
 8001bdc:	200017fc 	.word	0x200017fc

08001be0 <Max30102_FifoWritePointer>:

//
//	FIFO Configuration
//
MAX30102_STATUS Max30102_FifoWritePointer(uint8_t Address)
{
 8001be0:	b508      	push	{r3, lr}
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_WR_PTR,(Address & 0x1F)))  //FIFO_WR_PTR[4:0]
 8001be2:	f000 011f 	and.w	r1, r0, #31
 8001be6:	2004      	movs	r0, #4
 8001be8:	f7ff fec8 	bl	800197c <Max30102_WriteReg>
			return MAX30102_ERROR;
	return MAX30102_OK;
}
 8001bec:	1e43      	subs	r3, r0, #1
 8001bee:	4258      	negs	r0, r3
 8001bf0:	4158      	adcs	r0, r3
 8001bf2:	bd08      	pop	{r3, pc}

08001bf4 <Max30102_FifoOverflowCounter>:

MAX30102_STATUS Max30102_FifoOverflowCounter(uint8_t Address)
{
 8001bf4:	b508      	push	{r3, lr}
	if(MAX30102_OK != Max30102_WriteReg(REG_OVF_COUNTER,(Address & 0x1F)))  //OVF_COUNTER[4:0]
 8001bf6:	f000 011f 	and.w	r1, r0, #31
 8001bfa:	2005      	movs	r0, #5
 8001bfc:	f7ff febe 	bl	800197c <Max30102_WriteReg>
			return MAX30102_ERROR;
	return MAX30102_OK;
}
 8001c00:	1e43      	subs	r3, r0, #1
 8001c02:	4258      	negs	r0, r3
 8001c04:	4158      	adcs	r0, r3
 8001c06:	bd08      	pop	{r3, pc}

08001c08 <Max30102_FifoReadPointer>:

MAX30102_STATUS Max30102_FifoReadPointer(uint8_t Address)
{
 8001c08:	b508      	push	{r3, lr}
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_RD_PTR,(Address & 0x1F)))  //FIFO_RD_PTR[4:0]
 8001c0a:	f000 011f 	and.w	r1, r0, #31
 8001c0e:	2006      	movs	r0, #6
 8001c10:	f7ff feb4 	bl	800197c <Max30102_WriteReg>
			return MAX30102_ERROR;
	return MAX30102_OK;
}
 8001c14:	1e43      	subs	r3, r0, #1
 8001c16:	4258      	negs	r0, r3
 8001c18:	4158      	adcs	r0, r3
 8001c1a:	bd08      	pop	{r3, pc}

08001c1c <Max30102_FifoSampleAveraging>:

MAX30102_STATUS Max30102_FifoSampleAveraging(uint8_t Value)
{
 8001c1c:	b513      	push	{r0, r1, r4, lr}
 8001c1e:	4604      	mov	r4, r0
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_FIFO_CONFIG, &tmp))
 8001c20:	f10d 0107 	add.w	r1, sp, #7
 8001c24:	2008      	movs	r0, #8
 8001c26:	f7ff febf 	bl	80019a8 <Max30102_ReadReg>
 8001c2a:	2801      	cmp	r0, #1
 8001c2c:	d110      	bne.n	8001c50 <Max30102_FifoSampleAveraging+0x34>
		return MAX30102_ERROR;
	tmp &= ~(0x07);
 8001c2e:	f89d 1007 	ldrb.w	r1, [sp, #7]
	tmp |= (Value&0x07)<<5;
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_CONFIG, tmp))
 8001c32:	2008      	movs	r0, #8
	tmp &= ~(0x07);
 8001c34:	f021 0107 	bic.w	r1, r1, #7
	tmp |= (Value&0x07)<<5;
 8001c38:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
 8001c3c:	b2c9      	uxtb	r1, r1
 8001c3e:	f88d 1007 	strb.w	r1, [sp, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_CONFIG, tmp))
 8001c42:	f7ff fe9b 	bl	800197c <Max30102_WriteReg>
		return MAX30102_ERROR;
 8001c46:	1e43      	subs	r3, r0, #1
 8001c48:	4258      	negs	r0, r3
 8001c4a:	4158      	adcs	r0, r3
		return MAX30102_ERROR;

	return MAX30102_OK;
}
 8001c4c:	b002      	add	sp, #8
 8001c4e:	bd10      	pop	{r4, pc}
		return MAX30102_ERROR;
 8001c50:	2000      	movs	r0, #0
 8001c52:	e7fb      	b.n	8001c4c <Max30102_FifoSampleAveraging+0x30>

08001c54 <Max30102_FifoRolloverEnable>:

MAX30102_STATUS Max30102_FifoRolloverEnable(uint8_t Enable)
{
	return Max30102_WriteRegisterBit(REG_FIFO_CONFIG, FIFO_CONF_FIFO_ROLLOVER_EN_BIT, (Enable & 0x01));
 8001c54:	f000 0201 	and.w	r2, r0, #1
 8001c58:	2104      	movs	r1, #4
 8001c5a:	2008      	movs	r0, #8
 8001c5c:	f7ff beb8 	b.w	80019d0 <Max30102_WriteRegisterBit>

08001c60 <Max30102_FifoAlmostFullValue>:
}

MAX30102_STATUS Max30102_FifoAlmostFullValue(uint8_t Value)
{
 8001c60:	b513      	push	{r0, r1, r4, lr}
 8001c62:	4604      	mov	r4, r0
	if(Value < 17) Value = 17;
	if(Value > 32) Value = 32;
	Value = 32 - Value;
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_FIFO_CONFIG, &tmp))
 8001c64:	f10d 0107 	add.w	r1, sp, #7
 8001c68:	2008      	movs	r0, #8
 8001c6a:	f7ff fe9d 	bl	80019a8 <Max30102_ReadReg>
 8001c6e:	2801      	cmp	r0, #1
 8001c70:	d117      	bne.n	8001ca2 <Max30102_FifoAlmostFullValue+0x42>
 8001c72:	2c20      	cmp	r4, #32
 8001c74:	bf28      	it	cs
 8001c76:	2420      	movcs	r4, #32
 8001c78:	2c11      	cmp	r4, #17
 8001c7a:	bf38      	it	cc
 8001c7c:	2411      	movcc	r4, #17
		return MAX30102_ERROR;
	tmp &= ~(0x0F);
 8001c7e:	f89d 1007 	ldrb.w	r1, [sp, #7]
	Value = 32 - Value;
 8001c82:	f1c4 0420 	rsb	r4, r4, #32
	tmp &= ~(0x0F);
 8001c86:	f021 010f 	bic.w	r1, r1, #15
	tmp |= (Value & 0x0F);
 8001c8a:	4321      	orrs	r1, r4
 8001c8c:	b2c9      	uxtb	r1, r1
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_CONFIG, tmp))
 8001c8e:	2008      	movs	r0, #8
	tmp |= (Value & 0x0F);
 8001c90:	f88d 1007 	strb.w	r1, [sp, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_CONFIG, tmp))
 8001c94:	f7ff fe72 	bl	800197c <Max30102_WriteReg>
		return MAX30102_ERROR;
 8001c98:	1e43      	subs	r3, r0, #1
 8001c9a:	4258      	negs	r0, r3
 8001c9c:	4158      	adcs	r0, r3
		return MAX30102_ERROR;

	return MAX30102_OK;
}
 8001c9e:	b002      	add	sp, #8
 8001ca0:	bd10      	pop	{r4, pc}
		return MAX30102_ERROR;
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	e7fb      	b.n	8001c9e <Max30102_FifoAlmostFullValue+0x3e>

08001ca6 <Max30102_Reset>:
	return Max30102_WriteRegisterBit(REG_MODE_CONFIG, MODE_SHDN_BIT, (Enable & 0x01));
}

MAX30102_STATUS Max30102_Reset(void)
{
	uint8_t tmp = 0xFF;
 8001ca6:	23ff      	movs	r3, #255	; 0xff
{
 8001ca8:	b507      	push	{r0, r1, r2, lr}
    if(MAX30102_OK != Max30102_WriteReg(REG_MODE_CONFIG,0x40))
 8001caa:	2140      	movs	r1, #64	; 0x40
 8001cac:	2009      	movs	r0, #9
	uint8_t tmp = 0xFF;
 8001cae:	f88d 3007 	strb.w	r3, [sp, #7]
    if(MAX30102_OK != Max30102_WriteReg(REG_MODE_CONFIG,0x40))
 8001cb2:	f7ff fe63 	bl	800197c <Max30102_WriteReg>
 8001cb6:	2801      	cmp	r0, #1
 8001cb8:	d003      	beq.n	8001cc2 <Max30102_Reset+0x1c>
        return MAX30102_ERROR;
 8001cba:	2000      	movs	r0, #0
    	if(MAX30102_OK != Max30102_ReadReg(REG_MODE_CONFIG, &tmp))
    		return MAX30102_ERROR;
    } while(tmp & (1<<6));

    return MAX30102_OK;
}
 8001cbc:	b003      	add	sp, #12
 8001cbe:	f85d fb04 	ldr.w	pc, [sp], #4
    	if(MAX30102_OK != Max30102_ReadReg(REG_MODE_CONFIG, &tmp))
 8001cc2:	f10d 0107 	add.w	r1, sp, #7
 8001cc6:	2009      	movs	r0, #9
 8001cc8:	f7ff fe6e 	bl	80019a8 <Max30102_ReadReg>
 8001ccc:	2801      	cmp	r0, #1
 8001cce:	d1f4      	bne.n	8001cba <Max30102_Reset+0x14>
    } while(tmp & (1<<6));
 8001cd0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001cd4:	065b      	lsls	r3, r3, #25
 8001cd6:	d4f4      	bmi.n	8001cc2 <Max30102_Reset+0x1c>
 8001cd8:	e7f0      	b.n	8001cbc <Max30102_Reset+0x16>

08001cda <Max30102_SetMode>:

MAX30102_STATUS Max30102_SetMode(uint8_t Mode)
{
 8001cda:	b513      	push	{r0, r1, r4, lr}
 8001cdc:	4604      	mov	r4, r0
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_MODE_CONFIG, &tmp))
 8001cde:	f10d 0107 	add.w	r1, sp, #7
 8001ce2:	2009      	movs	r0, #9
 8001ce4:	f7ff fe60 	bl	80019a8 <Max30102_ReadReg>
 8001ce8:	2801      	cmp	r0, #1
 8001cea:	d110      	bne.n	8001d0e <Max30102_SetMode+0x34>
		return MAX30102_ERROR;
	tmp &= ~(0x07);
 8001cec:	f89d 1007 	ldrb.w	r1, [sp, #7]
	tmp |= (Mode & 0x07);
 8001cf0:	f004 0407 	and.w	r4, r4, #7
	tmp &= ~(0x07);
 8001cf4:	f021 0107 	bic.w	r1, r1, #7
	tmp |= (Mode & 0x07);
 8001cf8:	4321      	orrs	r1, r4
	if(MAX30102_OK != Max30102_WriteReg(REG_MODE_CONFIG, tmp))
 8001cfa:	2009      	movs	r0, #9
	tmp |= (Mode & 0x07);
 8001cfc:	f88d 1007 	strb.w	r1, [sp, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_MODE_CONFIG, tmp))
 8001d00:	f7ff fe3c 	bl	800197c <Max30102_WriteReg>
		return MAX30102_ERROR;
 8001d04:	1e43      	subs	r3, r0, #1
 8001d06:	4258      	negs	r0, r3
 8001d08:	4158      	adcs	r0, r3
		return MAX30102_ERROR;

	return MAX30102_OK;
}
 8001d0a:	b002      	add	sp, #8
 8001d0c:	bd10      	pop	{r4, pc}
		return MAX30102_ERROR;
 8001d0e:	2000      	movs	r0, #0
 8001d10:	e7fb      	b.n	8001d0a <Max30102_SetMode+0x30>

08001d12 <Max30102_SpO2AdcRange>:
//
//	SpO2 Configuration
//
MAX30102_STATUS Max30102_SpO2AdcRange(uint8_t Value)
{
 8001d12:	b513      	push	{r0, r1, r4, lr}
 8001d14:	4604      	mov	r4, r0
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 8001d16:	f10d 0107 	add.w	r1, sp, #7
 8001d1a:	200a      	movs	r0, #10
 8001d1c:	f7ff fe44 	bl	80019a8 <Max30102_ReadReg>
 8001d20:	2801      	cmp	r0, #1
 8001d22:	d111      	bne.n	8001d48 <Max30102_SpO2AdcRange+0x36>
		return MAX30102_ERROR;
	tmp &= ~(0x03);
 8001d24:	f89d 3007 	ldrb.w	r3, [sp, #7]
	tmp |= ((Value & 0x03) << 5);
 8001d28:	0161      	lsls	r1, r4, #5
	tmp &= ~(0x03);
 8001d2a:	f023 0303 	bic.w	r3, r3, #3
	tmp |= ((Value & 0x03) << 5);
 8001d2e:	f001 0160 	and.w	r1, r1, #96	; 0x60
 8001d32:	4319      	orrs	r1, r3
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 8001d34:	200a      	movs	r0, #10
	tmp |= ((Value & 0x03) << 5);
 8001d36:	f88d 1007 	strb.w	r1, [sp, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 8001d3a:	f7ff fe1f 	bl	800197c <Max30102_WriteReg>
		return MAX30102_ERROR;
 8001d3e:	1e43      	subs	r3, r0, #1
 8001d40:	4258      	negs	r0, r3
 8001d42:	4158      	adcs	r0, r3
		return MAX30102_ERROR;

	return MAX30102_OK;
}
 8001d44:	b002      	add	sp, #8
 8001d46:	bd10      	pop	{r4, pc}
		return MAX30102_ERROR;
 8001d48:	2000      	movs	r0, #0
 8001d4a:	e7fb      	b.n	8001d44 <Max30102_SpO2AdcRange+0x32>

08001d4c <Max30102_SpO2SampleRate>:

MAX30102_STATUS Max30102_SpO2SampleRate(uint8_t Value)
{
 8001d4c:	b513      	push	{r0, r1, r4, lr}
 8001d4e:	4604      	mov	r4, r0
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 8001d50:	f10d 0107 	add.w	r1, sp, #7
 8001d54:	200a      	movs	r0, #10
 8001d56:	f7ff fe27 	bl	80019a8 <Max30102_ReadReg>
 8001d5a:	2801      	cmp	r0, #1
 8001d5c:	d111      	bne.n	8001d82 <Max30102_SpO2SampleRate+0x36>
		return MAX30102_ERROR;
	tmp &= ~(0x07);
 8001d5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	tmp |= ((Value & 0x07) << 2);
 8001d62:	00a1      	lsls	r1, r4, #2
	tmp &= ~(0x07);
 8001d64:	f023 0307 	bic.w	r3, r3, #7
	tmp |= ((Value & 0x07) << 2);
 8001d68:	f001 011c 	and.w	r1, r1, #28
 8001d6c:	4319      	orrs	r1, r3
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 8001d6e:	200a      	movs	r0, #10
	tmp |= ((Value & 0x07) << 2);
 8001d70:	f88d 1007 	strb.w	r1, [sp, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 8001d74:	f7ff fe02 	bl	800197c <Max30102_WriteReg>
		return MAX30102_ERROR;
 8001d78:	1e43      	subs	r3, r0, #1
 8001d7a:	4258      	negs	r0, r3
 8001d7c:	4158      	adcs	r0, r3
		return MAX30102_ERROR;

	return MAX30102_OK;
}
 8001d7e:	b002      	add	sp, #8
 8001d80:	bd10      	pop	{r4, pc}
		return MAX30102_ERROR;
 8001d82:	2000      	movs	r0, #0
 8001d84:	e7fb      	b.n	8001d7e <Max30102_SpO2SampleRate+0x32>

08001d86 <Max30102_SpO2LedPulseWidth>:

MAX30102_STATUS Max30102_SpO2LedPulseWidth(uint8_t Value)
{
 8001d86:	b513      	push	{r0, r1, r4, lr}
 8001d88:	4604      	mov	r4, r0
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 8001d8a:	f10d 0107 	add.w	r1, sp, #7
 8001d8e:	200a      	movs	r0, #10
 8001d90:	f7ff fe0a 	bl	80019a8 <Max30102_ReadReg>
 8001d94:	2801      	cmp	r0, #1
 8001d96:	d110      	bne.n	8001dba <Max30102_SpO2LedPulseWidth+0x34>
		return MAX30102_ERROR;
	tmp &= ~(0x03);
 8001d98:	f89d 1007 	ldrb.w	r1, [sp, #7]
	tmp |= (Value & 0x03);
 8001d9c:	f004 0403 	and.w	r4, r4, #3
	tmp &= ~(0x03);
 8001da0:	f021 0103 	bic.w	r1, r1, #3
	tmp |= (Value & 0x03);
 8001da4:	4321      	orrs	r1, r4
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 8001da6:	200a      	movs	r0, #10
	tmp |= (Value & 0x03);
 8001da8:	f88d 1007 	strb.w	r1, [sp, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 8001dac:	f7ff fde6 	bl	800197c <Max30102_WriteReg>
		return MAX30102_ERROR;
 8001db0:	1e43      	subs	r3, r0, #1
 8001db2:	4258      	negs	r0, r3
 8001db4:	4158      	adcs	r0, r3
		return MAX30102_ERROR;

	return MAX30102_OK;
}
 8001db6:	b002      	add	sp, #8
 8001db8:	bd10      	pop	{r4, pc}
		return MAX30102_ERROR;
 8001dba:	2000      	movs	r0, #0
 8001dbc:	e7fb      	b.n	8001db6 <Max30102_SpO2LedPulseWidth+0x30>

08001dbe <Max30102_Led1PulseAmplitude>:
//
//	LEDs Pulse Amplitute Configuration
//	LED Current = Value * 0.2 mA
//
MAX30102_STATUS Max30102_Led1PulseAmplitude(uint8_t Value)
{
 8001dbe:	b508      	push	{r3, lr}
	if(MAX30102_OK != Max30102_WriteReg(REG_LED1_PA, Value))
 8001dc0:	4601      	mov	r1, r0
 8001dc2:	200c      	movs	r0, #12
 8001dc4:	f7ff fdda 	bl	800197c <Max30102_WriteReg>
		return MAX30102_ERROR;
	return MAX30102_OK;
}
 8001dc8:	1e43      	subs	r3, r0, #1
 8001dca:	4258      	negs	r0, r3
 8001dcc:	4158      	adcs	r0, r3
 8001dce:	bd08      	pop	{r3, pc}

08001dd0 <Max30102_Led2PulseAmplitude>:

MAX30102_STATUS Max30102_Led2PulseAmplitude(uint8_t Value)
{
 8001dd0:	b508      	push	{r3, lr}
	if(MAX30102_OK != Max30102_WriteReg(REG_LED2_PA, Value))
 8001dd2:	4601      	mov	r1, r0
 8001dd4:	200d      	movs	r0, #13
 8001dd6:	f7ff fdd1 	bl	800197c <Max30102_WriteReg>
		return MAX30102_ERROR;
	return MAX30102_OK;
}
 8001dda:	1e43      	subs	r3, r0, #1
 8001ddc:	4258      	negs	r0, r3
 8001dde:	4158      	adcs	r0, r3
 8001de0:	bd08      	pop	{r3, pc}
	...

08001de4 <Max30102_GetHeartRate>:
}

int32_t Max30102_GetHeartRate(void)
{
	return HeartRate;
}
 8001de4:	4b01      	ldr	r3, [pc, #4]	; (8001dec <Max30102_GetHeartRate+0x8>)
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	2000180c 	.word	0x2000180c

08001df0 <Max30102_GetSpO2Value>:

int32_t Max30102_GetSpO2Value(void)
{
	return Sp02Value;
}
 8001df0:	4b01      	ldr	r3, [pc, #4]	; (8001df8 <Max30102_GetSpO2Value+0x8>)
 8001df2:	6818      	ldr	r0, [r3, #0]
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	20002adc 	.word	0x20002adc

08001dfc <Max30102_Task>:

void Max30102_Task(void)
{
 8001dfc:	b530      	push	{r4, r5, lr}
	switch(StateMachine)
 8001dfe:	4c2f      	ldr	r4, [pc, #188]	; (8001ebc <Max30102_Task+0xc0>)
{
 8001e00:	b085      	sub	sp, #20
	switch(StateMachine)
 8001e02:	7823      	ldrb	r3, [r4, #0]
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d819      	bhi.n	8001e3c <Max30102_Task+0x40>
 8001e08:	e8df f003 	tbb	[pc, r3]
 8001e0c:	4f2c1a02 	.word	0x4f2c1a02
	{
		case MAX30102_STATE_BEGIN:
			HeartRate = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	4a2b      	ldr	r2, [pc, #172]	; (8001ec0 <Max30102_Task+0xc4>)
 8001e14:	6013      	str	r3, [r2, #0]
			Sp02Value = 0;
 8001e16:	4a2b      	ldr	r2, [pc, #172]	; (8001ec4 <Max30102_Task+0xc8>)
 8001e18:	6013      	str	r3, [r2, #0]
			if(IsFingerOnScreen)
 8001e1a:	4a2b      	ldr	r2, [pc, #172]	; (8001ec8 <Max30102_Task+0xcc>)
 8001e1c:	7812      	ldrb	r2, [r2, #0]
 8001e1e:	b16a      	cbz	r2, 8001e3c <Max30102_Task+0x40>
			{
				CollectedSamples = 0;
 8001e20:	4a2a      	ldr	r2, [pc, #168]	; (8001ecc <Max30102_Task+0xd0>)
				BufferTail = BufferHead;
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_HIGH);
 8001e22:	2024      	movs	r0, #36	; 0x24
				CollectedSamples = 0;
 8001e24:	6013      	str	r3, [r2, #0]
				BufferTail = BufferHead;
 8001e26:	4b2a      	ldr	r3, [pc, #168]	; (8001ed0 <Max30102_Task+0xd4>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	4b2a      	ldr	r3, [pc, #168]	; (8001ed4 <Max30102_Task+0xd8>)
 8001e2c:	601a      	str	r2, [r3, #0]
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_HIGH);
 8001e2e:	f7ff ffc6 	bl	8001dbe <Max30102_Led1PulseAmplitude>
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_HIGH);
 8001e32:	2024      	movs	r0, #36	; 0x24
 8001e34:	f7ff ffcc 	bl	8001dd0 <Max30102_Led2PulseAmplitude>
				StateMachine = MAX30102_STATE_CALIBRATE;
 8001e38:	2301      	movs	r3, #1
			if(IsFingerOnScreen)
			{
				maxim_heart_rate_and_oxygen_saturation(IrBuffer, RedBuffer, MAX30102_BUFFER_LENGTH-MAX30102_SAMPLES_PER_SECOND, BufferTail, &Sp02Value, &Sp02IsValid, &HeartRate, &IsHrValid);
				BufferTail = (BufferTail + MAX30102_SAMPLES_PER_SECOND) % MAX30102_BUFFER_LENGTH;
				CollectedSamples = 0;
				StateMachine = MAX30102_STATE_COLLECT_NEXT_PORTION;
 8001e3a:	7023      	strb	r3, [r4, #0]
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
				StateMachine = MAX30102_STATE_BEGIN;
			}
			break;
	}
}
 8001e3c:	b005      	add	sp, #20
 8001e3e:	bd30      	pop	{r4, r5, pc}
				if(IsFingerOnScreen)
 8001e40:	4b21      	ldr	r3, [pc, #132]	; (8001ec8 <Max30102_Task+0xcc>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	b133      	cbz	r3, 8001e54 <Max30102_Task+0x58>
					if(CollectedSamples > (MAX30102_BUFFER_LENGTH-MAX30102_SAMPLES_PER_SECOND))
 8001e46:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <Max30102_Task+0xd0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e4e:	d9f5      	bls.n	8001e3c <Max30102_Task+0x40>
						StateMachine = MAX30102_STATE_CALCULATE_HR;
 8001e50:	2302      	movs	r3, #2
 8001e52:	e7f2      	b.n	8001e3a <Max30102_Task+0x3e>
					Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 8001e54:	2000      	movs	r0, #0
 8001e56:	f7ff ffb2 	bl	8001dbe <Max30102_Led1PulseAmplitude>
					Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f7ff ffb8 	bl	8001dd0 <Max30102_Led2PulseAmplitude>
					StateMachine = MAX30102_STATE_BEGIN;
 8001e60:	2300      	movs	r3, #0
 8001e62:	e7ea      	b.n	8001e3a <Max30102_Task+0x3e>
			if(IsFingerOnScreen)
 8001e64:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <Max30102_Task+0xcc>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0f3      	beq.n	8001e54 <Max30102_Task+0x58>
				maxim_heart_rate_and_oxygen_saturation(IrBuffer, RedBuffer, MAX30102_BUFFER_LENGTH-MAX30102_SAMPLES_PER_SECOND, BufferTail, &Sp02Value, &Sp02IsValid, &HeartRate, &IsHrValid);
 8001e6c:	4a1a      	ldr	r2, [pc, #104]	; (8001ed8 <Max30102_Task+0xdc>)
 8001e6e:	4d19      	ldr	r5, [pc, #100]	; (8001ed4 <Max30102_Task+0xd8>)
 8001e70:	9203      	str	r2, [sp, #12]
 8001e72:	4a13      	ldr	r2, [pc, #76]	; (8001ec0 <Max30102_Task+0xc4>)
 8001e74:	682b      	ldr	r3, [r5, #0]
 8001e76:	9202      	str	r2, [sp, #8]
 8001e78:	4a18      	ldr	r2, [pc, #96]	; (8001edc <Max30102_Task+0xe0>)
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	9201      	str	r2, [sp, #4]
 8001e7e:	4a11      	ldr	r2, [pc, #68]	; (8001ec4 <Max30102_Task+0xc8>)
 8001e80:	4917      	ldr	r1, [pc, #92]	; (8001ee0 <Max30102_Task+0xe4>)
 8001e82:	9200      	str	r2, [sp, #0]
 8001e84:	4817      	ldr	r0, [pc, #92]	; (8001ee4 <Max30102_Task+0xe8>)
 8001e86:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001e8a:	f000 f947 	bl	800211c <maxim_heart_rate_and_oxygen_saturation>
				BufferTail = (BufferTail + MAX30102_SAMPLES_PER_SECOND) % MAX30102_BUFFER_LENGTH;
 8001e8e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001e92:	682b      	ldr	r3, [r5, #0]
 8001e94:	3364      	adds	r3, #100	; 0x64
 8001e96:	fbb3 f2f1 	udiv	r2, r3, r1
 8001e9a:	fb01 3312 	mls	r3, r1, r2, r3
				CollectedSamples = 0;
 8001e9e:	2200      	movs	r2, #0
				BufferTail = (BufferTail + MAX30102_SAMPLES_PER_SECOND) % MAX30102_BUFFER_LENGTH;
 8001ea0:	602b      	str	r3, [r5, #0]
				CollectedSamples = 0;
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <Max30102_Task+0xd0>)
 8001ea4:	601a      	str	r2, [r3, #0]
				StateMachine = MAX30102_STATE_COLLECT_NEXT_PORTION;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e7c7      	b.n	8001e3a <Max30102_Task+0x3e>
			if(IsFingerOnScreen)
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <Max30102_Task+0xcc>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0d0      	beq.n	8001e54 <Max30102_Task+0x58>
				if(CollectedSamples > MAX30102_SAMPLES_PER_SECOND)
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <Max30102_Task+0xd0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b64      	cmp	r3, #100	; 0x64
 8001eb8:	e7c9      	b.n	8001e4e <Max30102_Task+0x52>
 8001eba:	bf00      	nop
 8001ebc:	20001804 	.word	0x20001804
 8001ec0:	2000180c 	.word	0x2000180c
 8001ec4:	20002adc 	.word	0x20002adc
 8001ec8:	20001805 	.word	0x20001805
 8001ecc:	200017fc 	.word	0x200017fc
 8001ed0:	20001808 	.word	0x20001808
 8001ed4:	20002174 	.word	0x20002174
 8001ed8:	20002ad8 	.word	0x20002ad8
 8001edc:	20002170 	.word	0x20002170
 8001ee0:	20002178 	.word	0x20002178
 8001ee4:	20001810 	.word	0x20001810

08001ee8 <Max30102_Init>:
//	Initialization
//
MAX30102_STATUS Max30102_Init(I2C_HandleTypeDef *i2c)
{
	uint8_t uch_dummy;
	i2c_max30102 = i2c;
 8001ee8:	4b2b      	ldr	r3, [pc, #172]	; (8001f98 <Max30102_Init+0xb0>)
{
 8001eea:	b507      	push	{r0, r1, r2, lr}
	i2c_max30102 = i2c;
 8001eec:	6018      	str	r0, [r3, #0]
	if(MAX30102_OK != Max30102_Reset()) //resets the MAX30102
 8001eee:	f7ff feda 	bl	8001ca6 <Max30102_Reset>
 8001ef2:	2801      	cmp	r0, #1
 8001ef4:	d003      	beq.n	8001efe <Max30102_Init+0x16>
		return MAX30102_ERROR;
 8001ef6:	2000      	movs	r0, #0
		return MAX30102_ERROR;
//	if(MAX30102_OK != Max30102_WriteReg(REG_PILOT_PA,0x7f))   // Choose value for ~ 25mA for Pilot LED
//		return MAX30102_ERROR;
	StateMachine = MAX30102_STATE_BEGIN;
	return MAX30102_OK;
}
 8001ef8:	b003      	add	sp, #12
 8001efa:	f85d fb04 	ldr.w	pc, [sp], #4
	if(MAX30102_OK != Max30102_ReadReg(0,&uch_dummy))
 8001efe:	f10d 0107 	add.w	r1, sp, #7
 8001f02:	2000      	movs	r0, #0
 8001f04:	f7ff fd50 	bl	80019a8 <Max30102_ReadReg>
 8001f08:	2801      	cmp	r0, #1
 8001f0a:	d1f4      	bne.n	8001ef6 <Max30102_Init+0xe>
	if(MAX30102_OK != Max30102_FifoWritePointer(0x00))
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f7ff fe67 	bl	8001be0 <Max30102_FifoWritePointer>
 8001f12:	2801      	cmp	r0, #1
 8001f14:	d1ef      	bne.n	8001ef6 <Max30102_Init+0xe>
	if(MAX30102_OK != Max30102_FifoOverflowCounter(0x00))
 8001f16:	2000      	movs	r0, #0
 8001f18:	f7ff fe6c 	bl	8001bf4 <Max30102_FifoOverflowCounter>
 8001f1c:	2801      	cmp	r0, #1
 8001f1e:	d1ea      	bne.n	8001ef6 <Max30102_Init+0xe>
	if(MAX30102_OK != Max30102_FifoReadPointer(0x00))
 8001f20:	2000      	movs	r0, #0
 8001f22:	f7ff fe71 	bl	8001c08 <Max30102_FifoReadPointer>
 8001f26:	2801      	cmp	r0, #1
 8001f28:	d1e5      	bne.n	8001ef6 <Max30102_Init+0xe>
	if(MAX30102_OK != Max30102_FifoSampleAveraging(FIFO_SMP_AVE_1))
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	f7ff fe76 	bl	8001c1c <Max30102_FifoSampleAveraging>
 8001f30:	2801      	cmp	r0, #1
 8001f32:	d1e0      	bne.n	8001ef6 <Max30102_Init+0xe>
	if(MAX30102_OK != Max30102_FifoRolloverEnable(0))
 8001f34:	2000      	movs	r0, #0
 8001f36:	f7ff fe8d 	bl	8001c54 <Max30102_FifoRolloverEnable>
 8001f3a:	2801      	cmp	r0, #1
 8001f3c:	d1db      	bne.n	8001ef6 <Max30102_Init+0xe>
	if(MAX30102_OK != Max30102_FifoAlmostFullValue(MAX30102_FIFO_ALMOST_FULL_SAMPLES))
 8001f3e:	2011      	movs	r0, #17
 8001f40:	f7ff fe8e 	bl	8001c60 <Max30102_FifoAlmostFullValue>
 8001f44:	2801      	cmp	r0, #1
 8001f46:	d1d6      	bne.n	8001ef6 <Max30102_Init+0xe>
	if(MAX30102_OK != Max30102_SetMode(MODE_SPO2_MODE))
 8001f48:	2003      	movs	r0, #3
 8001f4a:	f7ff fec6 	bl	8001cda <Max30102_SetMode>
 8001f4e:	2801      	cmp	r0, #1
 8001f50:	d1d1      	bne.n	8001ef6 <Max30102_Init+0xe>
	if(MAX30102_OK != Max30102_SpO2AdcRange(SPO2_ADC_RGE_4096))
 8001f52:	f7ff fede 	bl	8001d12 <Max30102_SpO2AdcRange>
 8001f56:	2801      	cmp	r0, #1
 8001f58:	d1cd      	bne.n	8001ef6 <Max30102_Init+0xe>
	if(MAX30102_OK != Max30102_SpO2SampleRate(SPO2_SAMPLE_RATE))
 8001f5a:	f7ff fef7 	bl	8001d4c <Max30102_SpO2SampleRate>
 8001f5e:	2801      	cmp	r0, #1
 8001f60:	d1c9      	bne.n	8001ef6 <Max30102_Init+0xe>
	if(MAX30102_OK != Max30102_SpO2LedPulseWidth(SPO2_PULSE_WIDTH_411))
 8001f62:	2003      	movs	r0, #3
 8001f64:	f7ff ff0f 	bl	8001d86 <Max30102_SpO2LedPulseWidth>
 8001f68:	2801      	cmp	r0, #1
 8001f6a:	d1c4      	bne.n	8001ef6 <Max30102_Init+0xe>
	if(MAX30102_OK != Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW))
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f7ff ff26 	bl	8001dbe <Max30102_Led1PulseAmplitude>
 8001f72:	2801      	cmp	r0, #1
 8001f74:	d1bf      	bne.n	8001ef6 <Max30102_Init+0xe>
	if(MAX30102_OK != Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW))
 8001f76:	f7ff ff2b 	bl	8001dd0 <Max30102_Led2PulseAmplitude>
 8001f7a:	2801      	cmp	r0, #1
 8001f7c:	d1bb      	bne.n	8001ef6 <Max30102_Init+0xe>
	if(MAX30102_OK != Max30102_SetIntAlmostFullEnabled(1))
 8001f7e:	f7ff fd8d 	bl	8001a9c <Max30102_SetIntAlmostFullEnabled>
 8001f82:	2801      	cmp	r0, #1
 8001f84:	d1b7      	bne.n	8001ef6 <Max30102_Init+0xe>
	if(MAX30102_OK != Max30102_SetIntFifoDataReadyEnabled(1))
 8001f86:	f7ff fd8e 	bl	8001aa6 <Max30102_SetIntFifoDataReadyEnabled>
 8001f8a:	2801      	cmp	r0, #1
 8001f8c:	d1b3      	bne.n	8001ef6 <Max30102_Init+0xe>
	StateMachine = MAX30102_STATE_BEGIN;
 8001f8e:	2200      	movs	r2, #0
 8001f90:	4b02      	ldr	r3, [pc, #8]	; (8001f9c <Max30102_Init+0xb4>)
 8001f92:	701a      	strb	r2, [r3, #0]
	return MAX30102_OK;
 8001f94:	e7b0      	b.n	8001ef8 <Max30102_Init+0x10>
 8001f96:	bf00      	nop
 8001f98:	20001800 	.word	0x20001800
 8001f9c:	20001804 	.word	0x20001804

08001fa0 <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 8001fa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int32_t i = 1, n_width;
    *pn_npks = 0;
 8001fa4:	2400      	movs	r4, #0
{
 8001fa6:	4681      	mov	r9, r0
    int32_t i = 1, n_width;
 8001fa8:	2501      	movs	r5, #1
    *pn_npks = 0;
 8001faa:	600c      	str	r4, [r1, #0]
    
    while (i < n_size-1){
 8001fac:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 8001fb0:	4565      	cmp	r5, ip
 8001fb2:	db01      	blt.n	8001fb8 <maxim_peaks_above_min_height+0x18>
                i += n_width;
        }
        else
            i++;
    }
}
 8001fb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){            // find left edge of potential peaks
 8001fb8:	9c07      	ldr	r4, [sp, #28]
 8001fba:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
 8001fbe:	00af      	lsls	r7, r5, #2
 8001fc0:	42a6      	cmp	r6, r4
 8001fc2:	f105 0401 	add.w	r4, r5, #1
 8001fc6:	dd22      	ble.n	800200e <maxim_peaks_above_min_height+0x6e>
 8001fc8:	4417      	add	r7, r2
 8001fca:	f857 7c04 	ldr.w	r7, [r7, #-4]
 8001fce:	42be      	cmp	r6, r7
 8001fd0:	dd1d      	ble.n	800200e <maxim_peaks_above_min_height+0x6e>
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 8001fd2:	429c      	cmp	r4, r3
 8001fd4:	eba4 0e05 	sub.w	lr, r4, r5
 8001fd8:	4627      	mov	r7, r4
 8001fda:	d105      	bne.n	8001fe8 <maxim_peaks_above_min_height+0x48>
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 8001fdc:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8001fe0:	42a6      	cmp	r6, r4
 8001fe2:	dc09      	bgt.n	8001ff8 <maxim_peaks_above_min_height+0x58>
 8001fe4:	463d      	mov	r5, r7
 8001fe6:	e7e3      	b.n	8001fb0 <maxim_peaks_above_min_height+0x10>
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 8001fe8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8001fec:	f104 0801 	add.w	r8, r4, #1
 8001ff0:	4286      	cmp	r6, r0
 8001ff2:	d1f3      	bne.n	8001fdc <maxim_peaks_above_min_height+0x3c>
 8001ff4:	4644      	mov	r4, r8
 8001ff6:	e7ec      	b.n	8001fd2 <maxim_peaks_above_min_height+0x32>
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 8001ff8:	680c      	ldr	r4, [r1, #0]
 8001ffa:	2c0e      	cmp	r4, #14
 8001ffc:	dcf2      	bgt.n	8001fe4 <maxim_peaks_above_min_height+0x44>
                pn_locs[(*pn_npks)++] = i;        
 8001ffe:	1c66      	adds	r6, r4, #1
 8002000:	600e      	str	r6, [r1, #0]
 8002002:	f849 5024 	str.w	r5, [r9, r4, lsl #2]
                i += n_width+1;
 8002006:	f10e 0401 	add.w	r4, lr, #1
 800200a:	1967      	adds	r7, r4, r5
 800200c:	e7ea      	b.n	8001fe4 <maxim_peaks_above_min_height+0x44>
            i++;
 800200e:	4627      	mov	r7, r4
 8002010:	e7e8      	b.n	8001fe4 <maxim_peaks_above_min_height+0x44>

08002012 <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 8002012:	b5f0      	push	{r4, r5, r6, r7, lr}
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 8002014:	2301      	movs	r3, #1
 8002016:	4604      	mov	r4, r0
 8002018:	428b      	cmp	r3, r1
 800201a:	db00      	blt.n	800201e <maxim_sort_ascend+0xc>
        n_temp = pn_x[i];
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
            pn_x[j] = pn_x[j-1];
        pn_x[j] = n_temp;
    }
}
 800201c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        n_temp = pn_x[i];
 800201e:	f854 6f04 	ldr.w	r6, [r4, #4]!
 8002022:	461a      	mov	r2, r3
 8002024:	4625      	mov	r5, r4
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8002026:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800202a:	42be      	cmp	r6, r7
 800202c:	da03      	bge.n	8002036 <maxim_sort_ascend+0x24>
 800202e:	3a01      	subs	r2, #1
            pn_x[j] = pn_x[j-1];
 8002030:	f845 7904 	str.w	r7, [r5], #-4
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8002034:	d1f7      	bne.n	8002026 <maxim_sort_ascend+0x14>
        pn_x[j] = n_temp;
 8002036:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
    for (i = 1; i < n_size; i++) {
 800203a:	3301      	adds	r3, #1
 800203c:	e7ec      	b.n	8002018 <maxim_sort_ascend+0x6>

0800203e <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
 800203e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002042:	4694      	mov	ip, r2
 8002044:	460d      	mov	r5, r1
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 8002046:	2301      	movs	r3, #1
 8002048:	4563      	cmp	r3, ip
 800204a:	db01      	blt.n	8002050 <maxim_sort_indices_descend+0x12>
        n_temp = pn_indx[i];
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
            pn_indx[j] = pn_indx[j-1];
        pn_indx[j] = n_temp;
    }
}
 800204c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        n_temp = pn_indx[i];
 8002050:	f855 9f04 	ldr.w	r9, [r5, #4]!
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8002054:	461c      	mov	r4, r3
 8002056:	462e      	mov	r6, r5
 8002058:	eb00 0889 	add.w	r8, r0, r9, lsl #2
 800205c:	f8d8 2000 	ldr.w	r2, [r8]
 8002060:	f856 7c04 	ldr.w	r7, [r6, #-4]
 8002064:	4696      	mov	lr, r2
 8002066:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
 800206a:	4596      	cmp	lr, r2
 800206c:	dd03      	ble.n	8002076 <maxim_sort_indices_descend+0x38>
 800206e:	3c01      	subs	r4, #1
            pn_indx[j] = pn_indx[j-1];
 8002070:	f846 7904 	str.w	r7, [r6], #-4
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8002074:	d1f2      	bne.n	800205c <maxim_sort_indices_descend+0x1e>
        pn_indx[j] = n_temp;
 8002076:	f841 9024 	str.w	r9, [r1, r4, lsl #2]
    for (i = 1; i < n_size; i++) {
 800207a:	3301      	adds	r3, #1
 800207c:	e7e4      	b.n	8002048 <maxim_sort_indices_descend+0xa>

0800207e <maxim_remove_close_peaks>:
{
 800207e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002082:	4604      	mov	r4, r0
 8002084:	461f      	mov	r7, r3
 8002086:	4610      	mov	r0, r2
 8002088:	460d      	mov	r5, r1
    maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 800208a:	680a      	ldr	r2, [r1, #0]
 800208c:	4621      	mov	r1, r4
 800208e:	f7ff ffd6 	bl	800203e <maxim_sort_indices_descend>
    for ( i = -1; i < *pn_npks; i++ ){
 8002092:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002096:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
 800209a:	1f20      	subs	r0, r4, #4
            if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 800209c:	f1c7 0c00 	rsb	ip, r7, #0
    for ( i = -1; i < *pn_npks; i++ ){
 80020a0:	6829      	ldr	r1, [r5, #0]
 80020a2:	428a      	cmp	r2, r1
 80020a4:	db04      	blt.n	80020b0 <maxim_remove_close_peaks+0x32>
    maxim_sort_ascend( pn_locs, *pn_npks );
 80020a6:	4620      	mov	r0, r4
}
 80020a8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    maxim_sort_ascend( pn_locs, *pn_npks );
 80020ac:	f7ff bfb1 	b.w	8002012 <maxim_sort_ascend>
        for ( j = i+1; j < n_old_npks; j++ ){
 80020b0:	4606      	mov	r6, r0
        *pn_npks = i+1;
 80020b2:	3201      	adds	r2, #1
 80020b4:	4471      	add	r1, lr
 80020b6:	602a      	str	r2, [r5, #0]
 80020b8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
            n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 80020bc:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
        for ( j = i+1; j < n_old_npks; j++ ){
 80020c0:	428e      	cmp	r6, r1
 80020c2:	d101      	bne.n	80020c8 <maxim_remove_close_peaks+0x4a>
 80020c4:	3004      	adds	r0, #4
 80020c6:	e7eb      	b.n	80020a0 <maxim_remove_close_peaks+0x22>
            n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 80020c8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80020cc:	bf0c      	ite	eq
 80020ce:	46c1      	moveq	r9, r8
 80020d0:	f8d0 9000 	ldrne.w	r9, [r0]
 80020d4:	f856 3f04 	ldr.w	r3, [r6, #4]!
 80020d8:	eba3 0309 	sub.w	r3, r3, r9
            if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 80020dc:	42bb      	cmp	r3, r7
 80020de:	dc01      	bgt.n	80020e4 <maxim_remove_close_peaks+0x66>
 80020e0:	4563      	cmp	r3, ip
 80020e2:	daed      	bge.n	80020c0 <maxim_remove_close_peaks+0x42>
                pn_locs[(*pn_npks)++] = pn_locs[j];
 80020e4:	f8d5 9000 	ldr.w	r9, [r5]
 80020e8:	f109 0301 	add.w	r3, r9, #1
 80020ec:	602b      	str	r3, [r5, #0]
 80020ee:	6833      	ldr	r3, [r6, #0]
 80020f0:	f844 3029 	str.w	r3, [r4, r9, lsl #2]
 80020f4:	e7e4      	b.n	80020c0 <maxim_remove_close_peaks+0x42>

080020f6 <maxim_find_peaks>:
{
 80020f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020f8:	4605      	mov	r5, r0
    maxim_peaks_above_min_height( pn_locs, pn_npks, pn_x, n_size, n_min_height );
 80020fa:	9f08      	ldr	r7, [sp, #32]
{
 80020fc:	460c      	mov	r4, r1
    maxim_peaks_above_min_height( pn_locs, pn_npks, pn_x, n_size, n_min_height );
 80020fe:	9700      	str	r7, [sp, #0]
 8002100:	f7ff ff4e 	bl	8001fa0 <maxim_peaks_above_min_height>
    maxim_remove_close_peaks( pn_locs, pn_npks, pn_x, n_min_distance );
 8002104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002106:	4628      	mov	r0, r5
 8002108:	f7ff ffb9 	bl	800207e <maxim_remove_close_peaks>
    *pn_npks = min( *pn_npks, n_max_num );
 800210c:	6822      	ldr	r2, [r4, #0]
 800210e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002110:	429a      	cmp	r2, r3
 8002112:	bfd4      	ite	le
 8002114:	6022      	strle	r2, [r4, #0]
 8002116:	6023      	strgt	r3, [r4, #0]
}
 8002118:	b003      	add	sp, #12
 800211a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800211c <maxim_heart_rate_and_oxygen_saturation>:
{
 800211c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002120:	b0bb      	sub	sp, #236	; 0xec
 8002122:	9104      	str	r1, [sp, #16]
    for (k=0 ; k<n_buffer_length ; k++ )
 8002124:	2100      	movs	r1, #0
{
 8002126:	4680      	mov	r8, r0
 8002128:	4617      	mov	r7, r2
    uint32_t un_offset_tmp = un_offset;
 800212a:	461e      	mov	r6, r3
 800212c:	461a      	mov	r2, r3
    un_ir_mean =0; 
 800212e:	4608      	mov	r0, r1
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8002130:	f44f 7416 	mov.w	r4, #600	; 0x258
    for (k=0 ; k<n_buffer_length ; k++ )
 8002134:	42b9      	cmp	r1, r7
 8002136:	f2c0 80b4 	blt.w	80022a2 <maxim_heart_rate_and_oxygen_saturation+0x186>
    un_ir_mean =un_ir_mean/n_buffer_length ;
 800213a:	fbb0 f2f7 	udiv	r2, r0, r7
    for (k=0 ; k<n_buffer_length ; k++ )
 800213e:	2100      	movs	r1, #0
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8002140:	f44f 7416 	mov.w	r4, #600	; 0x258
 8002144:	4dcc      	ldr	r5, [pc, #816]	; (8002478 <maxim_heart_rate_and_oxygen_saturation+0x35c>)
    for (k=0 ; k<n_buffer_length ; k++ )
 8002146:	42b9      	cmp	r1, r7
 8002148:	f2c0 80b5 	blt.w	80022b6 <maxim_heart_rate_and_oxygen_saturation+0x19a>
 800214c:	4cca      	ldr	r4, [pc, #808]	; (8002478 <maxim_heart_rate_and_oxygen_saturation+0x35c>)
        an_x[k]=  n_denom/(int32_t)4; 
 800214e:	2104      	movs	r1, #4
    for (k=0 ; k<n_buffer_length ; k++ )
 8002150:	4625      	mov	r5, r4
 8002152:	f504 62f8 	add.w	r2, r4, #1984	; 0x7c0
        n_denom= ( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3]);
 8002156:	e895 0009 	ldmia.w	r5, {r0, r3}
 800215a:	4403      	add	r3, r0
 800215c:	68a8      	ldr	r0, [r5, #8]
 800215e:	4403      	add	r3, r0
 8002160:	68e8      	ldr	r0, [r5, #12]
 8002162:	4403      	add	r3, r0
        an_x[k]=  n_denom/(int32_t)4; 
 8002164:	fb93 f3f1 	sdiv	r3, r3, r1
 8002168:	f845 3b04 	str.w	r3, [r5], #4
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++)
 800216c:	42aa      	cmp	r2, r5
 800216e:	d1f2      	bne.n	8002156 <maxim_heart_rate_and_oxygen_saturation+0x3a>
 8002170:	2300      	movs	r3, #0
    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 8002172:	f240 1cef 	movw	ip, #495	; 0x1ef
 8002176:	49c0      	ldr	r1, [pc, #768]	; (8002478 <maxim_heart_rate_and_oxygen_saturation+0x35c>)
        an_dx[k]= (an_x[k+1]- an_x[k]);
 8002178:	f8df e300 	ldr.w	lr, [pc, #768]	; 800247c <maxim_heart_rate_and_oxygen_saturation+0x360>
 800217c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8002180:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002184:	1a12      	subs	r2, r2, r0
 8002186:	f84e 2023 	str.w	r2, [lr, r3, lsl #2]
 800218a:	3301      	adds	r3, #1
    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 800218c:	4563      	cmp	r3, ip
 800218e:	d1f5      	bne.n	800217c <maxim_heart_rate_and_oxygen_saturation+0x60>
        an_dx[k] =  ( an_dx[k]+an_dx[k+1])/2 ;
 8002190:	2002      	movs	r0, #2
 8002192:	4bba      	ldr	r3, [pc, #744]	; (800247c <maxim_heart_rate_and_oxygen_saturation+0x360>)
 8002194:	f503 61f7 	add.w	r1, r3, #1976	; 0x7b8
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	f853 ef04 	ldr.w	lr, [r3, #4]!
 800219e:	4472      	add	r2, lr
 80021a0:	fb92 f2f0 	sdiv	r2, r2, r0
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 80021a4:	4299      	cmp	r1, r3
        an_dx[k] =  ( an_dx[k]+an_dx[k+1])/2 ;
 80021a6:	f843 2c04 	str.w	r2, [r3, #-4]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 80021aa:	d1f5      	bne.n	8002198 <maxim_heart_rate_and_oxygen_saturation+0x7c>
 80021ac:	2100      	movs	r1, #0
        an_dx[i]= s/ (int32_t)1146; // divide by sum of auw_hamm 
 80021ae:	f240 4c7a 	movw	ip, #1146	; 0x47a
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 80021b2:	f240 19e9 	movw	r9, #489	; 0x1e9
            s -= an_dx[k] *auw_hamm[k-i] ; 
 80021b6:	48b1      	ldr	r0, [pc, #708]	; (800247c <maxim_heart_rate_and_oxygen_saturation+0x360>)
 80021b8:	f8df e2d4 	ldr.w	lr, [pc, #724]	; 8002490 <maxim_heart_rate_and_oxygen_saturation+0x374>
 80021bc:	2300      	movs	r3, #0
 80021be:	461a      	mov	r2, r3
 80021c0:	eb01 0b03 	add.w	fp, r1, r3
 80021c4:	f83e a013 	ldrh.w	sl, [lr, r3, lsl #1]
 80021c8:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 80021cc:	3301      	adds	r3, #1
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 80021ce:	2b05      	cmp	r3, #5
            s -= an_dx[k] *auw_hamm[k-i] ; 
 80021d0:	fb0b 221a 	mls	r2, fp, sl, r2
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 80021d4:	d1f4      	bne.n	80021c0 <maxim_heart_rate_and_oxygen_saturation+0xa4>
        an_dx[i]= s/ (int32_t)1146; // divide by sum of auw_hamm 
 80021d6:	fb92 f2fc 	sdiv	r2, r2, ip
 80021da:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 80021de:	3101      	adds	r1, #1
 80021e0:	4549      	cmp	r1, r9
 80021e2:	d1eb      	bne.n	80021bc <maxim_heart_rate_and_oxygen_saturation+0xa0>
 80021e4:	2200      	movs	r2, #0
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 80021e6:	f240 10ef 	movw	r0, #495	; 0x1ef
 80021ea:	4613      	mov	r3, r2
        n_th1 += ((an_dx[k]>0)? an_dx[k] : ((int32_t)0-an_dx[k])) ;
 80021ec:	f8df e28c 	ldr.w	lr, [pc, #652]	; 800247c <maxim_heart_rate_and_oxygen_saturation+0x360>
 80021f0:	f85e 1023 	ldr.w	r1, [lr, r3, lsl #2]
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 80021f4:	3301      	adds	r3, #1
        n_th1 += ((an_dx[k]>0)? an_dx[k] : ((int32_t)0-an_dx[k])) ;
 80021f6:	ea81 7ce1 	eor.w	ip, r1, r1, asr #31
 80021fa:	ebac 7ce1 	sub.w	ip, ip, r1, asr #31
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 80021fe:	4283      	cmp	r3, r0
        n_th1 += ((an_dx[k]>0)? an_dx[k] : ((int32_t)0-an_dx[k])) ;
 8002200:	4462      	add	r2, ip
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 8002202:	d1f5      	bne.n	80021f0 <maxim_heart_rate_and_oxygen_saturation+0xd4>
    maxim_find_peaks( an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE-HAMMING_SIZE, n_th1, 8, 5 );//peak_height, peak_distance, max_num_peaks 
 8002204:	2105      	movs	r1, #5
    n_th1= n_th1/ ( BUFFER_SIZE-HAMMING_SIZE);
 8002206:	fb92 f2f3 	sdiv	r2, r2, r3
    maxim_find_peaks( an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE-HAMMING_SIZE, n_th1, 8, 5 );//peak_height, peak_distance, max_num_peaks 
 800220a:	9102      	str	r1, [sp, #8]
 800220c:	2108      	movs	r1, #8
 800220e:	9200      	str	r2, [sp, #0]
 8002210:	9101      	str	r1, [sp, #4]
 8002212:	a82b      	add	r0, sp, #172	; 0xac
 8002214:	4a99      	ldr	r2, [pc, #612]	; (800247c <maxim_heart_rate_and_oxygen_saturation+0x360>)
 8002216:	a907      	add	r1, sp, #28
 8002218:	f7ff ff6d 	bl	80020f6 <maxim_find_peaks>
    if (n_npks>=2){
 800221c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8002220:	2000      	movs	r0, #0
 8002222:	f1b9 0f01 	cmp.w	r9, #1
 8002226:	dd54      	ble.n	80022d2 <maxim_heart_rate_and_oxygen_saturation+0x1b6>
 8002228:	4686      	mov	lr, r0
 800222a:	2101      	movs	r1, #1
 800222c:	ab2b      	add	r3, sp, #172	; 0xac
            n_peak_interval_sum += (an_dx_peak_locs[k]-an_dx_peak_locs[k -1]);
 800222e:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8002232:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8002236:	1a12      	subs	r2, r2, r0
 8002238:	4496      	add	lr, r2
        for (k=1; k<n_npks; k++)
 800223a:	1c4a      	adds	r2, r1, #1
 800223c:	4591      	cmp	r9, r2
 800223e:	d146      	bne.n	80022ce <maxim_heart_rate_and_oxygen_saturation+0x1b2>
        *pn_heart_rate=(int32_t)(6000/(float)n_peak_interval_sum*(float)(FS/100.0));// beats per minutes
 8002240:	fb9e f0f1 	sdiv	r0, lr, r1
 8002244:	f7fe f844 	bl	80002d0 <__aeabi_i2f>
 8002248:	4601      	mov	r1, r0
 800224a:	488d      	ldr	r0, [pc, #564]	; (8002480 <maxim_heart_rate_and_oxygen_saturation+0x364>)
 800224c:	f7fe f948 	bl	80004e0 <__aeabi_fdiv>
 8002250:	f7fe f9e2 	bl	8000618 <__aeabi_f2iz>
 8002254:	9b46      	ldr	r3, [sp, #280]	; 0x118
        *pch_hr_valid  = 1;
 8002256:	9a47      	ldr	r2, [sp, #284]	; 0x11c
        *pn_heart_rate=(int32_t)(6000/(float)n_peak_interval_sum*(float)(FS/100.0));// beats per minutes
 8002258:	6018      	str	r0, [r3, #0]
        *pch_hr_valid  = 1;
 800225a:	2301      	movs	r3, #1
 800225c:	7013      	strb	r3, [r2, #0]
 800225e:	2300      	movs	r3, #0
        an_ir_valley_locs[k]=an_dx_peak_locs[k]+HAMMING_SIZE/2; 
 8002260:	a90d      	add	r1, sp, #52	; 0x34
 8002262:	a82b      	add	r0, sp, #172	; 0xac
    for ( k=0 ; k<n_npks ;k++)
 8002264:	454b      	cmp	r3, r9
 8002266:	db3a      	blt.n	80022de <maxim_heart_rate_and_oxygen_saturation+0x1c2>
 8002268:	2300      	movs	r3, #0
        un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 800226a:	f44f 7216 	mov.w	r2, #600	; 0x258
        an_x[k] =  pun_ir_buffer[un_offset_tmp];
 800226e:	f8df c208 	ldr.w	ip, [pc, #520]	; 8002478 <maxim_heart_rate_and_oxygen_saturation+0x35c>
        an_y[k] =  pun_red_buffer[un_offset_tmp];
 8002272:	4884      	ldr	r0, [pc, #528]	; (8002484 <maxim_heart_rate_and_oxygen_saturation+0x368>)
    for (k=0 ; k<n_buffer_length ; k++ )  {
 8002274:	42bb      	cmp	r3, r7
 8002276:	db39      	blt.n	80022ec <maxim_heart_rate_and_oxygen_saturation+0x1d0>
 8002278:	2300      	movs	r3, #0
 800227a:	461a      	mov	r2, r3
                if (an_x[i]<n_c_min){
 800227c:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 8002478 <maxim_heart_rate_and_oxygen_saturation+0x35c>
        m=an_ir_valley_locs[k];
 8002280:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
                   an_exact_ir_valley_locs[k]=i;
 8002284:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
    for(k=0 ; k<n_npks ;k++){
 8002288:	454a      	cmp	r2, r9
 800228a:	db3f      	blt.n	800230c <maxim_heart_rate_and_oxygen_saturation+0x1f0>
    if (n_exact_ir_valley_locs_count <2 ){
 800228c:	2b01      	cmp	r3, #1
 800228e:	dc58      	bgt.n	8002342 <maxim_heart_rate_and_oxygen_saturation+0x226>
       *pn_spo2 =  -999 ; // do not use SPO2 since signal ratio is out of range
 8002290:	4b7d      	ldr	r3, [pc, #500]	; (8002488 <maxim_heart_rate_and_oxygen_saturation+0x36c>)
 8002292:	9a44      	ldr	r2, [sp, #272]	; 0x110
 8002294:	6013      	str	r3, [r2, #0]
       *pch_spo2_valid  = 0; 
 8002296:	2300      	movs	r3, #0
        *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 8002298:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800229a:	7013      	strb	r3, [r2, #0]
}
 800229c:	b03b      	add	sp, #236	; 0xec
 800229e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    	un_ir_mean += pun_ir_buffer[un_offset_tmp];
 80022a2:	f858 5022 	ldr.w	r5, [r8, r2, lsl #2]
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 80022a6:	3201      	adds	r2, #1
    	un_ir_mean += pun_ir_buffer[un_offset_tmp];
 80022a8:	4428      	add	r0, r5
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 80022aa:	fbb2 f5f4 	udiv	r5, r2, r4
    for (k=0 ; k<n_buffer_length ; k++ )
 80022ae:	3101      	adds	r1, #1
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 80022b0:	fb04 2215 	mls	r2, r4, r5, r2
 80022b4:	e73e      	b.n	8002134 <maxim_heart_rate_and_oxygen_saturation+0x18>
    	an_x[k] =  pun_ir_buffer[un_offset_tmp] - un_ir_mean;
 80022b6:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 80022ba:	3301      	adds	r3, #1
    	an_x[k] =  pun_ir_buffer[un_offset_tmp] - un_ir_mean;
 80022bc:	1a80      	subs	r0, r0, r2
 80022be:	f845 0021 	str.w	r0, [r5, r1, lsl #2]
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 80022c2:	fbb3 f0f4 	udiv	r0, r3, r4
    for (k=0 ; k<n_buffer_length ; k++ )
 80022c6:	3101      	adds	r1, #1
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 80022c8:	fb04 3310 	mls	r3, r4, r0, r3
 80022cc:	e73b      	b.n	8002146 <maxim_heart_rate_and_oxygen_saturation+0x2a>
 80022ce:	4611      	mov	r1, r2
 80022d0:	e7ad      	b.n	800222e <maxim_heart_rate_and_oxygen_saturation+0x112>
        *pn_heart_rate = -999;
 80022d2:	4b6d      	ldr	r3, [pc, #436]	; (8002488 <maxim_heart_rate_and_oxygen_saturation+0x36c>)
 80022d4:	9a46      	ldr	r2, [sp, #280]	; 0x118
 80022d6:	6013      	str	r3, [r2, #0]
        *pch_hr_valid  = 0;
 80022d8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80022da:	7018      	strb	r0, [r3, #0]
 80022dc:	e7bf      	b.n	800225e <maxim_heart_rate_and_oxygen_saturation+0x142>
        an_ir_valley_locs[k]=an_dx_peak_locs[k]+HAMMING_SIZE/2; 
 80022de:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80022e2:	3202      	adds	r2, #2
 80022e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for ( k=0 ; k<n_npks ;k++)
 80022e8:	3301      	adds	r3, #1
 80022ea:	e7bb      	b.n	8002264 <maxim_heart_rate_and_oxygen_saturation+0x148>
        an_x[k] =  pun_ir_buffer[un_offset_tmp];
 80022ec:	f858 e026 	ldr.w	lr, [r8, r6, lsl #2]
        an_y[k] =  pun_red_buffer[un_offset_tmp];
 80022f0:	9904      	ldr	r1, [sp, #16]
        an_x[k] =  pun_ir_buffer[un_offset_tmp];
 80022f2:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
        an_y[k] =  pun_red_buffer[un_offset_tmp];
 80022f6:	f851 e026 	ldr.w	lr, [r1, r6, lsl #2]
        un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 80022fa:	3601      	adds	r6, #1
        an_y[k] =  pun_red_buffer[un_offset_tmp];
 80022fc:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
        un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8002300:	fbb6 fef2 	udiv	lr, r6, r2
    for (k=0 ; k<n_buffer_length ; k++ )  {
 8002304:	3301      	adds	r3, #1
        un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8002306:	fb02 661e 	mls	r6, r2, lr, r6
 800230a:	e7b3      	b.n	8002274 <maxim_heart_rate_and_oxygen_saturation+0x158>
        m=an_ir_valley_locs[k];
 800230c:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
        if (m+5 <  BUFFER_SIZE-HAMMING_SIZE  && m-5 >0){
 8002310:	1f88      	subs	r0, r1, #6
 8002312:	f5b0 7ff2 	cmp.w	r0, #484	; 0x1e4
 8002316:	d208      	bcs.n	800232a <maxim_heart_rate_and_oxygen_saturation+0x20e>
        n_c_min= 16777216;//2^24;
 8002318:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
        un_only_once =1;
 800231c:	2601      	movs	r6, #1
            for(i= m-5;i<m+5; i++)
 800231e:	1f48      	subs	r0, r1, #5
 8002320:	3105      	adds	r1, #5
 8002322:	4288      	cmp	r0, r1
 8002324:	d103      	bne.n	800232e <maxim_heart_rate_and_oxygen_saturation+0x212>
            if (un_only_once ==0)
 8002326:	b906      	cbnz	r6, 800232a <maxim_heart_rate_and_oxygen_saturation+0x20e>
                n_exact_ir_valley_locs_count ++ ;
 8002328:	3301      	adds	r3, #1
    for(k=0 ; k<n_npks ;k++){
 800232a:	3201      	adds	r2, #1
 800232c:	e7ac      	b.n	8002288 <maxim_heart_rate_and_oxygen_saturation+0x16c>
                if (an_x[i]<n_c_min){
 800232e:	f858 e020 	ldr.w	lr, [r8, r0, lsl #2]
 8002332:	4577      	cmp	r7, lr
                   an_exact_ir_valley_locs[k]=i;
 8002334:	bfc2      	ittt	gt
 8002336:	f84a 0022 	strgt.w	r0, [sl, r2, lsl #2]
 800233a:	4677      	movgt	r7, lr
 800233c:	2600      	movgt	r6, #0
            for(i= m-5;i<m+5; i++)
 800233e:	3001      	adds	r0, #1
 8002340:	e7ef      	b.n	8002322 <maxim_heart_rate_and_oxygen_saturation+0x206>
        an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int32_t)4;
 8002342:	2604      	movs	r6, #4
 8002344:	494f      	ldr	r1, [pc, #316]	; (8002484 <maxim_heart_rate_and_oxygen_saturation+0x368>)
 8002346:	68a7      	ldr	r7, [r4, #8]
 8002348:	e894 0005 	ldmia.w	r4, {r0, r2}
 800234c:	4402      	add	r2, r0
 800234e:	443a      	add	r2, r7
 8002350:	68e7      	ldr	r7, [r4, #12]
 8002352:	443a      	add	r2, r7
 8002354:	fb92 f2f6 	sdiv	r2, r2, r6
        an_y[k]=( an_y[k]+an_y[k+1]+ an_y[k+2]+ an_y[k+3])/(int32_t)4;
 8002358:	688f      	ldr	r7, [r1, #8]
        an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int32_t)4;
 800235a:	f844 2b04 	str.w	r2, [r4], #4
        an_y[k]=( an_y[k]+an_y[k+1]+ an_y[k+2]+ an_y[k+3])/(int32_t)4;
 800235e:	e891 0005 	ldmia.w	r1, {r0, r2}
 8002362:	4402      	add	r2, r0
 8002364:	443a      	add	r2, r7
 8002366:	68cf      	ldr	r7, [r1, #12]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 8002368:	42a5      	cmp	r5, r4
        an_y[k]=( an_y[k]+an_y[k+1]+ an_y[k+2]+ an_y[k+3])/(int32_t)4;
 800236a:	443a      	add	r2, r7
 800236c:	fb92 f2f6 	sdiv	r2, r2, r6
 8002370:	f841 2b04 	str.w	r2, [r1], #4
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 8002374:	d1e7      	bne.n	8002346 <maxim_heart_rate_and_oxygen_saturation+0x22a>
    for(k=0; k< 5; k++) an_ratio[k]=0;
 8002376:	2200      	movs	r2, #0
        if (an_exact_ir_valley_locs[k] > BUFFER_SIZE ){             
 8002378:	ad1c      	add	r5, sp, #112	; 0x70
    for(k=0; k< 5; k++) an_ratio[k]=0;
 800237a:	9208      	str	r2, [sp, #32]
 800237c:	9209      	str	r2, [sp, #36]	; 0x24
 800237e:	920a      	str	r2, [sp, #40]	; 0x28
 8002380:	920b      	str	r2, [sp, #44]	; 0x2c
 8002382:	920c      	str	r2, [sp, #48]	; 0x30
        if (an_exact_ir_valley_locs[k] > BUFFER_SIZE ){             
 8002384:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
 8002388:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 800238c:	dc80      	bgt.n	8002290 <maxim_heart_rate_and_oxygen_saturation+0x174>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 800238e:	3201      	adds	r2, #1
 8002390:	4293      	cmp	r3, r2
 8002392:	d1f7      	bne.n	8002384 <maxim_heart_rate_and_oxygen_saturation+0x268>
 8002394:	2600      	movs	r6, #0
 8002396:	4637      	mov	r7, r6
 8002398:	4634      	mov	r4, r6
    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 800239a:	3b01      	subs	r3, #1
 800239c:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 8002478 <maxim_heart_rate_and_oxygen_saturation+0x35c>
                if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i];n_y_dc_max_idx=i;}
 80023a0:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8002484 <maxim_heart_rate_and_oxygen_saturation+0x368>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 80023a4:	9604      	str	r6, [sp, #16]
    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 80023a6:	9305      	str	r3, [sp, #20]
 80023a8:	9b04      	ldr	r3, [sp, #16]
 80023aa:	9a05      	ldr	r2, [sp, #20]
 80023ac:	4293      	cmp	r3, r2
 80023ae:	db1d      	blt.n	80023ec <maxim_heart_rate_and_oxygen_saturation+0x2d0>
    maxim_sort_ascend(an_ratio, n_i_ratio_count);
 80023b0:	4621      	mov	r1, r4
 80023b2:	a808      	add	r0, sp, #32
    n_middle_idx= n_i_ratio_count/2;
 80023b4:	1064      	asrs	r4, r4, #1
    maxim_sort_ascend(an_ratio, n_i_ratio_count);
 80023b6:	f7ff fe2c 	bl	8002012 <maxim_sort_ascend>
    if (n_middle_idx >1)
 80023ba:	2c01      	cmp	r4, #1
        n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 80023bc:	aa3a      	add	r2, sp, #232	; 0xe8
 80023be:	ea4f 0384 	mov.w	r3, r4, lsl #2
    if (n_middle_idx >1)
 80023c2:	dd79      	ble.n	80024b8 <maxim_heart_rate_and_oxygen_saturation+0x39c>
        n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 80023c4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80023c8:	f854 2cc8 	ldr.w	r2, [r4, #-200]
 80023cc:	f854 3ccc 	ldr.w	r3, [r4, #-204]
 80023d0:	4413      	add	r3, r2
 80023d2:	2202      	movs	r2, #2
 80023d4:	fb93 f3f2 	sdiv	r3, r3, r2
    if( n_ratio_average>2 && n_ratio_average <184){
 80023d8:	1eda      	subs	r2, r3, #3
 80023da:	2ab4      	cmp	r2, #180	; 0xb4
 80023dc:	f63f af58 	bhi.w	8002290 <maxim_heart_rate_and_oxygen_saturation+0x174>
        n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 80023e0:	4a2a      	ldr	r2, [pc, #168]	; (800248c <maxim_heart_rate_and_oxygen_saturation+0x370>)
 80023e2:	5cd3      	ldrb	r3, [r2, r3]
 80023e4:	9a44      	ldr	r2, [sp, #272]	; 0x110
 80023e6:	6013      	str	r3, [r2, #0]
        *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 80023e8:	2301      	movs	r3, #1
 80023ea:	e755      	b.n	8002298 <maxim_heart_rate_and_oxygen_saturation+0x17c>
        if (an_exact_ir_valley_locs[k+1]-an_exact_ir_valley_locs[k] >10){
 80023ec:	f855 8f04 	ldr.w	r8, [r5, #4]!
 80023f0:	9b04      	ldr	r3, [sp, #16]
 80023f2:	f855 2c04 	ldr.w	r2, [r5, #-4]
 80023f6:	3301      	adds	r3, #1
 80023f8:	eba8 0902 	sub.w	r9, r8, r2
 80023fc:	f1b9 0f0a 	cmp.w	r9, #10
 8002400:	9304      	str	r3, [sp, #16]
 8002402:	ddd1      	ble.n	80023a8 <maxim_heart_rate_and_oxygen_saturation+0x28c>
 8002404:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002408:	4610      	mov	r0, r2
 800240a:	4619      	mov	r1, r3
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 800240c:	4540      	cmp	r0, r8
 800240e:	db41      	blt.n	8002494 <maxim_heart_rate_and_oxygen_saturation+0x378>
            n_x_ac= (an_x[an_exact_ir_valley_locs[k+1]] - an_x[an_exact_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_exact_ir_valley_locs[k]); // ir
 8002410:	f85e a022 	ldr.w	sl, [lr, r2, lsl #2]
 8002414:	f85e 0028 	ldr.w	r0, [lr, r8, lsl #2]
 8002418:	eba0 0b0a 	sub.w	fp, r0, sl
 800241c:	1ab0      	subs	r0, r6, r2
 800241e:	fb00 f00b 	mul.w	r0, r0, fp
            n_x_ac=  an_x[an_exact_ir_valley_locs[k]] + n_x_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k]); 
 8002422:	fb90 f0f9 	sdiv	r0, r0, r9
 8002426:	4482      	add	sl, r0
            n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
 8002428:	f85e 0027 	ldr.w	r0, [lr, r7, lsl #2]
 800242c:	eba0 0a0a 	sub.w	sl, r0, sl
            n_denom= ( n_x_ac *n_y_dc_max)>>7;
 8002430:	fb01 f10a 	mul.w	r1, r1, sl
 8002434:	11c9      	asrs	r1, r1, #7
            if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 8002436:	2900      	cmp	r1, #0
 8002438:	ddb6      	ble.n	80023a8 <maxim_heart_rate_and_oxygen_saturation+0x28c>
 800243a:	2c04      	cmp	r4, #4
 800243c:	dcb4      	bgt.n	80023a8 <maxim_heart_rate_and_oxygen_saturation+0x28c>
            n_y_ac= (an_y[an_exact_ir_valley_locs[k+1]] - an_y[an_exact_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_exact_ir_valley_locs[k]); //red
 800243e:	f85c 0022 	ldr.w	r0, [ip, r2, lsl #2]
 8002442:	f85c 8028 	ldr.w	r8, [ip, r8, lsl #2]
 8002446:	1aba      	subs	r2, r7, r2
 8002448:	eba8 0800 	sub.w	r8, r8, r0
 800244c:	fb02 f208 	mul.w	r2, r2, r8
            n_y_ac=  an_y[an_exact_ir_valley_locs[k]] + n_y_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k])  ; 
 8002450:	fb92 f2f9 	sdiv	r2, r2, r9
 8002454:	4402      	add	r2, r0
            n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
 8002456:	f85c 0027 	ldr.w	r0, [ip, r7, lsl #2]
 800245a:	1a80      	subs	r0, r0, r2
            n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 800245c:	4343      	muls	r3, r0
            if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 800245e:	11db      	asrs	r3, r3, #7
 8002460:	d0a2      	beq.n	80023a8 <maxim_heart_rate_and_oxygen_saturation+0x28c>
                an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 8002462:	aa3a      	add	r2, sp, #232	; 0xe8
 8002464:	eb02 0884 	add.w	r8, r2, r4, lsl #2
 8002468:	2264      	movs	r2, #100	; 0x64
 800246a:	4353      	muls	r3, r2
 800246c:	fb93 f1f1 	sdiv	r1, r3, r1
                n_i_ratio_count++;
 8002470:	3401      	adds	r4, #1
                an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 8002472:	f848 1cc8 	str.w	r1, [r8, #-200]
 8002476:	e797      	b.n	80023a8 <maxim_heart_rate_and_oxygen_saturation+0x28c>
 8002478:	2000084c 	.word	0x2000084c
 800247c:	2000008c 	.word	0x2000008c
 8002480:	45bb8000 	.word	0x45bb8000
 8002484:	2000101c 	.word	0x2000101c
 8002488:	fffffc19 	.word	0xfffffc19
 800248c:	080031d2 	.word	0x080031d2
 8002490:	08003194 	.word	0x08003194
                if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i];n_x_dc_max_idx =i; }
 8002494:	f85e b020 	ldr.w	fp, [lr, r0, lsl #2]
 8002498:	ea4f 0a80 	mov.w	sl, r0, lsl #2
                if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i];n_y_dc_max_idx=i;}
 800249c:	f85a a00c 	ldr.w	sl, [sl, ip]
                if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i];n_x_dc_max_idx =i; }
 80024a0:	455b      	cmp	r3, fp
 80024a2:	bfac      	ite	ge
 80024a4:	469b      	movge	fp, r3
 80024a6:	4606      	movlt	r6, r0
                if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i];n_y_dc_max_idx=i;}
 80024a8:	4551      	cmp	r1, sl
 80024aa:	bfac      	ite	ge
 80024ac:	468a      	movge	sl, r1
 80024ae:	4607      	movlt	r7, r0
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 80024b0:	465b      	mov	r3, fp
 80024b2:	3001      	adds	r0, #1
 80024b4:	4651      	mov	r1, sl
 80024b6:	e7a9      	b.n	800240c <maxim_heart_rate_and_oxygen_saturation+0x2f0>
        n_ratio_average = an_ratio[n_middle_idx ];
 80024b8:	4413      	add	r3, r2
 80024ba:	f853 3cc8 	ldr.w	r3, [r3, #-200]
 80024be:	e78b      	b.n	80023d8 <maxim_heart_rate_and_oxygen_saturation+0x2bc>

080024c0 <MX_GPIO_Init>:
/** Configure pins
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c0:	2210      	movs	r2, #16
{
 80024c2:	b530      	push	{r4, r5, lr}
 80024c4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c6:	eb0d 0002 	add.w	r0, sp, r2
 80024ca:	2100      	movs	r1, #0
 80024cc:	f000 fa1a 	bl	8002904 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d0:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <MX_GPIO_Init+0x88>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80024d2:	4d1e      	ldr	r5, [pc, #120]	; (800254c <MX_GPIO_Init+0x8c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80024d6:	4628      	mov	r0, r5
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d8:	f042 0210 	orr.w	r2, r2, #16
 80024dc:	619a      	str	r2, [r3, #24]
 80024de:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80024e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e4:	f002 0210 	and.w	r2, r2, #16
 80024e8:	9201      	str	r2, [sp, #4]
 80024ea:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ec:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f0:	f042 0204 	orr.w	r2, r2, #4
 80024f4:	619a      	str	r2, [r3, #24]
 80024f6:	699a      	ldr	r2, [r3, #24]
 80024f8:	f002 0204 	and.w	r2, r2, #4
 80024fc:	9202      	str	r2, [sp, #8]
 80024fe:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002500:	699a      	ldr	r2, [r3, #24]
 8002502:	f042 0208 	orr.w	r2, r2, #8
 8002506:	619a      	str	r2, [r3, #24]
 8002508:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800250a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	9303      	str	r3, [sp, #12]
 8002512:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002514:	f7fe fa36 	bl	8000984 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin;
 8002518:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800251c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800251e:	2301      	movs	r3, #1
 8002520:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002522:	2302      	movs	r3, #2
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002524:	a904      	add	r1, sp, #16
 8002526:	4628      	mov	r0, r5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002528:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800252c:	f7fe f94a 	bl	80007c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_Pin;
 8002530:	2320      	movs	r3, #32
 8002532:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002534:	4b06      	ldr	r3, [pc, #24]	; (8002550 <MX_GPIO_Init+0x90>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8002536:	a904      	add	r1, sp, #16
 8002538:	4806      	ldr	r0, [pc, #24]	; (8002554 <MX_GPIO_Init+0x94>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800253a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 800253e:	f7fe f941 	bl	80007c4 <HAL_GPIO_Init>

}
 8002542:	b009      	add	sp, #36	; 0x24
 8002544:	bd30      	pop	{r4, r5, pc}
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	40011000 	.word	0x40011000
 8002550:	10210000 	.word	0x10210000
 8002554:	40010c00 	.word	0x40010c00

08002558 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002558:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 800255a:	480c      	ldr	r0, [pc, #48]	; (800258c <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 400000;
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <MX_I2C1_Init+0x38>)
 800255e:	f8df e034 	ldr.w	lr, [pc, #52]	; 8002594 <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002562:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 8002566:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800256a:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800256c:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800256e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002570:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002572:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002574:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002576:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002578:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800257a:	f7fe fbdf 	bl	8000d3c <HAL_I2C_Init>
 800257e:	b118      	cbz	r0, 8002588 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 8002580:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002584:	f000 b8a5 	b.w	80026d2 <Error_Handler>
 8002588:	bd08      	pop	{r3, pc}
 800258a:	bf00      	nop
 800258c:	20002ae0 	.word	0x20002ae0
 8002590:	40005400 	.word	0x40005400
 8002594:	00061a80 	.word	0x00061a80

08002598 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002598:	b510      	push	{r4, lr}
 800259a:	4604      	mov	r4, r0
 800259c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259e:	2210      	movs	r2, #16
 80025a0:	2100      	movs	r1, #0
 80025a2:	a802      	add	r0, sp, #8
 80025a4:	f000 f9ae 	bl	8002904 <memset>
  if(i2cHandle->Instance==I2C1)
 80025a8:	6822      	ldr	r2, [r4, #0]
 80025aa:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <HAL_I2C_MspInit+0x58>)
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d11c      	bne.n	80025ea <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b0:	4c10      	ldr	r4, [pc, #64]	; (80025f4 <HAL_I2C_MspInit+0x5c>)
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b2:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b4:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b6:	4810      	ldr	r0, [pc, #64]	; (80025f8 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b8:	f043 0308 	orr.w	r3, r3, #8
 80025bc:	61a3      	str	r3, [r4, #24]
 80025be:	69a3      	ldr	r3, [r4, #24]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025c8:	23c0      	movs	r3, #192	; 0xc0
 80025ca:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025cc:	2312      	movs	r3, #18
 80025ce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025d0:	2303      	movs	r3, #3
 80025d2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d4:	f7fe f8f6 	bl	80007c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025d8:	69e3      	ldr	r3, [r4, #28]
 80025da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025de:	61e3      	str	r3, [r4, #28]
 80025e0:	69e3      	ldr	r3, [r4, #28]
 80025e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e6:	9301      	str	r3, [sp, #4]
 80025e8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80025ea:	b006      	add	sp, #24
 80025ec:	bd10      	pop	{r4, pc}
 80025ee:	bf00      	nop
 80025f0:	40005400 	.word	0x40005400
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40010c00 	.word	0x40010c00

080025fc <UART2_SendString>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UART2_SendString(char* s) {
 80025fc:	b510      	push	{r4, lr}
 80025fe:	4604      	mov	r4, r0
	HAL_UART_Transmit(&huart1, (uint8_t*) s, strlen(s), 1000);
 8002600:	f7fd fda4 	bl	800014c <strlen>
 8002604:	4621      	mov	r1, r4
}
 8002606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit(&huart1, (uint8_t*) s, strlen(s), 1000);
 800260a:	b282      	uxth	r2, r0
 800260c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002610:	4801      	ldr	r0, [pc, #4]	; (8002618 <UART2_SendString+0x1c>)
 8002612:	f7ff b957 	b.w	80018c4 <HAL_UART_Transmit>
 8002616:	bf00      	nop
 8002618:	20002b54 	.word	0x20002b54

0800261c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800261c:	b500      	push	{lr}
 800261e:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002620:	2228      	movs	r2, #40	; 0x28
 8002622:	2100      	movs	r1, #0
 8002624:	a806      	add	r0, sp, #24
 8002626:	f000 f96d 	bl	8002904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800262a:	2214      	movs	r2, #20
 800262c:	2100      	movs	r1, #0
 800262e:	a801      	add	r0, sp, #4
 8002630:	f000 f968 	bl	8002904 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002634:	2302      	movs	r3, #2
 8002636:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002638:	2301      	movs	r3, #1
 800263a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800263c:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800263e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002640:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002642:	f7fe fdb1 	bl	80011a8 <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002646:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002648:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800264a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800264c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800264e:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002650:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002652:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002654:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002656:	f7fe ff6f 	bl	8001538 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800265a:	b011      	add	sp, #68	; 0x44
 800265c:	f85d fb04 	ldr.w	pc, [sp], #4

08002660 <main>:
{
 8002660:	b508      	push	{r3, lr}
  HAL_Init();
 8002662:	f7fe f823 	bl	80006ac <HAL_Init>
  SystemClock_Config();
 8002666:	f7ff ffd9 	bl	800261c <SystemClock_Config>
  MX_GPIO_Init();
 800266a:	f7ff ff29 	bl	80024c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800266e:	f7ff ff73 	bl	8002558 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002672:	f000 f89f 	bl	80027b4 <MX_USART1_UART_Init>
  * @retval None
  */
static void MX_NVIC_Init(void)
{
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8002676:	2200      	movs	r2, #0
 8002678:	2101      	movs	r1, #1
 800267a:	2017      	movs	r0, #23
 800267c:	f7fe f84c 	bl	8000718 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002680:	2017      	movs	r0, #23
 8002682:	f7fe f87d 	bl	8000780 <HAL_NVIC_EnableIRQ>
  UART2_SendString("START\n\r");
 8002686:	480c      	ldr	r0, [pc, #48]	; (80026b8 <main+0x58>)
 8002688:	f7ff ffb8 	bl	80025fc <UART2_SendString>
  Max30102_Init(&hi2c1);
 800268c:	480b      	ldr	r0, [pc, #44]	; (80026bc <main+0x5c>)
 800268e:	f7ff fc2b 	bl	8001ee8 <Max30102_Init>
	sprintf(UartBuffer, "HR: %ld\n\rSpO2: %ld\n\r", Max30102_GetHeartRate(), Max30102_GetSpO2Value());
 8002692:	4d0b      	ldr	r5, [pc, #44]	; (80026c0 <main+0x60>)
 8002694:	4c0b      	ldr	r4, [pc, #44]	; (80026c4 <main+0x64>)
	Max30102_Task();
 8002696:	f7ff fbb1 	bl	8001dfc <Max30102_Task>
	sprintf(UartBuffer, "HR: %ld\n\rSpO2: %ld\n\r", Max30102_GetHeartRate(), Max30102_GetSpO2Value());
 800269a:	f7ff fba3 	bl	8001de4 <Max30102_GetHeartRate>
 800269e:	4606      	mov	r6, r0
 80026a0:	f7ff fba6 	bl	8001df0 <Max30102_GetSpO2Value>
 80026a4:	4632      	mov	r2, r6
 80026a6:	4603      	mov	r3, r0
 80026a8:	4629      	mov	r1, r5
 80026aa:	4620      	mov	r0, r4
 80026ac:	f000 f932 	bl	8002914 <siprintf>
	UART2_SendString(UartBuffer);
 80026b0:	4620      	mov	r0, r4
 80026b2:	f7ff ffa3 	bl	80025fc <UART2_SendString>
 80026b6:	e7ee      	b.n	8002696 <main+0x36>
 80026b8:	0800328a 	.word	0x0800328a
 80026bc:	20002ae0 	.word	0x20002ae0
 80026c0:	08003292 	.word	0x08003292
 80026c4:	20002b34 	.word	0x20002b34

080026c8 <HAL_GPIO_EXTI_Callback>:
}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	if (GPIO_Pin == INT_Pin) {
 80026c8:	2820      	cmp	r0, #32
 80026ca:	d101      	bne.n	80026d0 <HAL_GPIO_EXTI_Callback+0x8>
		Max30102_InterruptCallback();
 80026cc:	f7ff ba06 	b.w	8001adc <Max30102_InterruptCallback>
 80026d0:	4770      	bx	lr

080026d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026d2:	4770      	bx	lr

080026d4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026d4:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <HAL_MspInit+0x3c>)
{
 80026d6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80026d8:	699a      	ldr	r2, [r3, #24]
 80026da:	f042 0201 	orr.w	r2, r2, #1
 80026de:	619a      	str	r2, [r3, #24]
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	f002 0201 	and.w	r2, r2, #1
 80026e6:	9200      	str	r2, [sp, #0]
 80026e8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ea:	69da      	ldr	r2, [r3, #28]
 80026ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026f0:	61da      	str	r2, [r3, #28]
 80026f2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80026f4:	4a07      	ldr	r2, [pc, #28]	; (8002714 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fa:	9301      	str	r3, [sp, #4]
 80026fc:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80026fe:	6853      	ldr	r3, [r2, #4]
 8002700:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002704:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002708:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800270a:	b002      	add	sp, #8
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40021000 	.word	0x40021000
 8002714:	40010000 	.word	0x40010000

08002718 <NMI_Handler>:
 8002718:	4770      	bx	lr

0800271a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800271a:	e7fe      	b.n	800271a <HardFault_Handler>

0800271c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800271c:	e7fe      	b.n	800271c <MemManage_Handler>

0800271e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800271e:	e7fe      	b.n	800271e <BusFault_Handler>

08002720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002720:	e7fe      	b.n	8002720 <UsageFault_Handler>

08002722 <SVC_Handler>:
 8002722:	4770      	bx	lr

08002724 <DebugMon_Handler>:
 8002724:	4770      	bx	lr

08002726 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002726:	4770      	bx	lr

08002728 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002728:	f7fd bfd2 	b.w	80006d0 <HAL_IncTick>

0800272c <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800272c:	2020      	movs	r0, #32
 800272e:	f7fe b92f 	b.w	8000990 <HAL_GPIO_EXTI_IRQHandler>
	...

08002734 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002734:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002736:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <_sbrk+0x2c>)
{
 8002738:	4602      	mov	r2, r0
	if (heap_end == 0)
 800273a:	6819      	ldr	r1, [r3, #0]
 800273c:	b909      	cbnz	r1, 8002742 <_sbrk+0xe>
		heap_end = &end;
 800273e:	4909      	ldr	r1, [pc, #36]	; (8002764 <_sbrk+0x30>)
 8002740:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002742:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8002744:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002746:	4402      	add	r2, r0
 8002748:	428a      	cmp	r2, r1
 800274a:	d906      	bls.n	800275a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800274c:	f000 f8b0 	bl	80028b0 <__errno>
 8002750:	230c      	movs	r3, #12
 8002752:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002758:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800275a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800275c:	bd08      	pop	{r3, pc}
 800275e:	bf00      	nop
 8002760:	200017ec 	.word	0x200017ec
 8002764:	20002b98 	.word	0x20002b98

08002768 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002768:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <SystemInit+0x40>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	f042 0201 	orr.w	r2, r2, #1
 8002770:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002772:	6859      	ldr	r1, [r3, #4]
 8002774:	4a0d      	ldr	r2, [pc, #52]	; (80027ac <SystemInit+0x44>)
 8002776:	400a      	ands	r2, r1
 8002778:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002780:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002784:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800278c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002794:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002796:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800279a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800279c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027a0:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <SystemInit+0x48>)
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000
 80027ac:	f8ff0000 	.word	0xf8ff0000
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80027b4:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 80027b6:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Instance = USART1;
 80027ba:	480a      	ldr	r0, [pc, #40]	; (80027e4 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 80027bc:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <MX_USART1_UART_Init+0x34>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027be:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 80027c0:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027c4:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027c6:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027c8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027ca:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027cc:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ce:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027d0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027d2:	f7ff f849 	bl	8001868 <HAL_UART_Init>
 80027d6:	b118      	cbz	r0, 80027e0 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80027d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80027dc:	f7ff bf79 	b.w	80026d2 <Error_Handler>
 80027e0:	bd08      	pop	{r3, pc}
 80027e2:	bf00      	nop
 80027e4:	20002b54 	.word	0x20002b54
 80027e8:	40013800 	.word	0x40013800

080027ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027ec:	b510      	push	{r4, lr}
 80027ee:	4604      	mov	r4, r0
 80027f0:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f2:	2210      	movs	r2, #16
 80027f4:	2100      	movs	r1, #0
 80027f6:	a802      	add	r0, sp, #8
 80027f8:	f000 f884 	bl	8002904 <memset>
  if(uartHandle->Instance==USART1)
 80027fc:	6822      	ldr	r2, [r4, #0]
 80027fe:	4b17      	ldr	r3, [pc, #92]	; (800285c <HAL_UART_MspInit+0x70>)
 8002800:	429a      	cmp	r2, r3
 8002802:	d128      	bne.n	8002856 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002804:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002808:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280a:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 800280c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002810:	619a      	str	r2, [r3, #24]
 8002812:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002814:	4812      	ldr	r0, [pc, #72]	; (8002860 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002816:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800281a:	9200      	str	r2, [sp, #0]
 800281c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281e:	699a      	ldr	r2, [r3, #24]
 8002820:	f042 0204 	orr.w	r2, r2, #4
 8002824:	619a      	str	r2, [r3, #24]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	9301      	str	r3, [sp, #4]
 800282e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002830:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002834:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002836:	2302      	movs	r3, #2
 8002838:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800283a:	2303      	movs	r3, #3
 800283c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283e:	f7fd ffc1 	bl	80007c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002846:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002848:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284a:	a902      	add	r1, sp, #8
 800284c:	4804      	ldr	r0, [pc, #16]	; (8002860 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800284e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002852:	f7fd ffb7 	bl	80007c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002856:	b006      	add	sp, #24
 8002858:	bd10      	pop	{r4, pc}
 800285a:	bf00      	nop
 800285c:	40013800 	.word	0x40013800
 8002860:	40010800 	.word	0x40010800

08002864 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002864:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002866:	e003      	b.n	8002870 <LoopCopyDataInit>

08002868 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800286a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800286c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800286e:	3104      	adds	r1, #4

08002870 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002870:	480a      	ldr	r0, [pc, #40]	; (800289c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002872:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002874:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002876:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002878:	d3f6      	bcc.n	8002868 <CopyDataInit>
  ldr r2, =_sbss
 800287a:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800287c:	e002      	b.n	8002884 <LoopFillZerobss>

0800287e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800287e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002880:	f842 3b04 	str.w	r3, [r2], #4

08002884 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002884:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002886:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002888:	d3f9      	bcc.n	800287e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800288a:	f7ff ff6d 	bl	8002768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800288e:	f000 f815 	bl	80028bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002892:	f7ff fee5 	bl	8002660 <main>
  bx lr
 8002896:	4770      	bx	lr
  ldr r3, =_sidata
 8002898:	080032fc 	.word	0x080032fc
  ldr r0, =_sdata
 800289c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80028a0:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80028a4:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80028a8:	20002b98 	.word	0x20002b98

080028ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028ac:	e7fe      	b.n	80028ac <ADC1_2_IRQHandler>
	...

080028b0 <__errno>:
 80028b0:	4b01      	ldr	r3, [pc, #4]	; (80028b8 <__errno+0x8>)
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	2000000c 	.word	0x2000000c

080028bc <__libc_init_array>:
 80028bc:	b570      	push	{r4, r5, r6, lr}
 80028be:	2500      	movs	r5, #0
 80028c0:	4e0c      	ldr	r6, [pc, #48]	; (80028f4 <__libc_init_array+0x38>)
 80028c2:	4c0d      	ldr	r4, [pc, #52]	; (80028f8 <__libc_init_array+0x3c>)
 80028c4:	1ba4      	subs	r4, r4, r6
 80028c6:	10a4      	asrs	r4, r4, #2
 80028c8:	42a5      	cmp	r5, r4
 80028ca:	d109      	bne.n	80028e0 <__libc_init_array+0x24>
 80028cc:	f000 fc4e 	bl	800316c <_init>
 80028d0:	2500      	movs	r5, #0
 80028d2:	4e0a      	ldr	r6, [pc, #40]	; (80028fc <__libc_init_array+0x40>)
 80028d4:	4c0a      	ldr	r4, [pc, #40]	; (8002900 <__libc_init_array+0x44>)
 80028d6:	1ba4      	subs	r4, r4, r6
 80028d8:	10a4      	asrs	r4, r4, #2
 80028da:	42a5      	cmp	r5, r4
 80028dc:	d105      	bne.n	80028ea <__libc_init_array+0x2e>
 80028de:	bd70      	pop	{r4, r5, r6, pc}
 80028e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028e4:	4798      	blx	r3
 80028e6:	3501      	adds	r5, #1
 80028e8:	e7ee      	b.n	80028c8 <__libc_init_array+0xc>
 80028ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028ee:	4798      	blx	r3
 80028f0:	3501      	adds	r5, #1
 80028f2:	e7f2      	b.n	80028da <__libc_init_array+0x1e>
 80028f4:	080032f4 	.word	0x080032f4
 80028f8:	080032f4 	.word	0x080032f4
 80028fc:	080032f4 	.word	0x080032f4
 8002900:	080032f8 	.word	0x080032f8

08002904 <memset>:
 8002904:	4603      	mov	r3, r0
 8002906:	4402      	add	r2, r0
 8002908:	4293      	cmp	r3, r2
 800290a:	d100      	bne.n	800290e <memset+0xa>
 800290c:	4770      	bx	lr
 800290e:	f803 1b01 	strb.w	r1, [r3], #1
 8002912:	e7f9      	b.n	8002908 <memset+0x4>

08002914 <siprintf>:
 8002914:	b40e      	push	{r1, r2, r3}
 8002916:	f44f 7102 	mov.w	r1, #520	; 0x208
 800291a:	b500      	push	{lr}
 800291c:	b09c      	sub	sp, #112	; 0x70
 800291e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002922:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002926:	9104      	str	r1, [sp, #16]
 8002928:	9107      	str	r1, [sp, #28]
 800292a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800292e:	ab1d      	add	r3, sp, #116	; 0x74
 8002930:	9002      	str	r0, [sp, #8]
 8002932:	9006      	str	r0, [sp, #24]
 8002934:	4808      	ldr	r0, [pc, #32]	; (8002958 <siprintf+0x44>)
 8002936:	f853 2b04 	ldr.w	r2, [r3], #4
 800293a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800293e:	6800      	ldr	r0, [r0, #0]
 8002940:	a902      	add	r1, sp, #8
 8002942:	9301      	str	r3, [sp, #4]
 8002944:	f000 f866 	bl	8002a14 <_svfiprintf_r>
 8002948:	2200      	movs	r2, #0
 800294a:	9b02      	ldr	r3, [sp, #8]
 800294c:	701a      	strb	r2, [r3, #0]
 800294e:	b01c      	add	sp, #112	; 0x70
 8002950:	f85d eb04 	ldr.w	lr, [sp], #4
 8002954:	b003      	add	sp, #12
 8002956:	4770      	bx	lr
 8002958:	2000000c 	.word	0x2000000c

0800295c <__ssputs_r>:
 800295c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002960:	688e      	ldr	r6, [r1, #8]
 8002962:	4682      	mov	sl, r0
 8002964:	429e      	cmp	r6, r3
 8002966:	460c      	mov	r4, r1
 8002968:	4691      	mov	r9, r2
 800296a:	4698      	mov	r8, r3
 800296c:	d835      	bhi.n	80029da <__ssputs_r+0x7e>
 800296e:	898a      	ldrh	r2, [r1, #12]
 8002970:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002974:	d031      	beq.n	80029da <__ssputs_r+0x7e>
 8002976:	2302      	movs	r3, #2
 8002978:	6825      	ldr	r5, [r4, #0]
 800297a:	6909      	ldr	r1, [r1, #16]
 800297c:	1a6f      	subs	r7, r5, r1
 800297e:	6965      	ldr	r5, [r4, #20]
 8002980:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002984:	fb95 f5f3 	sdiv	r5, r5, r3
 8002988:	f108 0301 	add.w	r3, r8, #1
 800298c:	443b      	add	r3, r7
 800298e:	429d      	cmp	r5, r3
 8002990:	bf38      	it	cc
 8002992:	461d      	movcc	r5, r3
 8002994:	0553      	lsls	r3, r2, #21
 8002996:	d531      	bpl.n	80029fc <__ssputs_r+0xa0>
 8002998:	4629      	mov	r1, r5
 800299a:	f000 fb47 	bl	800302c <_malloc_r>
 800299e:	4606      	mov	r6, r0
 80029a0:	b950      	cbnz	r0, 80029b8 <__ssputs_r+0x5c>
 80029a2:	230c      	movs	r3, #12
 80029a4:	f8ca 3000 	str.w	r3, [sl]
 80029a8:	89a3      	ldrh	r3, [r4, #12]
 80029aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029b2:	81a3      	strh	r3, [r4, #12]
 80029b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029b8:	463a      	mov	r2, r7
 80029ba:	6921      	ldr	r1, [r4, #16]
 80029bc:	f000 fac4 	bl	8002f48 <memcpy>
 80029c0:	89a3      	ldrh	r3, [r4, #12]
 80029c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80029c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ca:	81a3      	strh	r3, [r4, #12]
 80029cc:	6126      	str	r6, [r4, #16]
 80029ce:	443e      	add	r6, r7
 80029d0:	6026      	str	r6, [r4, #0]
 80029d2:	4646      	mov	r6, r8
 80029d4:	6165      	str	r5, [r4, #20]
 80029d6:	1bed      	subs	r5, r5, r7
 80029d8:	60a5      	str	r5, [r4, #8]
 80029da:	4546      	cmp	r6, r8
 80029dc:	bf28      	it	cs
 80029de:	4646      	movcs	r6, r8
 80029e0:	4649      	mov	r1, r9
 80029e2:	4632      	mov	r2, r6
 80029e4:	6820      	ldr	r0, [r4, #0]
 80029e6:	f000 faba 	bl	8002f5e <memmove>
 80029ea:	68a3      	ldr	r3, [r4, #8]
 80029ec:	2000      	movs	r0, #0
 80029ee:	1b9b      	subs	r3, r3, r6
 80029f0:	60a3      	str	r3, [r4, #8]
 80029f2:	6823      	ldr	r3, [r4, #0]
 80029f4:	441e      	add	r6, r3
 80029f6:	6026      	str	r6, [r4, #0]
 80029f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029fc:	462a      	mov	r2, r5
 80029fe:	f000 fb73 	bl	80030e8 <_realloc_r>
 8002a02:	4606      	mov	r6, r0
 8002a04:	2800      	cmp	r0, #0
 8002a06:	d1e1      	bne.n	80029cc <__ssputs_r+0x70>
 8002a08:	6921      	ldr	r1, [r4, #16]
 8002a0a:	4650      	mov	r0, sl
 8002a0c:	f000 fac2 	bl	8002f94 <_free_r>
 8002a10:	e7c7      	b.n	80029a2 <__ssputs_r+0x46>
	...

08002a14 <_svfiprintf_r>:
 8002a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a18:	b09d      	sub	sp, #116	; 0x74
 8002a1a:	9303      	str	r3, [sp, #12]
 8002a1c:	898b      	ldrh	r3, [r1, #12]
 8002a1e:	4680      	mov	r8, r0
 8002a20:	061c      	lsls	r4, r3, #24
 8002a22:	460d      	mov	r5, r1
 8002a24:	4616      	mov	r6, r2
 8002a26:	d50f      	bpl.n	8002a48 <_svfiprintf_r+0x34>
 8002a28:	690b      	ldr	r3, [r1, #16]
 8002a2a:	b96b      	cbnz	r3, 8002a48 <_svfiprintf_r+0x34>
 8002a2c:	2140      	movs	r1, #64	; 0x40
 8002a2e:	f000 fafd 	bl	800302c <_malloc_r>
 8002a32:	6028      	str	r0, [r5, #0]
 8002a34:	6128      	str	r0, [r5, #16]
 8002a36:	b928      	cbnz	r0, 8002a44 <_svfiprintf_r+0x30>
 8002a38:	230c      	movs	r3, #12
 8002a3a:	f8c8 3000 	str.w	r3, [r8]
 8002a3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a42:	e0c4      	b.n	8002bce <_svfiprintf_r+0x1ba>
 8002a44:	2340      	movs	r3, #64	; 0x40
 8002a46:	616b      	str	r3, [r5, #20]
 8002a48:	2300      	movs	r3, #0
 8002a4a:	9309      	str	r3, [sp, #36]	; 0x24
 8002a4c:	2320      	movs	r3, #32
 8002a4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a52:	2330      	movs	r3, #48	; 0x30
 8002a54:	f04f 0b01 	mov.w	fp, #1
 8002a58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a5c:	4637      	mov	r7, r6
 8002a5e:	463c      	mov	r4, r7
 8002a60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d13c      	bne.n	8002ae2 <_svfiprintf_r+0xce>
 8002a68:	ebb7 0a06 	subs.w	sl, r7, r6
 8002a6c:	d00b      	beq.n	8002a86 <_svfiprintf_r+0x72>
 8002a6e:	4653      	mov	r3, sl
 8002a70:	4632      	mov	r2, r6
 8002a72:	4629      	mov	r1, r5
 8002a74:	4640      	mov	r0, r8
 8002a76:	f7ff ff71 	bl	800295c <__ssputs_r>
 8002a7a:	3001      	adds	r0, #1
 8002a7c:	f000 80a2 	beq.w	8002bc4 <_svfiprintf_r+0x1b0>
 8002a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a82:	4453      	add	r3, sl
 8002a84:	9309      	str	r3, [sp, #36]	; 0x24
 8002a86:	783b      	ldrb	r3, [r7, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 809b 	beq.w	8002bc4 <_svfiprintf_r+0x1b0>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a94:	9304      	str	r3, [sp, #16]
 8002a96:	9307      	str	r3, [sp, #28]
 8002a98:	9205      	str	r2, [sp, #20]
 8002a9a:	9306      	str	r3, [sp, #24]
 8002a9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002aa0:	931a      	str	r3, [sp, #104]	; 0x68
 8002aa2:	2205      	movs	r2, #5
 8002aa4:	7821      	ldrb	r1, [r4, #0]
 8002aa6:	4850      	ldr	r0, [pc, #320]	; (8002be8 <_svfiprintf_r+0x1d4>)
 8002aa8:	f000 fa40 	bl	8002f2c <memchr>
 8002aac:	1c67      	adds	r7, r4, #1
 8002aae:	9b04      	ldr	r3, [sp, #16]
 8002ab0:	b9d8      	cbnz	r0, 8002aea <_svfiprintf_r+0xd6>
 8002ab2:	06d9      	lsls	r1, r3, #27
 8002ab4:	bf44      	itt	mi
 8002ab6:	2220      	movmi	r2, #32
 8002ab8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002abc:	071a      	lsls	r2, r3, #28
 8002abe:	bf44      	itt	mi
 8002ac0:	222b      	movmi	r2, #43	; 0x2b
 8002ac2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ac6:	7822      	ldrb	r2, [r4, #0]
 8002ac8:	2a2a      	cmp	r2, #42	; 0x2a
 8002aca:	d016      	beq.n	8002afa <_svfiprintf_r+0xe6>
 8002acc:	2100      	movs	r1, #0
 8002ace:	200a      	movs	r0, #10
 8002ad0:	9a07      	ldr	r2, [sp, #28]
 8002ad2:	4627      	mov	r7, r4
 8002ad4:	783b      	ldrb	r3, [r7, #0]
 8002ad6:	3401      	adds	r4, #1
 8002ad8:	3b30      	subs	r3, #48	; 0x30
 8002ada:	2b09      	cmp	r3, #9
 8002adc:	d950      	bls.n	8002b80 <_svfiprintf_r+0x16c>
 8002ade:	b1c9      	cbz	r1, 8002b14 <_svfiprintf_r+0x100>
 8002ae0:	e011      	b.n	8002b06 <_svfiprintf_r+0xf2>
 8002ae2:	2b25      	cmp	r3, #37	; 0x25
 8002ae4:	d0c0      	beq.n	8002a68 <_svfiprintf_r+0x54>
 8002ae6:	4627      	mov	r7, r4
 8002ae8:	e7b9      	b.n	8002a5e <_svfiprintf_r+0x4a>
 8002aea:	4a3f      	ldr	r2, [pc, #252]	; (8002be8 <_svfiprintf_r+0x1d4>)
 8002aec:	463c      	mov	r4, r7
 8002aee:	1a80      	subs	r0, r0, r2
 8002af0:	fa0b f000 	lsl.w	r0, fp, r0
 8002af4:	4318      	orrs	r0, r3
 8002af6:	9004      	str	r0, [sp, #16]
 8002af8:	e7d3      	b.n	8002aa2 <_svfiprintf_r+0x8e>
 8002afa:	9a03      	ldr	r2, [sp, #12]
 8002afc:	1d11      	adds	r1, r2, #4
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	9103      	str	r1, [sp, #12]
 8002b02:	2a00      	cmp	r2, #0
 8002b04:	db01      	blt.n	8002b0a <_svfiprintf_r+0xf6>
 8002b06:	9207      	str	r2, [sp, #28]
 8002b08:	e004      	b.n	8002b14 <_svfiprintf_r+0x100>
 8002b0a:	4252      	negs	r2, r2
 8002b0c:	f043 0302 	orr.w	r3, r3, #2
 8002b10:	9207      	str	r2, [sp, #28]
 8002b12:	9304      	str	r3, [sp, #16]
 8002b14:	783b      	ldrb	r3, [r7, #0]
 8002b16:	2b2e      	cmp	r3, #46	; 0x2e
 8002b18:	d10d      	bne.n	8002b36 <_svfiprintf_r+0x122>
 8002b1a:	787b      	ldrb	r3, [r7, #1]
 8002b1c:	1c79      	adds	r1, r7, #1
 8002b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8002b20:	d132      	bne.n	8002b88 <_svfiprintf_r+0x174>
 8002b22:	9b03      	ldr	r3, [sp, #12]
 8002b24:	3702      	adds	r7, #2
 8002b26:	1d1a      	adds	r2, r3, #4
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	9203      	str	r2, [sp, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	bfb8      	it	lt
 8002b30:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002b34:	9305      	str	r3, [sp, #20]
 8002b36:	4c2d      	ldr	r4, [pc, #180]	; (8002bec <_svfiprintf_r+0x1d8>)
 8002b38:	2203      	movs	r2, #3
 8002b3a:	7839      	ldrb	r1, [r7, #0]
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	f000 f9f5 	bl	8002f2c <memchr>
 8002b42:	b138      	cbz	r0, 8002b54 <_svfiprintf_r+0x140>
 8002b44:	2340      	movs	r3, #64	; 0x40
 8002b46:	1b00      	subs	r0, r0, r4
 8002b48:	fa03 f000 	lsl.w	r0, r3, r0
 8002b4c:	9b04      	ldr	r3, [sp, #16]
 8002b4e:	3701      	adds	r7, #1
 8002b50:	4303      	orrs	r3, r0
 8002b52:	9304      	str	r3, [sp, #16]
 8002b54:	7839      	ldrb	r1, [r7, #0]
 8002b56:	2206      	movs	r2, #6
 8002b58:	4825      	ldr	r0, [pc, #148]	; (8002bf0 <_svfiprintf_r+0x1dc>)
 8002b5a:	1c7e      	adds	r6, r7, #1
 8002b5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b60:	f000 f9e4 	bl	8002f2c <memchr>
 8002b64:	2800      	cmp	r0, #0
 8002b66:	d035      	beq.n	8002bd4 <_svfiprintf_r+0x1c0>
 8002b68:	4b22      	ldr	r3, [pc, #136]	; (8002bf4 <_svfiprintf_r+0x1e0>)
 8002b6a:	b9fb      	cbnz	r3, 8002bac <_svfiprintf_r+0x198>
 8002b6c:	9b03      	ldr	r3, [sp, #12]
 8002b6e:	3307      	adds	r3, #7
 8002b70:	f023 0307 	bic.w	r3, r3, #7
 8002b74:	3308      	adds	r3, #8
 8002b76:	9303      	str	r3, [sp, #12]
 8002b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b7a:	444b      	add	r3, r9
 8002b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8002b7e:	e76d      	b.n	8002a5c <_svfiprintf_r+0x48>
 8002b80:	fb00 3202 	mla	r2, r0, r2, r3
 8002b84:	2101      	movs	r1, #1
 8002b86:	e7a4      	b.n	8002ad2 <_svfiprintf_r+0xbe>
 8002b88:	2300      	movs	r3, #0
 8002b8a:	240a      	movs	r4, #10
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	9305      	str	r3, [sp, #20]
 8002b90:	460f      	mov	r7, r1
 8002b92:	783a      	ldrb	r2, [r7, #0]
 8002b94:	3101      	adds	r1, #1
 8002b96:	3a30      	subs	r2, #48	; 0x30
 8002b98:	2a09      	cmp	r2, #9
 8002b9a:	d903      	bls.n	8002ba4 <_svfiprintf_r+0x190>
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0ca      	beq.n	8002b36 <_svfiprintf_r+0x122>
 8002ba0:	9005      	str	r0, [sp, #20]
 8002ba2:	e7c8      	b.n	8002b36 <_svfiprintf_r+0x122>
 8002ba4:	fb04 2000 	mla	r0, r4, r0, r2
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e7f1      	b.n	8002b90 <_svfiprintf_r+0x17c>
 8002bac:	ab03      	add	r3, sp, #12
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	462a      	mov	r2, r5
 8002bb2:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <_svfiprintf_r+0x1e4>)
 8002bb4:	a904      	add	r1, sp, #16
 8002bb6:	4640      	mov	r0, r8
 8002bb8:	f3af 8000 	nop.w
 8002bbc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002bc0:	4681      	mov	r9, r0
 8002bc2:	d1d9      	bne.n	8002b78 <_svfiprintf_r+0x164>
 8002bc4:	89ab      	ldrh	r3, [r5, #12]
 8002bc6:	065b      	lsls	r3, r3, #25
 8002bc8:	f53f af39 	bmi.w	8002a3e <_svfiprintf_r+0x2a>
 8002bcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002bce:	b01d      	add	sp, #116	; 0x74
 8002bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bd4:	ab03      	add	r3, sp, #12
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	462a      	mov	r2, r5
 8002bda:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <_svfiprintf_r+0x1e4>)
 8002bdc:	a904      	add	r1, sp, #16
 8002bde:	4640      	mov	r0, r8
 8002be0:	f000 f884 	bl	8002cec <_printf_i>
 8002be4:	e7ea      	b.n	8002bbc <_svfiprintf_r+0x1a8>
 8002be6:	bf00      	nop
 8002be8:	080032bf 	.word	0x080032bf
 8002bec:	080032c5 	.word	0x080032c5
 8002bf0:	080032c9 	.word	0x080032c9
 8002bf4:	00000000 	.word	0x00000000
 8002bf8:	0800295d 	.word	0x0800295d

08002bfc <_printf_common>:
 8002bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c00:	4691      	mov	r9, r2
 8002c02:	461f      	mov	r7, r3
 8002c04:	688a      	ldr	r2, [r1, #8]
 8002c06:	690b      	ldr	r3, [r1, #16]
 8002c08:	4606      	mov	r6, r0
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	bfb8      	it	lt
 8002c0e:	4613      	movlt	r3, r2
 8002c10:	f8c9 3000 	str.w	r3, [r9]
 8002c14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c18:	460c      	mov	r4, r1
 8002c1a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c1e:	b112      	cbz	r2, 8002c26 <_printf_common+0x2a>
 8002c20:	3301      	adds	r3, #1
 8002c22:	f8c9 3000 	str.w	r3, [r9]
 8002c26:	6823      	ldr	r3, [r4, #0]
 8002c28:	0699      	lsls	r1, r3, #26
 8002c2a:	bf42      	ittt	mi
 8002c2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002c30:	3302      	addmi	r3, #2
 8002c32:	f8c9 3000 	strmi.w	r3, [r9]
 8002c36:	6825      	ldr	r5, [r4, #0]
 8002c38:	f015 0506 	ands.w	r5, r5, #6
 8002c3c:	d107      	bne.n	8002c4e <_printf_common+0x52>
 8002c3e:	f104 0a19 	add.w	sl, r4, #25
 8002c42:	68e3      	ldr	r3, [r4, #12]
 8002c44:	f8d9 2000 	ldr.w	r2, [r9]
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	429d      	cmp	r5, r3
 8002c4c:	db2a      	blt.n	8002ca4 <_printf_common+0xa8>
 8002c4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002c52:	6822      	ldr	r2, [r4, #0]
 8002c54:	3300      	adds	r3, #0
 8002c56:	bf18      	it	ne
 8002c58:	2301      	movne	r3, #1
 8002c5a:	0692      	lsls	r2, r2, #26
 8002c5c:	d42f      	bmi.n	8002cbe <_printf_common+0xc2>
 8002c5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c62:	4639      	mov	r1, r7
 8002c64:	4630      	mov	r0, r6
 8002c66:	47c0      	blx	r8
 8002c68:	3001      	adds	r0, #1
 8002c6a:	d022      	beq.n	8002cb2 <_printf_common+0xb6>
 8002c6c:	6823      	ldr	r3, [r4, #0]
 8002c6e:	68e5      	ldr	r5, [r4, #12]
 8002c70:	f003 0306 	and.w	r3, r3, #6
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	bf18      	it	ne
 8002c78:	2500      	movne	r5, #0
 8002c7a:	f8d9 2000 	ldr.w	r2, [r9]
 8002c7e:	f04f 0900 	mov.w	r9, #0
 8002c82:	bf08      	it	eq
 8002c84:	1aad      	subeq	r5, r5, r2
 8002c86:	68a3      	ldr	r3, [r4, #8]
 8002c88:	6922      	ldr	r2, [r4, #16]
 8002c8a:	bf08      	it	eq
 8002c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c90:	4293      	cmp	r3, r2
 8002c92:	bfc4      	itt	gt
 8002c94:	1a9b      	subgt	r3, r3, r2
 8002c96:	18ed      	addgt	r5, r5, r3
 8002c98:	341a      	adds	r4, #26
 8002c9a:	454d      	cmp	r5, r9
 8002c9c:	d11b      	bne.n	8002cd6 <_printf_common+0xda>
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	4652      	mov	r2, sl
 8002ca8:	4639      	mov	r1, r7
 8002caa:	4630      	mov	r0, r6
 8002cac:	47c0      	blx	r8
 8002cae:	3001      	adds	r0, #1
 8002cb0:	d103      	bne.n	8002cba <_printf_common+0xbe>
 8002cb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cba:	3501      	adds	r5, #1
 8002cbc:	e7c1      	b.n	8002c42 <_printf_common+0x46>
 8002cbe:	2030      	movs	r0, #48	; 0x30
 8002cc0:	18e1      	adds	r1, r4, r3
 8002cc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ccc:	4422      	add	r2, r4
 8002cce:	3302      	adds	r3, #2
 8002cd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002cd4:	e7c3      	b.n	8002c5e <_printf_common+0x62>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	4622      	mov	r2, r4
 8002cda:	4639      	mov	r1, r7
 8002cdc:	4630      	mov	r0, r6
 8002cde:	47c0      	blx	r8
 8002ce0:	3001      	adds	r0, #1
 8002ce2:	d0e6      	beq.n	8002cb2 <_printf_common+0xb6>
 8002ce4:	f109 0901 	add.w	r9, r9, #1
 8002ce8:	e7d7      	b.n	8002c9a <_printf_common+0x9e>
	...

08002cec <_printf_i>:
 8002cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002cf0:	4617      	mov	r7, r2
 8002cf2:	7e0a      	ldrb	r2, [r1, #24]
 8002cf4:	b085      	sub	sp, #20
 8002cf6:	2a6e      	cmp	r2, #110	; 0x6e
 8002cf8:	4698      	mov	r8, r3
 8002cfa:	4606      	mov	r6, r0
 8002cfc:	460c      	mov	r4, r1
 8002cfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d00:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002d04:	f000 80bc 	beq.w	8002e80 <_printf_i+0x194>
 8002d08:	d81a      	bhi.n	8002d40 <_printf_i+0x54>
 8002d0a:	2a63      	cmp	r2, #99	; 0x63
 8002d0c:	d02e      	beq.n	8002d6c <_printf_i+0x80>
 8002d0e:	d80a      	bhi.n	8002d26 <_printf_i+0x3a>
 8002d10:	2a00      	cmp	r2, #0
 8002d12:	f000 80c8 	beq.w	8002ea6 <_printf_i+0x1ba>
 8002d16:	2a58      	cmp	r2, #88	; 0x58
 8002d18:	f000 808a 	beq.w	8002e30 <_printf_i+0x144>
 8002d1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d20:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002d24:	e02a      	b.n	8002d7c <_printf_i+0x90>
 8002d26:	2a64      	cmp	r2, #100	; 0x64
 8002d28:	d001      	beq.n	8002d2e <_printf_i+0x42>
 8002d2a:	2a69      	cmp	r2, #105	; 0x69
 8002d2c:	d1f6      	bne.n	8002d1c <_printf_i+0x30>
 8002d2e:	6821      	ldr	r1, [r4, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002d36:	d023      	beq.n	8002d80 <_printf_i+0x94>
 8002d38:	1d11      	adds	r1, r2, #4
 8002d3a:	6019      	str	r1, [r3, #0]
 8002d3c:	6813      	ldr	r3, [r2, #0]
 8002d3e:	e027      	b.n	8002d90 <_printf_i+0xa4>
 8002d40:	2a73      	cmp	r2, #115	; 0x73
 8002d42:	f000 80b4 	beq.w	8002eae <_printf_i+0x1c2>
 8002d46:	d808      	bhi.n	8002d5a <_printf_i+0x6e>
 8002d48:	2a6f      	cmp	r2, #111	; 0x6f
 8002d4a:	d02a      	beq.n	8002da2 <_printf_i+0xb6>
 8002d4c:	2a70      	cmp	r2, #112	; 0x70
 8002d4e:	d1e5      	bne.n	8002d1c <_printf_i+0x30>
 8002d50:	680a      	ldr	r2, [r1, #0]
 8002d52:	f042 0220 	orr.w	r2, r2, #32
 8002d56:	600a      	str	r2, [r1, #0]
 8002d58:	e003      	b.n	8002d62 <_printf_i+0x76>
 8002d5a:	2a75      	cmp	r2, #117	; 0x75
 8002d5c:	d021      	beq.n	8002da2 <_printf_i+0xb6>
 8002d5e:	2a78      	cmp	r2, #120	; 0x78
 8002d60:	d1dc      	bne.n	8002d1c <_printf_i+0x30>
 8002d62:	2278      	movs	r2, #120	; 0x78
 8002d64:	496f      	ldr	r1, [pc, #444]	; (8002f24 <_printf_i+0x238>)
 8002d66:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002d6a:	e064      	b.n	8002e36 <_printf_i+0x14a>
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002d72:	1d11      	adds	r1, r2, #4
 8002d74:	6019      	str	r1, [r3, #0]
 8002d76:	6813      	ldr	r3, [r2, #0]
 8002d78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0a3      	b.n	8002ec8 <_printf_i+0x1dc>
 8002d80:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002d84:	f102 0104 	add.w	r1, r2, #4
 8002d88:	6019      	str	r1, [r3, #0]
 8002d8a:	d0d7      	beq.n	8002d3c <_printf_i+0x50>
 8002d8c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	da03      	bge.n	8002d9c <_printf_i+0xb0>
 8002d94:	222d      	movs	r2, #45	; 0x2d
 8002d96:	425b      	negs	r3, r3
 8002d98:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002d9c:	4962      	ldr	r1, [pc, #392]	; (8002f28 <_printf_i+0x23c>)
 8002d9e:	220a      	movs	r2, #10
 8002da0:	e017      	b.n	8002dd2 <_printf_i+0xe6>
 8002da2:	6820      	ldr	r0, [r4, #0]
 8002da4:	6819      	ldr	r1, [r3, #0]
 8002da6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002daa:	d003      	beq.n	8002db4 <_printf_i+0xc8>
 8002dac:	1d08      	adds	r0, r1, #4
 8002dae:	6018      	str	r0, [r3, #0]
 8002db0:	680b      	ldr	r3, [r1, #0]
 8002db2:	e006      	b.n	8002dc2 <_printf_i+0xd6>
 8002db4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002db8:	f101 0004 	add.w	r0, r1, #4
 8002dbc:	6018      	str	r0, [r3, #0]
 8002dbe:	d0f7      	beq.n	8002db0 <_printf_i+0xc4>
 8002dc0:	880b      	ldrh	r3, [r1, #0]
 8002dc2:	2a6f      	cmp	r2, #111	; 0x6f
 8002dc4:	bf14      	ite	ne
 8002dc6:	220a      	movne	r2, #10
 8002dc8:	2208      	moveq	r2, #8
 8002dca:	4957      	ldr	r1, [pc, #348]	; (8002f28 <_printf_i+0x23c>)
 8002dcc:	2000      	movs	r0, #0
 8002dce:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002dd2:	6865      	ldr	r5, [r4, #4]
 8002dd4:	2d00      	cmp	r5, #0
 8002dd6:	60a5      	str	r5, [r4, #8]
 8002dd8:	f2c0 809c 	blt.w	8002f14 <_printf_i+0x228>
 8002ddc:	6820      	ldr	r0, [r4, #0]
 8002dde:	f020 0004 	bic.w	r0, r0, #4
 8002de2:	6020      	str	r0, [r4, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d13f      	bne.n	8002e68 <_printf_i+0x17c>
 8002de8:	2d00      	cmp	r5, #0
 8002dea:	f040 8095 	bne.w	8002f18 <_printf_i+0x22c>
 8002dee:	4675      	mov	r5, lr
 8002df0:	2a08      	cmp	r2, #8
 8002df2:	d10b      	bne.n	8002e0c <_printf_i+0x120>
 8002df4:	6823      	ldr	r3, [r4, #0]
 8002df6:	07da      	lsls	r2, r3, #31
 8002df8:	d508      	bpl.n	8002e0c <_printf_i+0x120>
 8002dfa:	6923      	ldr	r3, [r4, #16]
 8002dfc:	6862      	ldr	r2, [r4, #4]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	bfde      	ittt	le
 8002e02:	2330      	movle	r3, #48	; 0x30
 8002e04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e08:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002e0c:	ebae 0305 	sub.w	r3, lr, r5
 8002e10:	6123      	str	r3, [r4, #16]
 8002e12:	f8cd 8000 	str.w	r8, [sp]
 8002e16:	463b      	mov	r3, r7
 8002e18:	aa03      	add	r2, sp, #12
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	4630      	mov	r0, r6
 8002e1e:	f7ff feed 	bl	8002bfc <_printf_common>
 8002e22:	3001      	adds	r0, #1
 8002e24:	d155      	bne.n	8002ed2 <_printf_i+0x1e6>
 8002e26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e2a:	b005      	add	sp, #20
 8002e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e30:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002e34:	493c      	ldr	r1, [pc, #240]	; (8002f28 <_printf_i+0x23c>)
 8002e36:	6822      	ldr	r2, [r4, #0]
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002e3e:	f100 0504 	add.w	r5, r0, #4
 8002e42:	601d      	str	r5, [r3, #0]
 8002e44:	d001      	beq.n	8002e4a <_printf_i+0x15e>
 8002e46:	6803      	ldr	r3, [r0, #0]
 8002e48:	e002      	b.n	8002e50 <_printf_i+0x164>
 8002e4a:	0655      	lsls	r5, r2, #25
 8002e4c:	d5fb      	bpl.n	8002e46 <_printf_i+0x15a>
 8002e4e:	8803      	ldrh	r3, [r0, #0]
 8002e50:	07d0      	lsls	r0, r2, #31
 8002e52:	bf44      	itt	mi
 8002e54:	f042 0220 	orrmi.w	r2, r2, #32
 8002e58:	6022      	strmi	r2, [r4, #0]
 8002e5a:	b91b      	cbnz	r3, 8002e64 <_printf_i+0x178>
 8002e5c:	6822      	ldr	r2, [r4, #0]
 8002e5e:	f022 0220 	bic.w	r2, r2, #32
 8002e62:	6022      	str	r2, [r4, #0]
 8002e64:	2210      	movs	r2, #16
 8002e66:	e7b1      	b.n	8002dcc <_printf_i+0xe0>
 8002e68:	4675      	mov	r5, lr
 8002e6a:	fbb3 f0f2 	udiv	r0, r3, r2
 8002e6e:	fb02 3310 	mls	r3, r2, r0, r3
 8002e72:	5ccb      	ldrb	r3, [r1, r3]
 8002e74:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2800      	cmp	r0, #0
 8002e7c:	d1f5      	bne.n	8002e6a <_printf_i+0x17e>
 8002e7e:	e7b7      	b.n	8002df0 <_printf_i+0x104>
 8002e80:	6808      	ldr	r0, [r1, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002e88:	6949      	ldr	r1, [r1, #20]
 8002e8a:	d004      	beq.n	8002e96 <_printf_i+0x1aa>
 8002e8c:	1d10      	adds	r0, r2, #4
 8002e8e:	6018      	str	r0, [r3, #0]
 8002e90:	6813      	ldr	r3, [r2, #0]
 8002e92:	6019      	str	r1, [r3, #0]
 8002e94:	e007      	b.n	8002ea6 <_printf_i+0x1ba>
 8002e96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e9a:	f102 0004 	add.w	r0, r2, #4
 8002e9e:	6018      	str	r0, [r3, #0]
 8002ea0:	6813      	ldr	r3, [r2, #0]
 8002ea2:	d0f6      	beq.n	8002e92 <_printf_i+0x1a6>
 8002ea4:	8019      	strh	r1, [r3, #0]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	4675      	mov	r5, lr
 8002eaa:	6123      	str	r3, [r4, #16]
 8002eac:	e7b1      	b.n	8002e12 <_printf_i+0x126>
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	1d11      	adds	r1, r2, #4
 8002eb2:	6019      	str	r1, [r3, #0]
 8002eb4:	6815      	ldr	r5, [r2, #0]
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	6862      	ldr	r2, [r4, #4]
 8002eba:	4628      	mov	r0, r5
 8002ebc:	f000 f836 	bl	8002f2c <memchr>
 8002ec0:	b108      	cbz	r0, 8002ec6 <_printf_i+0x1da>
 8002ec2:	1b40      	subs	r0, r0, r5
 8002ec4:	6060      	str	r0, [r4, #4]
 8002ec6:	6863      	ldr	r3, [r4, #4]
 8002ec8:	6123      	str	r3, [r4, #16]
 8002eca:	2300      	movs	r3, #0
 8002ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ed0:	e79f      	b.n	8002e12 <_printf_i+0x126>
 8002ed2:	6923      	ldr	r3, [r4, #16]
 8002ed4:	462a      	mov	r2, r5
 8002ed6:	4639      	mov	r1, r7
 8002ed8:	4630      	mov	r0, r6
 8002eda:	47c0      	blx	r8
 8002edc:	3001      	adds	r0, #1
 8002ede:	d0a2      	beq.n	8002e26 <_printf_i+0x13a>
 8002ee0:	6823      	ldr	r3, [r4, #0]
 8002ee2:	079b      	lsls	r3, r3, #30
 8002ee4:	d507      	bpl.n	8002ef6 <_printf_i+0x20a>
 8002ee6:	2500      	movs	r5, #0
 8002ee8:	f104 0919 	add.w	r9, r4, #25
 8002eec:	68e3      	ldr	r3, [r4, #12]
 8002eee:	9a03      	ldr	r2, [sp, #12]
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	429d      	cmp	r5, r3
 8002ef4:	db05      	blt.n	8002f02 <_printf_i+0x216>
 8002ef6:	68e0      	ldr	r0, [r4, #12]
 8002ef8:	9b03      	ldr	r3, [sp, #12]
 8002efa:	4298      	cmp	r0, r3
 8002efc:	bfb8      	it	lt
 8002efe:	4618      	movlt	r0, r3
 8002f00:	e793      	b.n	8002e2a <_printf_i+0x13e>
 8002f02:	2301      	movs	r3, #1
 8002f04:	464a      	mov	r2, r9
 8002f06:	4639      	mov	r1, r7
 8002f08:	4630      	mov	r0, r6
 8002f0a:	47c0      	blx	r8
 8002f0c:	3001      	adds	r0, #1
 8002f0e:	d08a      	beq.n	8002e26 <_printf_i+0x13a>
 8002f10:	3501      	adds	r5, #1
 8002f12:	e7eb      	b.n	8002eec <_printf_i+0x200>
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1a7      	bne.n	8002e68 <_printf_i+0x17c>
 8002f18:	780b      	ldrb	r3, [r1, #0]
 8002f1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f22:	e765      	b.n	8002df0 <_printf_i+0x104>
 8002f24:	080032e1 	.word	0x080032e1
 8002f28:	080032d0 	.word	0x080032d0

08002f2c <memchr>:
 8002f2c:	b510      	push	{r4, lr}
 8002f2e:	b2c9      	uxtb	r1, r1
 8002f30:	4402      	add	r2, r0
 8002f32:	4290      	cmp	r0, r2
 8002f34:	4603      	mov	r3, r0
 8002f36:	d101      	bne.n	8002f3c <memchr+0x10>
 8002f38:	2000      	movs	r0, #0
 8002f3a:	bd10      	pop	{r4, pc}
 8002f3c:	781c      	ldrb	r4, [r3, #0]
 8002f3e:	3001      	adds	r0, #1
 8002f40:	428c      	cmp	r4, r1
 8002f42:	d1f6      	bne.n	8002f32 <memchr+0x6>
 8002f44:	4618      	mov	r0, r3
 8002f46:	bd10      	pop	{r4, pc}

08002f48 <memcpy>:
 8002f48:	b510      	push	{r4, lr}
 8002f4a:	1e43      	subs	r3, r0, #1
 8002f4c:	440a      	add	r2, r1
 8002f4e:	4291      	cmp	r1, r2
 8002f50:	d100      	bne.n	8002f54 <memcpy+0xc>
 8002f52:	bd10      	pop	{r4, pc}
 8002f54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f5c:	e7f7      	b.n	8002f4e <memcpy+0x6>

08002f5e <memmove>:
 8002f5e:	4288      	cmp	r0, r1
 8002f60:	b510      	push	{r4, lr}
 8002f62:	eb01 0302 	add.w	r3, r1, r2
 8002f66:	d803      	bhi.n	8002f70 <memmove+0x12>
 8002f68:	1e42      	subs	r2, r0, #1
 8002f6a:	4299      	cmp	r1, r3
 8002f6c:	d10c      	bne.n	8002f88 <memmove+0x2a>
 8002f6e:	bd10      	pop	{r4, pc}
 8002f70:	4298      	cmp	r0, r3
 8002f72:	d2f9      	bcs.n	8002f68 <memmove+0xa>
 8002f74:	1881      	adds	r1, r0, r2
 8002f76:	1ad2      	subs	r2, r2, r3
 8002f78:	42d3      	cmn	r3, r2
 8002f7a:	d100      	bne.n	8002f7e <memmove+0x20>
 8002f7c:	bd10      	pop	{r4, pc}
 8002f7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f82:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002f86:	e7f7      	b.n	8002f78 <memmove+0x1a>
 8002f88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f8c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002f90:	e7eb      	b.n	8002f6a <memmove+0xc>
	...

08002f94 <_free_r>:
 8002f94:	b538      	push	{r3, r4, r5, lr}
 8002f96:	4605      	mov	r5, r0
 8002f98:	2900      	cmp	r1, #0
 8002f9a:	d043      	beq.n	8003024 <_free_r+0x90>
 8002f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fa0:	1f0c      	subs	r4, r1, #4
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	bfb8      	it	lt
 8002fa6:	18e4      	addlt	r4, r4, r3
 8002fa8:	f000 f8d4 	bl	8003154 <__malloc_lock>
 8002fac:	4a1e      	ldr	r2, [pc, #120]	; (8003028 <_free_r+0x94>)
 8002fae:	6813      	ldr	r3, [r2, #0]
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	b933      	cbnz	r3, 8002fc2 <_free_r+0x2e>
 8002fb4:	6063      	str	r3, [r4, #4]
 8002fb6:	6014      	str	r4, [r2, #0]
 8002fb8:	4628      	mov	r0, r5
 8002fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fbe:	f000 b8ca 	b.w	8003156 <__malloc_unlock>
 8002fc2:	42a3      	cmp	r3, r4
 8002fc4:	d90b      	bls.n	8002fde <_free_r+0x4a>
 8002fc6:	6821      	ldr	r1, [r4, #0]
 8002fc8:	1862      	adds	r2, r4, r1
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	bf01      	itttt	eq
 8002fce:	681a      	ldreq	r2, [r3, #0]
 8002fd0:	685b      	ldreq	r3, [r3, #4]
 8002fd2:	1852      	addeq	r2, r2, r1
 8002fd4:	6022      	streq	r2, [r4, #0]
 8002fd6:	6063      	str	r3, [r4, #4]
 8002fd8:	6004      	str	r4, [r0, #0]
 8002fda:	e7ed      	b.n	8002fb8 <_free_r+0x24>
 8002fdc:	4613      	mov	r3, r2
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	b10a      	cbz	r2, 8002fe6 <_free_r+0x52>
 8002fe2:	42a2      	cmp	r2, r4
 8002fe4:	d9fa      	bls.n	8002fdc <_free_r+0x48>
 8002fe6:	6819      	ldr	r1, [r3, #0]
 8002fe8:	1858      	adds	r0, r3, r1
 8002fea:	42a0      	cmp	r0, r4
 8002fec:	d10b      	bne.n	8003006 <_free_r+0x72>
 8002fee:	6820      	ldr	r0, [r4, #0]
 8002ff0:	4401      	add	r1, r0
 8002ff2:	1858      	adds	r0, r3, r1
 8002ff4:	4282      	cmp	r2, r0
 8002ff6:	6019      	str	r1, [r3, #0]
 8002ff8:	d1de      	bne.n	8002fb8 <_free_r+0x24>
 8002ffa:	6810      	ldr	r0, [r2, #0]
 8002ffc:	6852      	ldr	r2, [r2, #4]
 8002ffe:	4401      	add	r1, r0
 8003000:	6019      	str	r1, [r3, #0]
 8003002:	605a      	str	r2, [r3, #4]
 8003004:	e7d8      	b.n	8002fb8 <_free_r+0x24>
 8003006:	d902      	bls.n	800300e <_free_r+0x7a>
 8003008:	230c      	movs	r3, #12
 800300a:	602b      	str	r3, [r5, #0]
 800300c:	e7d4      	b.n	8002fb8 <_free_r+0x24>
 800300e:	6820      	ldr	r0, [r4, #0]
 8003010:	1821      	adds	r1, r4, r0
 8003012:	428a      	cmp	r2, r1
 8003014:	bf01      	itttt	eq
 8003016:	6811      	ldreq	r1, [r2, #0]
 8003018:	6852      	ldreq	r2, [r2, #4]
 800301a:	1809      	addeq	r1, r1, r0
 800301c:	6021      	streq	r1, [r4, #0]
 800301e:	6062      	str	r2, [r4, #4]
 8003020:	605c      	str	r4, [r3, #4]
 8003022:	e7c9      	b.n	8002fb8 <_free_r+0x24>
 8003024:	bd38      	pop	{r3, r4, r5, pc}
 8003026:	bf00      	nop
 8003028:	200017f0 	.word	0x200017f0

0800302c <_malloc_r>:
 800302c:	b570      	push	{r4, r5, r6, lr}
 800302e:	1ccd      	adds	r5, r1, #3
 8003030:	f025 0503 	bic.w	r5, r5, #3
 8003034:	3508      	adds	r5, #8
 8003036:	2d0c      	cmp	r5, #12
 8003038:	bf38      	it	cc
 800303a:	250c      	movcc	r5, #12
 800303c:	2d00      	cmp	r5, #0
 800303e:	4606      	mov	r6, r0
 8003040:	db01      	blt.n	8003046 <_malloc_r+0x1a>
 8003042:	42a9      	cmp	r1, r5
 8003044:	d903      	bls.n	800304e <_malloc_r+0x22>
 8003046:	230c      	movs	r3, #12
 8003048:	6033      	str	r3, [r6, #0]
 800304a:	2000      	movs	r0, #0
 800304c:	bd70      	pop	{r4, r5, r6, pc}
 800304e:	f000 f881 	bl	8003154 <__malloc_lock>
 8003052:	4a23      	ldr	r2, [pc, #140]	; (80030e0 <_malloc_r+0xb4>)
 8003054:	6814      	ldr	r4, [r2, #0]
 8003056:	4621      	mov	r1, r4
 8003058:	b991      	cbnz	r1, 8003080 <_malloc_r+0x54>
 800305a:	4c22      	ldr	r4, [pc, #136]	; (80030e4 <_malloc_r+0xb8>)
 800305c:	6823      	ldr	r3, [r4, #0]
 800305e:	b91b      	cbnz	r3, 8003068 <_malloc_r+0x3c>
 8003060:	4630      	mov	r0, r6
 8003062:	f000 f867 	bl	8003134 <_sbrk_r>
 8003066:	6020      	str	r0, [r4, #0]
 8003068:	4629      	mov	r1, r5
 800306a:	4630      	mov	r0, r6
 800306c:	f000 f862 	bl	8003134 <_sbrk_r>
 8003070:	1c43      	adds	r3, r0, #1
 8003072:	d126      	bne.n	80030c2 <_malloc_r+0x96>
 8003074:	230c      	movs	r3, #12
 8003076:	4630      	mov	r0, r6
 8003078:	6033      	str	r3, [r6, #0]
 800307a:	f000 f86c 	bl	8003156 <__malloc_unlock>
 800307e:	e7e4      	b.n	800304a <_malloc_r+0x1e>
 8003080:	680b      	ldr	r3, [r1, #0]
 8003082:	1b5b      	subs	r3, r3, r5
 8003084:	d41a      	bmi.n	80030bc <_malloc_r+0x90>
 8003086:	2b0b      	cmp	r3, #11
 8003088:	d90f      	bls.n	80030aa <_malloc_r+0x7e>
 800308a:	600b      	str	r3, [r1, #0]
 800308c:	18cc      	adds	r4, r1, r3
 800308e:	50cd      	str	r5, [r1, r3]
 8003090:	4630      	mov	r0, r6
 8003092:	f000 f860 	bl	8003156 <__malloc_unlock>
 8003096:	f104 000b 	add.w	r0, r4, #11
 800309a:	1d23      	adds	r3, r4, #4
 800309c:	f020 0007 	bic.w	r0, r0, #7
 80030a0:	1ac3      	subs	r3, r0, r3
 80030a2:	d01b      	beq.n	80030dc <_malloc_r+0xb0>
 80030a4:	425a      	negs	r2, r3
 80030a6:	50e2      	str	r2, [r4, r3]
 80030a8:	bd70      	pop	{r4, r5, r6, pc}
 80030aa:	428c      	cmp	r4, r1
 80030ac:	bf0b      	itete	eq
 80030ae:	6863      	ldreq	r3, [r4, #4]
 80030b0:	684b      	ldrne	r3, [r1, #4]
 80030b2:	6013      	streq	r3, [r2, #0]
 80030b4:	6063      	strne	r3, [r4, #4]
 80030b6:	bf18      	it	ne
 80030b8:	460c      	movne	r4, r1
 80030ba:	e7e9      	b.n	8003090 <_malloc_r+0x64>
 80030bc:	460c      	mov	r4, r1
 80030be:	6849      	ldr	r1, [r1, #4]
 80030c0:	e7ca      	b.n	8003058 <_malloc_r+0x2c>
 80030c2:	1cc4      	adds	r4, r0, #3
 80030c4:	f024 0403 	bic.w	r4, r4, #3
 80030c8:	42a0      	cmp	r0, r4
 80030ca:	d005      	beq.n	80030d8 <_malloc_r+0xac>
 80030cc:	1a21      	subs	r1, r4, r0
 80030ce:	4630      	mov	r0, r6
 80030d0:	f000 f830 	bl	8003134 <_sbrk_r>
 80030d4:	3001      	adds	r0, #1
 80030d6:	d0cd      	beq.n	8003074 <_malloc_r+0x48>
 80030d8:	6025      	str	r5, [r4, #0]
 80030da:	e7d9      	b.n	8003090 <_malloc_r+0x64>
 80030dc:	bd70      	pop	{r4, r5, r6, pc}
 80030de:	bf00      	nop
 80030e0:	200017f0 	.word	0x200017f0
 80030e4:	200017f4 	.word	0x200017f4

080030e8 <_realloc_r>:
 80030e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ea:	4607      	mov	r7, r0
 80030ec:	4614      	mov	r4, r2
 80030ee:	460e      	mov	r6, r1
 80030f0:	b921      	cbnz	r1, 80030fc <_realloc_r+0x14>
 80030f2:	4611      	mov	r1, r2
 80030f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80030f8:	f7ff bf98 	b.w	800302c <_malloc_r>
 80030fc:	b922      	cbnz	r2, 8003108 <_realloc_r+0x20>
 80030fe:	f7ff ff49 	bl	8002f94 <_free_r>
 8003102:	4625      	mov	r5, r4
 8003104:	4628      	mov	r0, r5
 8003106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003108:	f000 f826 	bl	8003158 <_malloc_usable_size_r>
 800310c:	4284      	cmp	r4, r0
 800310e:	d90f      	bls.n	8003130 <_realloc_r+0x48>
 8003110:	4621      	mov	r1, r4
 8003112:	4638      	mov	r0, r7
 8003114:	f7ff ff8a 	bl	800302c <_malloc_r>
 8003118:	4605      	mov	r5, r0
 800311a:	2800      	cmp	r0, #0
 800311c:	d0f2      	beq.n	8003104 <_realloc_r+0x1c>
 800311e:	4631      	mov	r1, r6
 8003120:	4622      	mov	r2, r4
 8003122:	f7ff ff11 	bl	8002f48 <memcpy>
 8003126:	4631      	mov	r1, r6
 8003128:	4638      	mov	r0, r7
 800312a:	f7ff ff33 	bl	8002f94 <_free_r>
 800312e:	e7e9      	b.n	8003104 <_realloc_r+0x1c>
 8003130:	4635      	mov	r5, r6
 8003132:	e7e7      	b.n	8003104 <_realloc_r+0x1c>

08003134 <_sbrk_r>:
 8003134:	b538      	push	{r3, r4, r5, lr}
 8003136:	2300      	movs	r3, #0
 8003138:	4c05      	ldr	r4, [pc, #20]	; (8003150 <_sbrk_r+0x1c>)
 800313a:	4605      	mov	r5, r0
 800313c:	4608      	mov	r0, r1
 800313e:	6023      	str	r3, [r4, #0]
 8003140:	f7ff faf8 	bl	8002734 <_sbrk>
 8003144:	1c43      	adds	r3, r0, #1
 8003146:	d102      	bne.n	800314e <_sbrk_r+0x1a>
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	b103      	cbz	r3, 800314e <_sbrk_r+0x1a>
 800314c:	602b      	str	r3, [r5, #0]
 800314e:	bd38      	pop	{r3, r4, r5, pc}
 8003150:	20002b94 	.word	0x20002b94

08003154 <__malloc_lock>:
 8003154:	4770      	bx	lr

08003156 <__malloc_unlock>:
 8003156:	4770      	bx	lr

08003158 <_malloc_usable_size_r>:
 8003158:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800315c:	2800      	cmp	r0, #0
 800315e:	f1a0 0004 	sub.w	r0, r0, #4
 8003162:	bfbc      	itt	lt
 8003164:	580b      	ldrlt	r3, [r1, r0]
 8003166:	18c0      	addlt	r0, r0, r3
 8003168:	4770      	bx	lr
	...

0800316c <_init>:
 800316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316e:	bf00      	nop
 8003170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003172:	bc08      	pop	{r3}
 8003174:	469e      	mov	lr, r3
 8003176:	4770      	bx	lr

08003178 <_fini>:
 8003178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317a:	bf00      	nop
 800317c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317e:	bc08      	pop	{r3}
 8003180:	469e      	mov	lr, r3
 8003182:	4770      	bx	lr
